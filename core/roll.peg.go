package main

// Code generated by peg -inline roll.peg DO NOT EDIT.

import (
	"fmt"
	"io"
	"os"
	"sort"
	"strconv"
	"strings"
)

const endSymbol rune = 1114112

/* The rule types inferred from the grammar are below. */
type pegRule uint8

const (
	ruleUnknown pegRule = iota
	rulee
	rulee1
	rulee2
	rulee3
	ruleeDice
	rulee4
	rulevalue
	rulenumber
	ruleidentifier
	rulesub
	ruleadd
	ruleminus
	rulemultiply
	ruledivide
	rulemodulus
	ruleexponentiation
	ruleopen
	ruleclose
	rulesp
	rulefstring
	ruleescape
	ruleAction0
	ruleAction1
	ruleAction2
	ruleAction3
	ruleAction4
	ruleAction5
	ruleAction6
	ruleAction7
	ruleAction8
	ruleAction9
	ruleAction10
	ruleAction11
	rulePegText
	ruleAction12
)

var rul3s = [...]string{
	"Unknown",
	"e",
	"e1",
	"e2",
	"e3",
	"eDice",
	"e4",
	"value",
	"number",
	"identifier",
	"sub",
	"add",
	"minus",
	"multiply",
	"divide",
	"modulus",
	"exponentiation",
	"open",
	"close",
	"sp",
	"fstring",
	"escape",
	"Action0",
	"Action1",
	"Action2",
	"Action3",
	"Action4",
	"Action5",
	"Action6",
	"Action7",
	"Action8",
	"Action9",
	"Action10",
	"Action11",
	"PegText",
	"Action12",
}

type token32 struct {
	pegRule
	begin, end uint32
}

func (t *token32) String() string {
	return fmt.Sprintf("\x1B[34m%v\x1B[m %v %v", rul3s[t.pegRule], t.begin, t.end)
}

type node32 struct {
	token32
	up, next *node32
}

func (node *node32) print(w io.Writer, pretty bool, buffer string) {
	var print func(node *node32, depth int)
	print = func(node *node32, depth int) {
		for node != nil {
			for c := 0; c < depth; c++ {
				fmt.Fprintf(w, " ")
			}
			rule := rul3s[node.pegRule]
			quote := strconv.Quote(string(([]rune(buffer)[node.begin:node.end])))
			if !pretty {
				fmt.Fprintf(w, "%v %v\n", rule, quote)
			} else {
				fmt.Fprintf(w, "\x1B[36m%v\x1B[m %v\n", rule, quote)
			}
			if node.up != nil {
				print(node.up, depth+1)
			}
			node = node.next
		}
	}
	print(node, 0)
}

func (node *node32) Print(w io.Writer, buffer string) {
	node.print(w, false, buffer)
}

func (node *node32) PrettyPrint(w io.Writer, buffer string) {
	node.print(w, true, buffer)
}

type tokens32 struct {
	tree []token32
}

func (t *tokens32) Trim(length uint32) {
	t.tree = t.tree[:length]
}

func (t *tokens32) Print() {
	for _, token := range t.tree {
		fmt.Println(token.String())
	}
}

func (t *tokens32) AST() *node32 {
	type element struct {
		node *node32
		down *element
	}
	tokens := t.Tokens()
	var stack *element
	for _, token := range tokens {
		if token.begin == token.end {
			continue
		}
		node := &node32{token32: token}
		for stack != nil && stack.node.begin >= token.begin && stack.node.end <= token.end {
			stack.node.next = node.up
			node.up = stack.node
			stack = stack.down
		}
		stack = &element{node: node, down: stack}
	}
	if stack != nil {
		return stack.node
	}
	return nil
}

func (t *tokens32) PrintSyntaxTree(buffer string) {
	t.AST().Print(os.Stdout, buffer)
}

func (t *tokens32) WriteSyntaxTree(w io.Writer, buffer string) {
	t.AST().Print(w, buffer)
}

func (t *tokens32) PrettyPrintSyntaxTree(buffer string) {
	t.AST().PrettyPrint(os.Stdout, buffer)
}

func (t *tokens32) Add(rule pegRule, begin, end, index uint32) {
	tree, i := t.tree, int(index)
	if i >= len(tree) {
		t.tree = append(tree, token32{pegRule: rule, begin: begin, end: end})
		return
	}
	tree[i] = token32{pegRule: rule, begin: begin, end: end}
}

func (t *tokens32) Tokens() []token32 {
	return t.tree
}

type DiceRollParser struct {
	RollExpression

	Buffer string
	buffer []rune
	rules  [36]func() bool
	parse  func(rule ...int) error
	reset  func()
	Pretty bool
	tokens32
}

func (p *DiceRollParser) Parse(rule ...int) error {
	return p.parse(rule...)
}

func (p *DiceRollParser) Reset() {
	p.reset()
}

type textPosition struct {
	line, symbol int
}

type textPositionMap map[int]textPosition

func translatePositions(buffer []rune, positions []int) textPositionMap {
	length, translations, j, line, symbol := len(positions), make(textPositionMap, len(positions)), 0, 1, 0
	sort.Ints(positions)

search:
	for i, c := range buffer {
		if c == '\n' {
			line, symbol = line+1, 0
		} else {
			symbol++
		}
		if i == positions[j] {
			translations[positions[j]] = textPosition{line, symbol}
			for j++; j < length; j++ {
				if i != positions[j] {
					continue search
				}
			}
			break search
		}
	}

	return translations
}

type parseError struct {
	p   *DiceRollParser
	max token32
}

func (e *parseError) Error() string {
	tokens, err := []token32{e.max}, "\n"
	positions, p := make([]int, 2*len(tokens)), 0
	for _, token := range tokens {
		positions[p], p = int(token.begin), p+1
		positions[p], p = int(token.end), p+1
	}
	translations := translatePositions(e.p.buffer, positions)
	format := "parse error near %v (line %v symbol %v - line %v symbol %v):\n%v\n"
	if e.p.Pretty {
		format = "parse error near \x1B[34m%v\x1B[m (line %v symbol %v - line %v symbol %v):\n%v\n"
	}
	for _, token := range tokens {
		begin, end := int(token.begin), int(token.end)
		err += fmt.Sprintf(format,
			rul3s[token.pegRule],
			translations[begin].line, translations[begin].symbol,
			translations[end].line, translations[end].symbol,
			strconv.Quote(string(e.p.buffer[begin:end])))
	}

	return err
}

func (p *DiceRollParser) PrintSyntaxTree() {
	if p.Pretty {
		p.tokens32.PrettyPrintSyntaxTree(p.Buffer)
	} else {
		p.tokens32.PrintSyntaxTree(p.Buffer)
	}
}

func (p *DiceRollParser) WriteSyntaxTree(w io.Writer) {
	p.tokens32.WriteSyntaxTree(w, p.Buffer)
}

func (p *DiceRollParser) SprintSyntaxTree() string {
	var bldr strings.Builder
	p.WriteSyntaxTree(&bldr)
	return bldr.String()
}

func (p *DiceRollParser) Execute() {
	buffer, _buffer, text, begin, end := p.Buffer, p.buffer, "", 0, 0
	for _, token := range p.Tokens() {
		switch token.pegRule {

		case rulePegText:
			begin, end = int(token.begin), int(token.end)
			text = string(_buffer[begin:end])

		case ruleAction0:
			p.AddOperator(TypeHalt)
		case ruleAction1:
			p.AddOperator(TypeAdd)
		case ruleAction2:
			p.AddOperator(TypeSubtract)
		case ruleAction3:
			p.AddOperator(TypeMultiply)
		case ruleAction4:
			p.AddOperator(TypeDivide)
		case ruleAction5:
			p.AddOperator(TypeModulus)
		case ruleAction6:
			p.AddOperator(TypeExponentiation)
		case ruleAction7:
			p.AddOperator(TypeDice)
		case ruleAction8:
			p.AddValue("1")
			p.AddOperator(TypeSwap)
			p.AddOperator(TypeDice)
		case ruleAction9:
			p.AddOperator(TypeNegation)
		case ruleAction10:
			p.AddValue(string(text))
		case ruleAction11:
			p.AddLoadVarname(string(text))
		case ruleAction12:
			p.AddFormatString(string(text))

		}
	}
	_, _, _, _, _ = buffer, _buffer, text, begin, end
}

func Pretty(pretty bool) func(*DiceRollParser) error {
	return func(p *DiceRollParser) error {
		p.Pretty = pretty
		return nil
	}
}

func Size(size int) func(*DiceRollParser) error {
	return func(p *DiceRollParser) error {
		p.tokens32 = tokens32{tree: make([]token32, 0, size)}
		return nil
	}
}
func (p *DiceRollParser) Init(options ...func(*DiceRollParser) error) error {
	var (
		max                  token32
		position, tokenIndex uint32
		buffer               []rune
	)
	for _, option := range options {
		err := option(p)
		if err != nil {
			return err
		}
	}
	p.reset = func() {
		max = token32{}
		position, tokenIndex = 0, 0

		p.buffer = []rune(p.Buffer)
		if len(p.buffer) == 0 || p.buffer[len(p.buffer)-1] != endSymbol {
			p.buffer = append(p.buffer, endSymbol)
		}
		buffer = p.buffer
	}
	p.reset()

	_rules := p.rules
	tree := p.tokens32
	p.parse = func(rule ...int) error {
		r := 1
		if len(rule) > 0 {
			r = rule[0]
		}
		matches := p.rules[r]()
		p.tokens32 = tree
		if matches {
			p.Trim(tokenIndex)
			return nil
		}
		return &parseError{p, max}
	}

	add := func(rule pegRule, begin uint32) {
		tree.Add(rule, begin, position, tokenIndex)
		tokenIndex++
		if begin != position && position > max.end {
			max = token32{rule, begin, position}
		}
	}

	matchDot := func() bool {
		if buffer[position] != endSymbol {
			position++
			return true
		}
		return false
	}

	/*matchChar := func(c byte) bool {
		if buffer[position] == c {
			position++
			return true
		}
		return false
	}*/

	/*matchRange := func(lower byte, upper byte) bool {
		if c := buffer[position]; c >= lower && c <= upper {
			position++
			return true
		}
		return false
	}*/

	_rules = [...]func() bool{
		nil,
		/* 0 e <- <(sp (fstring / e1) !. Action0)> */
		func() bool {
			position0, tokenIndex0 := position, tokenIndex
			{
				position1 := position
				if !_rules[rulesp]() {
					goto l0
				}
				{
					position2, tokenIndex2 := position, tokenIndex
					{
						position4 := position
						if buffer[position] != rune('`') {
							goto l3
						}
						position++
						{
							position5 := position
						l6:
							{
								position7, tokenIndex7 := position, tokenIndex
								{
									position8, tokenIndex8 := position, tokenIndex
									if buffer[position] != rune('{') {
										goto l9
									}
									position++
									if !_rules[rulesp]() {
										goto l9
									}
									if !_rules[rulee1]() {
										goto l9
									}
									if !_rules[rulesp]() {
										goto l9
									}
									if buffer[position] != rune('}') {
										goto l9
									}
									position++
									goto l8
								l9:
									position, tokenIndex = position8, tokenIndex8
									{
										position11 := position
										if buffer[position] != rune('\\') {
											goto l10
										}
										position++
										{
											position12, tokenIndex12 := position, tokenIndex
											if buffer[position] != rune('b') {
												goto l13
											}
											position++
											goto l12
										l13:
											position, tokenIndex = position12, tokenIndex12
											if buffer[position] != rune('t') {
												goto l14
											}
											position++
											goto l12
										l14:
											position, tokenIndex = position12, tokenIndex12
											if buffer[position] != rune('n') {
												goto l15
											}
											position++
											goto l12
										l15:
											position, tokenIndex = position12, tokenIndex12
											if buffer[position] != rune('f') {
												goto l16
											}
											position++
											goto l12
										l16:
											position, tokenIndex = position12, tokenIndex12
											if buffer[position] != rune('r') {
												goto l17
											}
											position++
											goto l12
										l17:
											position, tokenIndex = position12, tokenIndex12
											if buffer[position] != rune('"') {
												goto l18
											}
											position++
											goto l12
										l18:
											position, tokenIndex = position12, tokenIndex12
											if buffer[position] != rune('\'') {
												goto l19
											}
											position++
											goto l12
										l19:
											position, tokenIndex = position12, tokenIndex12
											if buffer[position] != rune('\\') {
												goto l10
											}
											position++
										}
									l12:
										add(ruleescape, position11)
									}
									goto l8
								l10:
									position, tokenIndex = position8, tokenIndex8
									{
										position20, tokenIndex20 := position, tokenIndex
										{
											position21, tokenIndex21 := position, tokenIndex
											if buffer[position] != rune('`') {
												goto l22
											}
											position++
											goto l21
										l22:
											position, tokenIndex = position21, tokenIndex21
											if buffer[position] != rune('\\') {
												goto l23
											}
											position++
											goto l21
										l23:
											position, tokenIndex = position21, tokenIndex21
											if buffer[position] != rune('\n') {
												goto l24
											}
											position++
											goto l21
										l24:
											position, tokenIndex = position21, tokenIndex21
											if buffer[position] != rune('\r') {
												goto l20
											}
											position++
										}
									l21:
										goto l7
									l20:
										position, tokenIndex = position20, tokenIndex20
									}
									if !matchDot() {
										goto l7
									}
								}
							l8:
								goto l6
							l7:
								position, tokenIndex = position7, tokenIndex7
							}
							add(rulePegText, position5)
						}
						if buffer[position] != rune('`') {
							goto l3
						}
						position++
						if !_rules[rulesp]() {
							goto l3
						}
						{
							add(ruleAction12, position)
						}
						add(rulefstring, position4)
					}
					goto l2
				l3:
					position, tokenIndex = position2, tokenIndex2
					if !_rules[rulee1]() {
						goto l0
					}
				}
			l2:
				{
					position26, tokenIndex26 := position, tokenIndex
					if !matchDot() {
						goto l26
					}
					goto l0
				l26:
					position, tokenIndex = position26, tokenIndex26
				}
				{
					add(ruleAction0, position)
				}
				add(rulee, position1)
			}
			return true
		l0:
			position, tokenIndex = position0, tokenIndex0
			return false
		},
		/* 1 e1 <- <(e2 ((add e2 Action1) / (minus e2 Action2))*)> */
		func() bool {
			position28, tokenIndex28 := position, tokenIndex
			{
				position29 := position
				if !_rules[rulee2]() {
					goto l28
				}
			l30:
				{
					position31, tokenIndex31 := position, tokenIndex
					{
						position32, tokenIndex32 := position, tokenIndex
						{
							position34 := position
							if buffer[position] != rune('+') {
								goto l33
							}
							position++
							if !_rules[rulesp]() {
								goto l33
							}
							add(ruleadd, position34)
						}
						if !_rules[rulee2]() {
							goto l33
						}
						{
							add(ruleAction1, position)
						}
						goto l32
					l33:
						position, tokenIndex = position32, tokenIndex32
						if !_rules[ruleminus]() {
							goto l31
						}
						if !_rules[rulee2]() {
							goto l31
						}
						{
							add(ruleAction2, position)
						}
					}
				l32:
					goto l30
				l31:
					position, tokenIndex = position31, tokenIndex31
				}
				add(rulee1, position29)
			}
			return true
		l28:
			position, tokenIndex = position28, tokenIndex28
			return false
		},
		/* 2 e2 <- <(e3 ((multiply e3 Action3) / (divide e3 Action4) / (modulus e3 Action5))*)> */
		func() bool {
			position37, tokenIndex37 := position, tokenIndex
			{
				position38 := position
				if !_rules[rulee3]() {
					goto l37
				}
			l39:
				{
					position40, tokenIndex40 := position, tokenIndex
					{
						position41, tokenIndex41 := position, tokenIndex
						{
							position43 := position
							if buffer[position] != rune('*') {
								goto l42
							}
							position++
							if !_rules[rulesp]() {
								goto l42
							}
							add(rulemultiply, position43)
						}
						if !_rules[rulee3]() {
							goto l42
						}
						{
							add(ruleAction3, position)
						}
						goto l41
					l42:
						position, tokenIndex = position41, tokenIndex41
						{
							position46 := position
							if buffer[position] != rune('/') {
								goto l45
							}
							position++
							if !_rules[rulesp]() {
								goto l45
							}
							add(ruledivide, position46)
						}
						if !_rules[rulee3]() {
							goto l45
						}
						{
							add(ruleAction4, position)
						}
						goto l41
					l45:
						position, tokenIndex = position41, tokenIndex41
						{
							position48 := position
							if buffer[position] != rune('%') {
								goto l40
							}
							position++
							if !_rules[rulesp]() {
								goto l40
							}
							add(rulemodulus, position48)
						}
						if !_rules[rulee3]() {
							goto l40
						}
						{
							add(ruleAction5, position)
						}
					}
				l41:
					goto l39
				l40:
					position, tokenIndex = position40, tokenIndex40
				}
				add(rulee2, position38)
			}
			return true
		l37:
			position, tokenIndex = position37, tokenIndex37
			return false
		},
		/* 3 e3 <- <(eDice (exponentiation eDice Action6)*)> */
		func() bool {
			position50, tokenIndex50 := position, tokenIndex
			{
				position51 := position
				if !_rules[ruleeDice]() {
					goto l50
				}
			l52:
				{
					position53, tokenIndex53 := position, tokenIndex
					{
						position54 := position
						{
							position55, tokenIndex55 := position, tokenIndex
							if buffer[position] != rune('^') {
								goto l56
							}
							position++
							if !_rules[rulesp]() {
								goto l56
							}
							goto l55
						l56:
							position, tokenIndex = position55, tokenIndex55
							if buffer[position] != rune('*') {
								goto l53
							}
							position++
							if buffer[position] != rune('*') {
								goto l53
							}
							position++
							if !_rules[rulesp]() {
								goto l53
							}
						}
					l55:
						add(ruleexponentiation, position54)
					}
					if !_rules[ruleeDice]() {
						goto l53
					}
					{
						add(ruleAction6, position)
					}
					goto l52
				l53:
					position, tokenIndex = position53, tokenIndex53
				}
				add(rulee3, position51)
			}
			return true
		l50:
			position, tokenIndex = position50, tokenIndex50
			return false
		},
		/* 4 eDice <- <((e4 ('d' e4 ('k' e4)? Action7)*) / ('d' e4 ('k' e4)? Action8)*)> */
		func() bool {
			{
				position59 := position
				{
					position60, tokenIndex60 := position, tokenIndex
					if !_rules[rulee4]() {
						goto l61
					}
				l62:
					{
						position63, tokenIndex63 := position, tokenIndex
						if buffer[position] != rune('d') {
							goto l63
						}
						position++
						if !_rules[rulee4]() {
							goto l63
						}
						{
							position64, tokenIndex64 := position, tokenIndex
							if buffer[position] != rune('k') {
								goto l64
							}
							position++
							if !_rules[rulee4]() {
								goto l64
							}
							goto l65
						l64:
							position, tokenIndex = position64, tokenIndex64
						}
					l65:
						{
							add(ruleAction7, position)
						}
						goto l62
					l63:
						position, tokenIndex = position63, tokenIndex63
					}
					goto l60
				l61:
					position, tokenIndex = position60, tokenIndex60
				l67:
					{
						position68, tokenIndex68 := position, tokenIndex
						if buffer[position] != rune('d') {
							goto l68
						}
						position++
						if !_rules[rulee4]() {
							goto l68
						}
						{
							position69, tokenIndex69 := position, tokenIndex
							if buffer[position] != rune('k') {
								goto l69
							}
							position++
							if !_rules[rulee4]() {
								goto l69
							}
							goto l70
						l69:
							position, tokenIndex = position69, tokenIndex69
						}
					l70:
						{
							add(ruleAction8, position)
						}
						goto l67
					l68:
						position, tokenIndex = position68, tokenIndex68
					}
				}
			l60:
				add(ruleeDice, position59)
			}
			return true
		},
		/* 5 e4 <- <((minus value Action9) / value)> */
		func() bool {
			position72, tokenIndex72 := position, tokenIndex
			{
				position73 := position
				{
					position74, tokenIndex74 := position, tokenIndex
					if !_rules[ruleminus]() {
						goto l75
					}
					if !_rules[rulevalue]() {
						goto l75
					}
					{
						add(ruleAction9, position)
					}
					goto l74
				l75:
					position, tokenIndex = position74, tokenIndex74
					if !_rules[rulevalue]() {
						goto l72
					}
				}
			l74:
				add(rulee4, position73)
			}
			return true
		l72:
			position, tokenIndex = position72, tokenIndex72
			return false
		},
		/* 6 value <- <((number Action10) / (identifier Action11) / sub)> */
		func() bool {
			position77, tokenIndex77 := position, tokenIndex
			{
				position78 := position
				{
					position79, tokenIndex79 := position, tokenIndex
					{
						position81 := position
						{
							position82 := position
							if c := buffer[position]; c < rune('0') || c > rune('9') {
								goto l80
							}
							position++
						l83:
							{
								position84, tokenIndex84 := position, tokenIndex
								if c := buffer[position]; c < rune('0') || c > rune('9') {
									goto l84
								}
								position++
								goto l83
							l84:
								position, tokenIndex = position84, tokenIndex84
							}
							add(rulePegText, position82)
						}
						if !_rules[rulesp]() {
							goto l80
						}
						add(rulenumber, position81)
					}
					{
						add(ruleAction10, position)
					}
					goto l79
				l80:
					position, tokenIndex = position79, tokenIndex79
					{
						position87 := position
						{
							position88, tokenIndex88 := position, tokenIndex
							if buffer[position] != rune('d') {
								goto l88
							}
							position++
							goto l86
						l88:
							position, tokenIndex = position88, tokenIndex88
						}
						{
							position89 := position
							{
								position92, tokenIndex92 := position, tokenIndex
								{
									position93, tokenIndex93 := position, tokenIndex
									if buffer[position] != rune('!') {
										goto l94
									}
									position++
									goto l93
								l94:
									position, tokenIndex = position93, tokenIndex93
									if buffer[position] != rune('"') {
										goto l95
									}
									position++
									goto l93
								l95:
									position, tokenIndex = position93, tokenIndex93
									if buffer[position] != rune('#') {
										goto l96
									}
									position++
									goto l93
								l96:
									position, tokenIndex = position93, tokenIndex93
									if buffer[position] != rune('$') {
										goto l97
									}
									position++
									goto l93
								l97:
									position, tokenIndex = position93, tokenIndex93
									if buffer[position] != rune('%') {
										goto l98
									}
									position++
									goto l93
								l98:
									position, tokenIndex = position93, tokenIndex93
									if buffer[position] != rune('&') {
										goto l99
									}
									position++
									goto l93
								l99:
									position, tokenIndex = position93, tokenIndex93
									if buffer[position] != rune('\'') {
										goto l100
									}
									position++
									goto l93
								l100:
									position, tokenIndex = position93, tokenIndex93
									if buffer[position] != rune('(') {
										goto l101
									}
									position++
									goto l93
								l101:
									position, tokenIndex = position93, tokenIndex93
									if buffer[position] != rune(')') {
										goto l102
									}
									position++
									goto l93
								l102:
									position, tokenIndex = position93, tokenIndex93
									if buffer[position] != rune('*') {
										goto l103
									}
									position++
									goto l93
								l103:
									position, tokenIndex = position93, tokenIndex93
									if buffer[position] != rune('+') {
										goto l104
									}
									position++
									goto l93
								l104:
									position, tokenIndex = position93, tokenIndex93
									if c := buffer[position]; c < rune(',') || c > rune('.') {
										goto l105
									}
									position++
									goto l93
								l105:
									position, tokenIndex = position93, tokenIndex93
									if buffer[position] != rune('/') {
										goto l106
									}
									position++
									goto l93
								l106:
									position, tokenIndex = position93, tokenIndex93
									if buffer[position] != rune(':') {
										goto l107
									}
									position++
									goto l93
								l107:
									position, tokenIndex = position93, tokenIndex93
									if buffer[position] != rune(';') {
										goto l108
									}
									position++
									goto l93
								l108:
									position, tokenIndex = position93, tokenIndex93
									if buffer[position] != rune('<') {
										goto l109
									}
									position++
									goto l93
								l109:
									position, tokenIndex = position93, tokenIndex93
									if buffer[position] != rune('=') {
										goto l110
									}
									position++
									goto l93
								l110:
									position, tokenIndex = position93, tokenIndex93
									if buffer[position] != rune('>') {
										goto l111
									}
									position++
									goto l93
								l111:
									position, tokenIndex = position93, tokenIndex93
									if buffer[position] != rune('?') {
										goto l112
									}
									position++
									goto l93
								l112:
									position, tokenIndex = position93, tokenIndex93
									if buffer[position] != rune('@') {
										goto l113
									}
									position++
									goto l93
								l113:
									position, tokenIndex = position93, tokenIndex93
									if buffer[position] != rune('[') {
										goto l114
									}
									position++
									goto l93
								l114:
									position, tokenIndex = position93, tokenIndex93
									if buffer[position] != rune('\\') {
										goto l115
									}
									position++
									goto l93
								l115:
									position, tokenIndex = position93, tokenIndex93
									if buffer[position] != rune(']') {
										goto l116
									}
									position++
									goto l93
								l116:
									position, tokenIndex = position93, tokenIndex93
									if buffer[position] != rune('^') {
										goto l117
									}
									position++
									goto l93
								l117:
									position, tokenIndex = position93, tokenIndex93
									if buffer[position] != rune('_') {
										goto l118
									}
									position++
									goto l93
								l118:
									position, tokenIndex = position93, tokenIndex93
									if buffer[position] != rune('`') {
										goto l119
									}
									position++
									goto l93
								l119:
									position, tokenIndex = position93, tokenIndex93
									if buffer[position] != rune('{') {
										goto l120
									}
									position++
									goto l93
								l120:
									position, tokenIndex = position93, tokenIndex93
									if buffer[position] != rune('|') {
										goto l121
									}
									position++
									goto l93
								l121:
									position, tokenIndex = position93, tokenIndex93
									if buffer[position] != rune('}') {
										goto l122
									}
									position++
									goto l93
								l122:
									position, tokenIndex = position93, tokenIndex93
									if buffer[position] != rune('~') {
										goto l123
									}
									position++
									goto l93
								l123:
									position, tokenIndex = position93, tokenIndex93
									if c := buffer[position]; c < rune('0') || c > rune('9') {
										goto l124
									}
									position++
									goto l93
								l124:
									position, tokenIndex = position93, tokenIndex93
									if buffer[position] != rune(' ') {
										goto l125
									}
									position++
									goto l93
								l125:
									position, tokenIndex = position93, tokenIndex93
									if buffer[position] != rune('\t') {
										goto l126
									}
									position++
									goto l93
								l126:
									position, tokenIndex = position93, tokenIndex93
									if buffer[position] != rune('\n') {
										goto l127
									}
									position++
									goto l93
								l127:
									position, tokenIndex = position93, tokenIndex93
									if buffer[position] != rune('\r') {
										goto l92
									}
									position++
								}
							l93:
								goto l86
							l92:
								position, tokenIndex = position92, tokenIndex92
							}
							if !matchDot() {
								goto l86
							}
						l90:
							{
								position91, tokenIndex91 := position, tokenIndex
								{
									position128, tokenIndex128 := position, tokenIndex
									{
										position129, tokenIndex129 := position, tokenIndex
										if buffer[position] != rune('!') {
											goto l130
										}
										position++
										goto l129
									l130:
										position, tokenIndex = position129, tokenIndex129
										if buffer[position] != rune('"') {
											goto l131
										}
										position++
										goto l129
									l131:
										position, tokenIndex = position129, tokenIndex129
										if buffer[position] != rune('#') {
											goto l132
										}
										position++
										goto l129
									l132:
										position, tokenIndex = position129, tokenIndex129
										if buffer[position] != rune('$') {
											goto l133
										}
										position++
										goto l129
									l133:
										position, tokenIndex = position129, tokenIndex129
										if buffer[position] != rune('%') {
											goto l134
										}
										position++
										goto l129
									l134:
										position, tokenIndex = position129, tokenIndex129
										if buffer[position] != rune('&') {
											goto l135
										}
										position++
										goto l129
									l135:
										position, tokenIndex = position129, tokenIndex129
										if buffer[position] != rune('\'') {
											goto l136
										}
										position++
										goto l129
									l136:
										position, tokenIndex = position129, tokenIndex129
										if buffer[position] != rune('(') {
											goto l137
										}
										position++
										goto l129
									l137:
										position, tokenIndex = position129, tokenIndex129
										if buffer[position] != rune(')') {
											goto l138
										}
										position++
										goto l129
									l138:
										position, tokenIndex = position129, tokenIndex129
										if buffer[position] != rune('*') {
											goto l139
										}
										position++
										goto l129
									l139:
										position, tokenIndex = position129, tokenIndex129
										if buffer[position] != rune('+') {
											goto l140
										}
										position++
										goto l129
									l140:
										position, tokenIndex = position129, tokenIndex129
										if c := buffer[position]; c < rune(',') || c > rune('.') {
											goto l141
										}
										position++
										goto l129
									l141:
										position, tokenIndex = position129, tokenIndex129
										if buffer[position] != rune('/') {
											goto l142
										}
										position++
										goto l129
									l142:
										position, tokenIndex = position129, tokenIndex129
										if buffer[position] != rune(':') {
											goto l143
										}
										position++
										goto l129
									l143:
										position, tokenIndex = position129, tokenIndex129
										if buffer[position] != rune(';') {
											goto l144
										}
										position++
										goto l129
									l144:
										position, tokenIndex = position129, tokenIndex129
										if buffer[position] != rune('<') {
											goto l145
										}
										position++
										goto l129
									l145:
										position, tokenIndex = position129, tokenIndex129
										if buffer[position] != rune('=') {
											goto l146
										}
										position++
										goto l129
									l146:
										position, tokenIndex = position129, tokenIndex129
										if buffer[position] != rune('>') {
											goto l147
										}
										position++
										goto l129
									l147:
										position, tokenIndex = position129, tokenIndex129
										if buffer[position] != rune('?') {
											goto l148
										}
										position++
										goto l129
									l148:
										position, tokenIndex = position129, tokenIndex129
										if buffer[position] != rune('@') {
											goto l149
										}
										position++
										goto l129
									l149:
										position, tokenIndex = position129, tokenIndex129
										if buffer[position] != rune('[') {
											goto l150
										}
										position++
										goto l129
									l150:
										position, tokenIndex = position129, tokenIndex129
										if buffer[position] != rune('\\') {
											goto l151
										}
										position++
										goto l129
									l151:
										position, tokenIndex = position129, tokenIndex129
										if buffer[position] != rune(']') {
											goto l152
										}
										position++
										goto l129
									l152:
										position, tokenIndex = position129, tokenIndex129
										if buffer[position] != rune('^') {
											goto l153
										}
										position++
										goto l129
									l153:
										position, tokenIndex = position129, tokenIndex129
										if buffer[position] != rune('_') {
											goto l154
										}
										position++
										goto l129
									l154:
										position, tokenIndex = position129, tokenIndex129
										if buffer[position] != rune('`') {
											goto l155
										}
										position++
										goto l129
									l155:
										position, tokenIndex = position129, tokenIndex129
										if buffer[position] != rune('{') {
											goto l156
										}
										position++
										goto l129
									l156:
										position, tokenIndex = position129, tokenIndex129
										if buffer[position] != rune('|') {
											goto l157
										}
										position++
										goto l129
									l157:
										position, tokenIndex = position129, tokenIndex129
										if buffer[position] != rune('}') {
											goto l158
										}
										position++
										goto l129
									l158:
										position, tokenIndex = position129, tokenIndex129
										if buffer[position] != rune('~') {
											goto l159
										}
										position++
										goto l129
									l159:
										position, tokenIndex = position129, tokenIndex129
										if c := buffer[position]; c < rune('0') || c > rune('9') {
											goto l160
										}
										position++
										goto l129
									l160:
										position, tokenIndex = position129, tokenIndex129
										if buffer[position] != rune(' ') {
											goto l161
										}
										position++
										goto l129
									l161:
										position, tokenIndex = position129, tokenIndex129
										if buffer[position] != rune('\t') {
											goto l162
										}
										position++
										goto l129
									l162:
										position, tokenIndex = position129, tokenIndex129
										if buffer[position] != rune('\n') {
											goto l163
										}
										position++
										goto l129
									l163:
										position, tokenIndex = position129, tokenIndex129
										if buffer[position] != rune('\r') {
											goto l128
										}
										position++
									}
								l129:
									goto l91
								l128:
									position, tokenIndex = position128, tokenIndex128
								}
								if !matchDot() {
									goto l91
								}
								goto l90
							l91:
								position, tokenIndex = position91, tokenIndex91
							}
							add(rulePegText, position89)
						}
						if !_rules[rulesp]() {
							goto l86
						}
						add(ruleidentifier, position87)
					}
					{
						add(ruleAction11, position)
					}
					goto l79
				l86:
					position, tokenIndex = position79, tokenIndex79
					{
						position165 := position
						{
							position166 := position
							if buffer[position] != rune('(') {
								goto l77
							}
							position++
							if !_rules[rulesp]() {
								goto l77
							}
							add(ruleopen, position166)
						}
						if !_rules[rulee1]() {
							goto l77
						}
						{
							position167 := position
							if buffer[position] != rune(')') {
								goto l77
							}
							position++
							if !_rules[rulesp]() {
								goto l77
							}
							add(ruleclose, position167)
						}
						add(rulesub, position165)
					}
				}
			l79:
				add(rulevalue, position78)
			}
			return true
		l77:
			position, tokenIndex = position77, tokenIndex77
			return false
		},
		/* 7 number <- <(<[0-9]+> sp)> */
		nil,
		/* 8 identifier <- <(!'d' <(!('!' / '"' / '#' / '$' / '%' / '&' / '\'' / '(' / ')' / '*' / '+' / [,-.] / '/' / ':' / ';' / '<' / '=' / '>' / '?' / '@' / '[' / '\\' / ']' / '^' / '_' / '`' / '{' / '|' / '}' / '~' / [0-9] / ' ' / '\t' / '\n' / '\r') .)+> sp)> */
		nil,
		/* 9 sub <- <(open e1 close)> */
		nil,
		/* 10 add <- <('+' sp)> */
		nil,
		/* 11 minus <- <('-' sp)> */
		func() bool {
			position172, tokenIndex172 := position, tokenIndex
			{
				position173 := position
				if buffer[position] != rune('-') {
					goto l172
				}
				position++
				if !_rules[rulesp]() {
					goto l172
				}
				add(ruleminus, position173)
			}
			return true
		l172:
			position, tokenIndex = position172, tokenIndex172
			return false
		},
		/* 12 multiply <- <('*' sp)> */
		nil,
		/* 13 divide <- <('/' sp)> */
		nil,
		/* 14 modulus <- <('%' sp)> */
		nil,
		/* 15 exponentiation <- <(('^' sp) / ('*' '*' sp))> */
		nil,
		/* 16 open <- <('(' sp)> */
		nil,
		/* 17 close <- <(')' sp)> */
		nil,
		/* 18 sp <- <(' ' / '\t')*> */
		func() bool {
			{
				position181 := position
			l182:
				{
					position183, tokenIndex183 := position, tokenIndex
					{
						position184, tokenIndex184 := position, tokenIndex
						if buffer[position] != rune(' ') {
							goto l185
						}
						position++
						goto l184
					l185:
						position, tokenIndex = position184, tokenIndex184
						if buffer[position] != rune('\t') {
							goto l183
						}
						position++
					}
				l184:
					goto l182
				l183:
					position, tokenIndex = position183, tokenIndex183
				}
				add(rulesp, position181)
			}
			return true
		},
		/* 19 fstring <- <('`' <(('{' sp e1 sp '}') / escape / (!('`' / '\\' / '\n' / '\r') .))*> '`' sp Action12)> */
		nil,
		/* 20 escape <- <('\\' ('b' / 't' / 'n' / 'f' / 'r' / '"' / '\'' / '\\'))> */
		nil,
		/* 22 Action0 <- <{ p.AddOperator(TypeHalt) }> */
		nil,
		/* 23 Action1 <- <{ p.AddOperator(TypeAdd) }> */
		nil,
		/* 24 Action2 <- <{ p.AddOperator(TypeSubtract) }> */
		nil,
		/* 25 Action3 <- <{ p.AddOperator(TypeMultiply) }> */
		nil,
		/* 26 Action4 <- <{ p.AddOperator(TypeDivide) }> */
		nil,
		/* 27 Action5 <- <{ p.AddOperator(TypeModulus) }> */
		nil,
		/* 28 Action6 <- <{ p.AddOperator(TypeExponentiation) }> */
		nil,
		/* 29 Action7 <- <{ p.AddOperator(TypeDice) }> */
		nil,
		/* 30 Action8 <- <{ p.AddValue("1"); p.AddOperator(TypeSwap); p.AddOperator(TypeDice) }> */
		nil,
		/* 31 Action9 <- <{ p.AddOperator(TypeNegation) }> */
		nil,
		/* 32 Action10 <- <{ p.AddValue(string(text)) }> */
		nil,
		/* 33 Action11 <- <{ p.AddLoadVarname(string(text)) }> */
		nil,
		nil,
		/* 35 Action12 <- <{ p.AddFormatString(string(text)) }> */
		nil,
	}
	p.rules = _rules
	return nil
}
