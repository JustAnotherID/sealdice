// part of SealDice project

package dice

type DiceRollParser Peg {
    RollExpression
}

// 实际操作中发现，不匹配句尾比较好 (没有!.)
e <- sp (fstring / e1) { p.AddOperator(TypeHalt) }
e1 <- e2 ( add { p.AddLeftValueMark() } e2 { p.AddOperator(TypeAdd) }
         / minus { p.AddLeftValueMark() } e2 { p.AddOperator(TypeSubtract) }
         )*
e2 <- e3 ( multiply { p.AddLeftValueMark() } e3 { p.AddOperator(TypeMultiply) }
         / divide { p.AddLeftValueMark() } e3 { p.AddOperator(TypeDivide) }
         / modulus { p.AddLeftValueMark() } e3 { p.AddOperator(TypeModulus) }
         )*

e3 <- e4 ( exponentiation { p.AddLeftValueMark() } e4 { p.AddOperator(TypeExponentiation) }
         )*

e4 <- minus e5 { p.AddOperator(TypeNegation) }
    / e5

e5 <- add eDice
    / eDice

eDice <- eDice2 ( ('d'/'D') { p.AddLeftValueMark() } eDice2 ('k' eDice2 { p.AddOperator(TypeDiceSetK) } )? ('q' eDice2 { p.AddOperator(TypeDiceSetQ) } )? { p.AddOperator(TypeDice) }
         )*
         / ( ('d'/'D') { p.AddValue("1"); p.AddLeftValueMark() } eDice2 ('k' eDice2 { p.AddOperator(TypeDiceSetK) })? ('q' eDice2 { p.AddOperator(TypeDiceSetQ) } )? { p.AddOperator(TypeDice) } )+

// 这里故意弄成number，因为出现了 .rab射击 读取了射击的值，结果成为 .rab60 这样子的情况
eDice2 <- ('p' / 'P') number { p.AddOperator(TypeDicePenalty) }
         / ('p' / 'P')  { p.AddValue("1"); p.AddOperator(TypeDicePenalty) }
         / eDice3

eDice3 <- ('b' / 'B') number { p.AddOperator(TypeDiceBonus) }
         / ('b' / 'B')  { p.AddValue("1"); p.AddOperator(TypeDiceBonus) }
         / value

value <- number
       / assign_expr
       / identifier { p.AddLoadVarname(string(text)) }
       / sub
number <- < [0-9]+ > sp { p.AddValue(string(text)) }

assign_expr <- identifier { p.AddValueStr(string(text)) } '=' e1 { p.AddStore() }

identifier <- !'d' < [^!"#%&\'()*+,-./:;<=>?@\[\\\]^`{|}~0-9 \t\n\r][^!"#$%&\'()*+,-./;<=>?@\[\\\]^`{|}~ \t\n\r]* > sp // not (punctuation+number)
// identifier2 <- !'d' ![0-9] < (universalCharacter / [a-zA-Z_])+ > sp // not (punctuation+number)
sub <- open e1 close
add <- '+' sp
minus <- '-' sp
multiply <- '*' sp
divide <- '/' sp
modulus <- '%' sp
exponentiation <- '^' sp / '**' sp
open <- '(' sp
close <- ')' sp
sp <- ( ' ' / '\t' )*

fstring <- '`' < ( ('{' sp e1 sp '}') / escape / ![`\\\n\r] .)* > '`' sp { p.AddFormatString(string(text)) }
escape <- '\\' ([btnfr"'\\])  //  / OctalEscape / UnicodeEscape
