package dice

type DiceRollParser Peg {
    RollExpression
}

e <- sp (fstring / e1) !. { p.AddOperator(TypeHalt) }
e1 <- e2 ( add { p.AddLeftValueMark() } e2 { p.AddOperator(TypeAdd) }
         / minus { p.AddLeftValueMark() } e2 { p.AddOperator(TypeSubtract) }
         )*
e2 <- e3 ( multiply { p.AddLeftValueMark() } e3 { p.AddOperator(TypeMultiply) }
         / divide { p.AddLeftValueMark() } e3 { p.AddOperator(TypeDivide) }
         / modulus { p.AddLeftValueMark() } e3 { p.AddOperator(TypeModulus) }
         )*
e3 <- eDice ( exponentiation { p.AddLeftValueMark() } eDice { p.AddOperator(TypeExponentiation) }
         )*

eDice <- e4 ( ('d'/'D') { p.AddLeftValueMark() } e4 ('k' e4)? { p.AddOperator(TypeDice) }
         )*
         / ( ('d'/'D') { p.AddLeftValueMark() } e4 ('k' e4)? { p.AddValue("1"); p.AddOperator(TypeSwap); p.AddOperator(TypeDice) } )+

e4 <- minus value { p.AddOperator(TypeNegation) }
    / value
value <- number { p.AddValue(string(text)) }
       / assign_expr
       / identifier { p.AddLoadVarname(string(text)) }
       / sub
number <- < [0-9]+ > sp

assign_expr <- identifier { p.AddValueStr(string(text)) } '=' e1 { p.AddStore() }

identifier <- !'d' < [^!"#%&\'()*+,-./:;<=>?@\[\\\]^_`{|}~0-9 \t\n\r][^!"#$%&\'()*+,-./;<=>?@\[\\\]^_`{|}~ \t\n\r]* > sp // not (punctuation+number)
// identifier2 <- !'d' ![0-9] < (universalCharacter / [a-zA-Z_])+ > sp // not (punctuation+number)
sub <- open e1 close
add <- '+' sp
minus <- '-' sp
multiply <- '*' sp
divide <- '/' sp
modulus <- '%' sp
exponentiation <- '^' sp / '**' sp
open <- '(' sp
close <- ')' sp
sp <- ( ' ' / '\t' )*

fstring <- '`' < ( ('{' sp e1 sp '}') / escape / ![`\\\n\r] .)* > '`' sp { p.AddFormatString(string(text)) }
escape <- '\\' ([btnfr"'\\])  //  / OctalEscape / UnicodeEscape
