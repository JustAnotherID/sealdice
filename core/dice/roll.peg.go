package dice

// Code generated by peg -switch -inline dice/roll.peg DO NOT EDIT.

import (
	"fmt"
	"io"
	"os"
	"sort"
	"strconv"
	"strings"
)

const endSymbol rune = 1114112

/* The rule types inferred from the grammar are below. */
type pegRule uint8

const (
	ruleUnknown pegRule = iota
	rulee
	rulee1
	rulee2
	rulee3
	rulee4
	rulee5
	ruledndDiceSuffix
	rulekqDiceOp
	rule_dnumber
	ruleeDice
	rulelaNumberOrLeftParen
	ruleeDice2
	ruleeDice3
	ruleeDice4
	rulevalue
	rulenumber
	ruleassign_expr
	ruleidentifier
	rulesub
	ruleadd
	ruleminus
	rulemultiply
	ruledivide
	rulemodulus
	ruleexponentiation
	ruleopen
	ruleclose
	rulesp
	rulefstring
	ruleescape
	ruleAction0
	ruleAction1
	ruleAction2
	ruleAction3
	ruleAction4
	ruleAction5
	ruleAction6
	ruleAction7
	ruleAction8
	ruleAction9
	ruleAction10
	ruleAction11
	ruleAction12
	ruleAction13
	ruleAction14
	ruleAction15
	ruleAction16
	ruleAction17
	ruleAction18
	ruleAction19
	ruleAction20
	ruleAction21
	ruleAction22
	ruleAction23
	ruleAction24
	ruleAction25
	ruleAction26
	ruleAction27
	ruleAction28
	ruleAction29
	ruleAction30
	ruleAction31
	ruleAction32
	ruleAction33
	rulePegText
	ruleAction34
	ruleAction35
	ruleAction36
	ruleAction37
)

var rul3s = [...]string{
	"Unknown",
	"e",
	"e1",
	"e2",
	"e3",
	"e4",
	"e5",
	"dndDiceSuffix",
	"kqDiceOp",
	"_dnumber",
	"eDice",
	"laNumberOrLeftParen",
	"eDice2",
	"eDice3",
	"eDice4",
	"value",
	"number",
	"assign_expr",
	"identifier",
	"sub",
	"add",
	"minus",
	"multiply",
	"divide",
	"modulus",
	"exponentiation",
	"open",
	"close",
	"sp",
	"fstring",
	"escape",
	"Action0",
	"Action1",
	"Action2",
	"Action3",
	"Action4",
	"Action5",
	"Action6",
	"Action7",
	"Action8",
	"Action9",
	"Action10",
	"Action11",
	"Action12",
	"Action13",
	"Action14",
	"Action15",
	"Action16",
	"Action17",
	"Action18",
	"Action19",
	"Action20",
	"Action21",
	"Action22",
	"Action23",
	"Action24",
	"Action25",
	"Action26",
	"Action27",
	"Action28",
	"Action29",
	"Action30",
	"Action31",
	"Action32",
	"Action33",
	"PegText",
	"Action34",
	"Action35",
	"Action36",
	"Action37",
}

type token32 struct {
	pegRule
	begin, end uint32
}

func (t *token32) String() string {
	return fmt.Sprintf("\x1B[34m%v\x1B[m %v %v", rul3s[t.pegRule], t.begin, t.end)
}

type node32 struct {
	token32
	up, next *node32
}

func (node *node32) print(w io.Writer, pretty bool, buffer string) {
	var print func(node *node32, depth int)
	print = func(node *node32, depth int) {
		for node != nil {
			for c := 0; c < depth; c++ {
				fmt.Fprintf(w, " ")
			}
			rule := rul3s[node.pegRule]
			quote := strconv.Quote(string(([]rune(buffer)[node.begin:node.end])))
			if !pretty {
				fmt.Fprintf(w, "%v %v\n", rule, quote)
			} else {
				fmt.Fprintf(w, "\x1B[36m%v\x1B[m %v\n", rule, quote)
			}
			if node.up != nil {
				print(node.up, depth+1)
			}
			node = node.next
		}
	}
	print(node, 0)
}

func (node *node32) Print(w io.Writer, buffer string) {
	node.print(w, false, buffer)
}

func (node *node32) PrettyPrint(w io.Writer, buffer string) {
	node.print(w, true, buffer)
}

type tokens32 struct {
	tree []token32
}

func (t *tokens32) Trim(length uint32) {
	t.tree = t.tree[:length]
}

func (t *tokens32) Print() {
	for _, token := range t.tree {
		fmt.Println(token.String())
	}
}

func (t *tokens32) AST() *node32 {
	type element struct {
		node *node32
		down *element
	}
	tokens := t.Tokens()
	var stack *element
	for _, token := range tokens {
		if token.begin == token.end {
			continue
		}
		node := &node32{token32: token}
		for stack != nil && stack.node.begin >= token.begin && stack.node.end <= token.end {
			stack.node.next = node.up
			node.up = stack.node
			stack = stack.down
		}
		stack = &element{node: node, down: stack}
	}
	if stack != nil {
		return stack.node
	}
	return nil
}

func (t *tokens32) PrintSyntaxTree(buffer string) {
	t.AST().Print(os.Stdout, buffer)
}

func (t *tokens32) WriteSyntaxTree(w io.Writer, buffer string) {
	t.AST().Print(w, buffer)
}

func (t *tokens32) PrettyPrintSyntaxTree(buffer string) {
	t.AST().PrettyPrint(os.Stdout, buffer)
}

func (t *tokens32) Add(rule pegRule, begin, end, index uint32) {
	tree, i := t.tree, int(index)
	if i >= len(tree) {
		t.tree = append(tree, token32{pegRule: rule, begin: begin, end: end})
		return
	}
	tree[i] = token32{pegRule: rule, begin: begin, end: end}
}

func (t *tokens32) Tokens() []token32 {
	return t.tree
}

type DiceRollParser struct {
	RollExpression

	Buffer string
	buffer []rune
	rules  [70]func() bool
	parse  func(rule ...int) error
	reset  func()
	Pretty bool
	tokens32
}

func (p *DiceRollParser) Parse(rule ...int) error {
	return p.parse(rule...)
}

func (p *DiceRollParser) Reset() {
	p.reset()
}

type textPosition struct {
	line, symbol int
}

type textPositionMap map[int]textPosition

func translatePositions(buffer []rune, positions []int) textPositionMap {
	length, translations, j, line, symbol := len(positions), make(textPositionMap, len(positions)), 0, 1, 0
	sort.Ints(positions)

search:
	for i, c := range buffer {
		if c == '\n' {
			line, symbol = line+1, 0
		} else {
			symbol++
		}
		if i == positions[j] {
			translations[positions[j]] = textPosition{line, symbol}
			for j++; j < length; j++ {
				if i != positions[j] {
					continue search
				}
			}
			break search
		}
	}

	return translations
}

type parseError struct {
	p   *DiceRollParser
	max token32
}

func (e *parseError) Error() string {
	tokens, err := []token32{e.max}, "\n"
	positions, p := make([]int, 2*len(tokens)), 0
	for _, token := range tokens {
		positions[p], p = int(token.begin), p+1
		positions[p], p = int(token.end), p+1
	}
	translations := translatePositions(e.p.buffer, positions)
	format := "parse error near %v (line %v symbol %v - line %v symbol %v):\n%v\n"
	if e.p.Pretty {
		format = "parse error near \x1B[34m%v\x1B[m (line %v symbol %v - line %v symbol %v):\n%v\n"
	}
	for _, token := range tokens {
		begin, end := int(token.begin), int(token.end)
		err += fmt.Sprintf(format,
			rul3s[token.pegRule],
			translations[begin].line, translations[begin].symbol,
			translations[end].line, translations[end].symbol,
			strconv.Quote(string(e.p.buffer[begin:end])))
	}

	return err
}

func (p *DiceRollParser) PrintSyntaxTree() {
	if p.Pretty {
		p.tokens32.PrettyPrintSyntaxTree(p.Buffer)
	} else {
		p.tokens32.PrintSyntaxTree(p.Buffer)
	}
}

func (p *DiceRollParser) WriteSyntaxTree(w io.Writer) {
	p.tokens32.WriteSyntaxTree(w, p.Buffer)
}

func (p *DiceRollParser) SprintSyntaxTree() string {
	var bldr strings.Builder
	p.WriteSyntaxTree(&bldr)
	return bldr.String()
}

func (p *DiceRollParser) Execute() {
	buffer, _buffer, text, begin, end := p.Buffer, p.buffer, "", 0, 0
	for _, token := range p.Tokens() {
		switch token.pegRule {

		case rulePegText:
			begin, end = int(token.begin), int(token.end)
			text = string(_buffer[begin:end])

		case ruleAction0:
			p.AddOperator(TypeHalt)
		case ruleAction1:
			p.AddLeftValueMark()
		case ruleAction2:
			p.AddOperator(TypeAdd)
		case ruleAction3:
			p.AddLeftValueMark()
		case ruleAction4:
			p.AddOperator(TypeSubtract)
		case ruleAction5:
			p.AddLeftValueMark()
		case ruleAction6:
			p.AddOperator(TypeMultiply)
		case ruleAction7:
			p.AddLeftValueMark()
		case ruleAction8:
			p.AddOperator(TypeDivide)
		case ruleAction9:
			p.AddLeftValueMark()
		case ruleAction10:
			p.AddOperator(TypeModulus)
		case ruleAction11:
			p.AddLeftValueMark()
		case ruleAction12:
			p.AddOperator(TypeExponentiation)
		case ruleAction13:
			p.AddOperator(TypeNegation)
		case ruleAction14:
			p.AddValue("1")
			p.AddOperator(TypeDiceSetK)
		case ruleAction15:
			p.AddValue("1")
			p.AddOperator(TypeDiceSetQ)
		case ruleAction16:
			p.AddOperator(TypeDiceSetK)
		case ruleAction17:
			p.AddOperator(TypeDiceSetQ)
		case ruleAction18:
			p.AddOperatorWithInt64(TypeDiceSetK, 1)
		case ruleAction19:
			p.AddOperatorWithInt64(TypeDiceSetQ, 1)
		case ruleAction20:
			p.AddValue("2")
			p.AddLeftValueMark()
		case ruleAction21:
			p.AddOperator(TypeDice)
		case ruleAction22:
			p.AddValue("1")
			p.AddLeftValueMark()
		case ruleAction23:
			p.AddOperator(TypeDice)
		case ruleAction24:
			p.AddValue("2")
			p.AddLeftValueMark()
			p.AddValue("0")
			p.AddOperator(TypeDice)
		case ruleAction25:
			p.AddValue("1")
			p.AddLeftValueMark()
			p.AddValue("0")
			p.AddOperator(TypeDice)
		case ruleAction26:
			p.AddLeftValueMark()
		case ruleAction27:
			p.AddOperator(TypeDice)
		case ruleAction28:
			p.AddOperator(TypeDicePenalty)
		case ruleAction29:
			p.AddValue("1")
			p.AddOperator(TypeDicePenalty)
		case ruleAction30:
			p.AddOperator(TypeDiceBonus)
		case ruleAction31:
			p.AddValue("1")
			p.AddOperator(TypeDiceBonus)
		case ruleAction32:
			p.AddValue("0")
			p.AddValue("0")
			p.AddOperator(TypeDiceFate)
		case ruleAction33:
			p.AddLoadVarname(string(text))
		case ruleAction34:
			p.AddValue(string(text))
		case ruleAction35:
			p.AddValueStr(string(text))
		case ruleAction36:
			p.AddStore()
		case ruleAction37:
			p.AddFormatString(string(text))

		}
	}
	_, _, _, _, _ = buffer, _buffer, text, begin, end
}

func Pretty(pretty bool) func(*DiceRollParser) error {
	return func(p *DiceRollParser) error {
		p.Pretty = pretty
		return nil
	}
}

func Size(size int) func(*DiceRollParser) error {
	return func(p *DiceRollParser) error {
		p.tokens32 = tokens32{tree: make([]token32, 0, size)}
		return nil
	}
}
func (p *DiceRollParser) Init(options ...func(*DiceRollParser) error) error {
	var (
		max                  token32
		position, tokenIndex uint32
		buffer               []rune
	)
	for _, option := range options {
		err := option(p)
		if err != nil {
			return err
		}
	}
	p.reset = func() {
		max = token32{}
		position, tokenIndex = 0, 0

		p.buffer = []rune(p.Buffer)
		if len(p.buffer) == 0 || p.buffer[len(p.buffer)-1] != endSymbol {
			p.buffer = append(p.buffer, endSymbol)
		}
		buffer = p.buffer
	}
	p.reset()

	_rules := p.rules
	tree := p.tokens32
	p.parse = func(rule ...int) error {
		r := 1
		if len(rule) > 0 {
			r = rule[0]
		}
		matches := p.rules[r]()
		p.tokens32 = tree
		if matches {
			p.Trim(tokenIndex)
			return nil
		}
		return &parseError{p, max}
	}

	add := func(rule pegRule, begin uint32) {
		tree.Add(rule, begin, position, tokenIndex)
		tokenIndex++
		if begin != position && position > max.end {
			max = token32{rule, begin, position}
		}
	}

	matchDot := func() bool {
		if buffer[position] != endSymbol {
			position++
			return true
		}
		return false
	}

	/*matchChar := func(c byte) bool {
		if buffer[position] == c {
			position++
			return true
		}
		return false
	}*/

	/*matchRange := func(lower byte, upper byte) bool {
		if c := buffer[position]; c >= lower && c <= upper {
			position++
			return true
		}
		return false
	}*/

	_rules = [...]func() bool{
		nil,
		/* 0 e <- <(sp (fstring / e1) Action0)> */
		func() bool {
			position0, tokenIndex0 := position, tokenIndex
			{
				position1 := position
				if !_rules[rulesp]() {
					goto l0
				}
				{
					position2, tokenIndex2 := position, tokenIndex
					{
						position4 := position
						if buffer[position] != rune('`') {
							goto l3
						}
						position++
						{
							position5 := position
						l6:
							{
								position7, tokenIndex7 := position, tokenIndex
								{
									position8, tokenIndex8 := position, tokenIndex
									if buffer[position] != rune('{') {
										goto l9
									}
									position++
									if !_rules[rulesp]() {
										goto l9
									}
									if !_rules[rulee1]() {
										goto l9
									}
									if !_rules[rulesp]() {
										goto l9
									}
									if buffer[position] != rune('}') {
										goto l9
									}
									position++
									goto l8
								l9:
									position, tokenIndex = position8, tokenIndex8
									{
										position11 := position
										if buffer[position] != rune('\\') {
											goto l10
										}
										position++
										{
											switch buffer[position] {
											case '\\':
												if buffer[position] != rune('\\') {
													goto l10
												}
												position++
											case '\'':
												if buffer[position] != rune('\'') {
													goto l10
												}
												position++
											case '"':
												if buffer[position] != rune('"') {
													goto l10
												}
												position++
											case 'r':
												if buffer[position] != rune('r') {
													goto l10
												}
												position++
											case 'f':
												if buffer[position] != rune('f') {
													goto l10
												}
												position++
											case 'n':
												if buffer[position] != rune('n') {
													goto l10
												}
												position++
											case 't':
												if buffer[position] != rune('t') {
													goto l10
												}
												position++
											default:
												if buffer[position] != rune('b') {
													goto l10
												}
												position++
											}
										}

										add(ruleescape, position11)
									}
									goto l8
								l10:
									position, tokenIndex = position8, tokenIndex8
									{
										position13, tokenIndex13 := position, tokenIndex
										{
											switch buffer[position] {
											case '\r':
												if buffer[position] != rune('\r') {
													goto l13
												}
												position++
											case '\n':
												if buffer[position] != rune('\n') {
													goto l13
												}
												position++
											case '\\':
												if buffer[position] != rune('\\') {
													goto l13
												}
												position++
											default:
												if buffer[position] != rune('`') {
													goto l13
												}
												position++
											}
										}

										goto l7
									l13:
										position, tokenIndex = position13, tokenIndex13
									}
									if !matchDot() {
										goto l7
									}
								}
							l8:
								goto l6
							l7:
								position, tokenIndex = position7, tokenIndex7
							}
							add(rulePegText, position5)
						}
						if buffer[position] != rune('`') {
							goto l3
						}
						position++
						if !_rules[rulesp]() {
							goto l3
						}
						{
							add(ruleAction37, position)
						}
						add(rulefstring, position4)
					}
					goto l2
				l3:
					position, tokenIndex = position2, tokenIndex2
					if !_rules[rulee1]() {
						goto l0
					}
				}
			l2:
				{
					add(ruleAction0, position)
				}
				add(rulee, position1)
			}
			return true
		l0:
			position, tokenIndex = position0, tokenIndex0
			return false
		},
		/* 1 e1 <- <(e2 ((add Action1 e2 Action2) / (minus Action3 e2 Action4))*)> */
		func() bool {
			position17, tokenIndex17 := position, tokenIndex
			{
				position18 := position
				if !_rules[rulee2]() {
					goto l17
				}
			l19:
				{
					position20, tokenIndex20 := position, tokenIndex
					{
						position21, tokenIndex21 := position, tokenIndex
						if !_rules[ruleadd]() {
							goto l22
						}
						{
							add(ruleAction1, position)
						}
						if !_rules[rulee2]() {
							goto l22
						}
						{
							add(ruleAction2, position)
						}
						goto l21
					l22:
						position, tokenIndex = position21, tokenIndex21
						if !_rules[ruleminus]() {
							goto l20
						}
						{
							add(ruleAction3, position)
						}
						if !_rules[rulee2]() {
							goto l20
						}
						{
							add(ruleAction4, position)
						}
					}
				l21:
					goto l19
				l20:
					position, tokenIndex = position20, tokenIndex20
				}
				add(rulee1, position18)
			}
			return true
		l17:
			position, tokenIndex = position17, tokenIndex17
			return false
		},
		/* 2 e2 <- <(e3 ((&('%') (modulus Action9 e3 Action10)) | (&('/') (divide Action7 e3 Action8)) | (&('*') (multiply Action5 e3 Action6)))*)> */
		func() bool {
			position27, tokenIndex27 := position, tokenIndex
			{
				position28 := position
				if !_rules[rulee3]() {
					goto l27
				}
			l29:
				{
					position30, tokenIndex30 := position, tokenIndex
					{
						switch buffer[position] {
						case '%':
							{
								position32 := position
								if buffer[position] != rune('%') {
									goto l30
								}
								position++
								if !_rules[rulesp]() {
									goto l30
								}
								add(rulemodulus, position32)
							}
							{
								add(ruleAction9, position)
							}
							if !_rules[rulee3]() {
								goto l30
							}
							{
								add(ruleAction10, position)
							}
						case '/':
							{
								position35 := position
								{
									position36, tokenIndex36 := position, tokenIndex
									if buffer[position] != rune('/') {
										goto l37
									}
									position++
									goto l36
								l37:
									position, tokenIndex = position36, tokenIndex36
									if buffer[position] != rune('／') {
										goto l30
									}
									position++
								}
							l36:
								if !_rules[rulesp]() {
									goto l30
								}
								add(ruledivide, position35)
							}
							{
								add(ruleAction7, position)
							}
							if !_rules[rulee3]() {
								goto l30
							}
							{
								add(ruleAction8, position)
							}
						default:
							{
								position40 := position
								{
									position41, tokenIndex41 := position, tokenIndex
									if buffer[position] != rune('*') {
										goto l42
									}
									position++
									goto l41
								l42:
									position, tokenIndex = position41, tokenIndex41
									if buffer[position] != rune('＊') {
										goto l30
									}
									position++
								}
							l41:
								if !_rules[rulesp]() {
									goto l30
								}
								add(rulemultiply, position40)
							}
							{
								add(ruleAction5, position)
							}
							if !_rules[rulee3]() {
								goto l30
							}
							{
								add(ruleAction6, position)
							}
						}
					}

					goto l29
				l30:
					position, tokenIndex = position30, tokenIndex30
				}
				add(rulee2, position28)
			}
			return true
		l27:
			position, tokenIndex = position27, tokenIndex27
			return false
		},
		/* 3 e3 <- <(e4 (exponentiation Action11 e4 Action12)*)> */
		func() bool {
			position45, tokenIndex45 := position, tokenIndex
			{
				position46 := position
				if !_rules[rulee4]() {
					goto l45
				}
			l47:
				{
					position48, tokenIndex48 := position, tokenIndex
					{
						position49 := position
						{
							position50, tokenIndex50 := position, tokenIndex
							if buffer[position] != rune('^') {
								goto l51
							}
							position++
							if !_rules[rulesp]() {
								goto l51
							}
							goto l50
						l51:
							position, tokenIndex = position50, tokenIndex50
							if buffer[position] != rune('*') {
								goto l48
							}
							position++
							if buffer[position] != rune('*') {
								goto l48
							}
							position++
							if !_rules[rulesp]() {
								goto l48
							}
						}
					l50:
						add(ruleexponentiation, position49)
					}
					{
						add(ruleAction11, position)
					}
					if !_rules[rulee4]() {
						goto l48
					}
					{
						add(ruleAction12, position)
					}
					goto l47
				l48:
					position, tokenIndex = position48, tokenIndex48
				}
				add(rulee3, position46)
			}
			return true
		l45:
			position, tokenIndex = position45, tokenIndex45
			return false
		},
		/* 4 e4 <- <((minus e5 Action13) / e5)> */
		func() bool {
			position54, tokenIndex54 := position, tokenIndex
			{
				position55 := position
				{
					position56, tokenIndex56 := position, tokenIndex
					if !_rules[ruleminus]() {
						goto l57
					}
					if !_rules[rulee5]() {
						goto l57
					}
					{
						add(ruleAction13, position)
					}
					goto l56
				l57:
					position, tokenIndex = position56, tokenIndex56
					if !_rules[rulee5]() {
						goto l54
					}
				}
			l56:
				add(rulee4, position55)
			}
			return true
		l54:
			position, tokenIndex = position54, tokenIndex54
			return false
		},
		/* 5 e5 <- <((add eDice) / eDice)> */
		func() bool {
			position59, tokenIndex59 := position, tokenIndex
			{
				position60 := position
				{
					position61, tokenIndex61 := position, tokenIndex
					if !_rules[ruleadd]() {
						goto l62
					}
					if !_rules[ruleeDice]() {
						goto l62
					}
					goto l61
				l62:
					position, tokenIndex = position61, tokenIndex61
					if !_rules[ruleeDice]() {
						goto l59
					}
				}
			l61:
				add(rulee5, position60)
			}
			return true
		l59:
			position, tokenIndex = position59, tokenIndex59
			return false
		},
		/* 6 dndDiceSuffix <- <(((('优' '势') / ('k' 'h')) Action14 sp) / ((('劣' '势') / ('k' 'l')) Action15 sp))> */
		func() bool {
			position63, tokenIndex63 := position, tokenIndex
			{
				position64 := position
				{
					position65, tokenIndex65 := position, tokenIndex
					{
						position67, tokenIndex67 := position, tokenIndex
						if buffer[position] != rune('优') {
							goto l68
						}
						position++
						if buffer[position] != rune('势') {
							goto l68
						}
						position++
						goto l67
					l68:
						position, tokenIndex = position67, tokenIndex67
						if buffer[position] != rune('k') {
							goto l66
						}
						position++
						if buffer[position] != rune('h') {
							goto l66
						}
						position++
					}
				l67:
					{
						add(ruleAction14, position)
					}
					if !_rules[rulesp]() {
						goto l66
					}
					goto l65
				l66:
					position, tokenIndex = position65, tokenIndex65
					{
						position70, tokenIndex70 := position, tokenIndex
						if buffer[position] != rune('劣') {
							goto l71
						}
						position++
						if buffer[position] != rune('势') {
							goto l71
						}
						position++
						goto l70
					l71:
						position, tokenIndex = position70, tokenIndex70
						if buffer[position] != rune('k') {
							goto l63
						}
						position++
						if buffer[position] != rune('l') {
							goto l63
						}
						position++
					}
				l70:
					{
						add(ruleAction15, position)
					}
					if !_rules[rulesp]() {
						goto l63
					}
				}
			l65:
				add(ruledndDiceSuffix, position64)
			}
			return true
		l63:
			position, tokenIndex = position63, tokenIndex63
			return false
		},
		/* 7 kqDiceOp <- <(('k' eDice2 Action16)? ('q' eDice2 Action17)? ('d' 'l' eDice2 Action18)? ('d' 'h' eDice2 Action19)?)> */
		func() bool {
			{
				position74 := position
				{
					position75, tokenIndex75 := position, tokenIndex
					if buffer[position] != rune('k') {
						goto l75
					}
					position++
					if !_rules[ruleeDice2]() {
						goto l75
					}
					{
						add(ruleAction16, position)
					}
					goto l76
				l75:
					position, tokenIndex = position75, tokenIndex75
				}
			l76:
				{
					position78, tokenIndex78 := position, tokenIndex
					if buffer[position] != rune('q') {
						goto l78
					}
					position++
					if !_rules[ruleeDice2]() {
						goto l78
					}
					{
						add(ruleAction17, position)
					}
					goto l79
				l78:
					position, tokenIndex = position78, tokenIndex78
				}
			l79:
				{
					position81, tokenIndex81 := position, tokenIndex
					if buffer[position] != rune('d') {
						goto l81
					}
					position++
					if buffer[position] != rune('l') {
						goto l81
					}
					position++
					if !_rules[ruleeDice2]() {
						goto l81
					}
					{
						add(ruleAction18, position)
					}
					goto l82
				l81:
					position, tokenIndex = position81, tokenIndex81
				}
			l82:
				{
					position84, tokenIndex84 := position, tokenIndex
					if buffer[position] != rune('d') {
						goto l84
					}
					position++
					if buffer[position] != rune('h') {
						goto l84
					}
					position++
					if !_rules[ruleeDice2]() {
						goto l84
					}
					{
						add(ruleAction19, position)
					}
					goto l85
				l84:
					position, tokenIndex = position84, tokenIndex84
				}
			l85:
				add(rulekqDiceOp, position74)
			}
			return true
		},
		/* 8 _dnumber <- <&(('d' / 'D') (number / '('))> */
		func() bool {
			position87, tokenIndex87 := position, tokenIndex
			{
				position88 := position
				{
					position89, tokenIndex89 := position, tokenIndex
					{
						position90, tokenIndex90 := position, tokenIndex
						if buffer[position] != rune('d') {
							goto l91
						}
						position++
						goto l90
					l91:
						position, tokenIndex = position90, tokenIndex90
						if buffer[position] != rune('D') {
							goto l87
						}
						position++
					}
				l90:
					{
						position92, tokenIndex92 := position, tokenIndex
						if !_rules[rulenumber]() {
							goto l93
						}
						goto l92
					l93:
						position, tokenIndex = position92, tokenIndex92
						if buffer[position] != rune('(') {
							goto l87
						}
						position++
					}
				l92:
					position, tokenIndex = position89, tokenIndex89
				}
				add(rule_dnumber, position88)
			}
			return true
		l87:
			position, tokenIndex = position87, tokenIndex87
			return false
		},
		/* 9 eDice <- <((_dnumber ('d' / 'D') Action20 eDice2 dndDiceSuffix Action21) / (_dnumber ('d' / 'D') Action22 eDice2 kqDiceOp Action23) / (('d' / 'D') dndDiceSuffix Action24) / (('d' / 'D') !(!((&('\r') '\r') | (&('\n') '\n') | (&('\t') '\t') | (&(' ') ' ') | (&('~') '~') | (&('}') '}') | (&('|') '|') | (&('{') '{') | (&('`') '`') | (&('^') '^') | (&(']') ']') | (&('\\') '\\') | (&('[') '[') | (&('@') '@') | (&('?') '?') | (&('>') '>') | (&('=') '=') | (&('<') '<') | (&(';') ';') | (&('/') '/') | (&('+') '+') | (&('*') '*') | (&(')') ')') | (&('(') '(') | (&('\'') '\'') | (&('&') '&') | (&('%') '%') | (&('$') '$') | (&('#') '#') | (&('"') '"') | (&('!') '!') | (&(',' | '-' | '.') [,-.])) .) sp Action25) / (eDice2 (('d' / 'D') Action26 &(number / '(') eDice2 kqDiceOp Action27)*))> */
		func() bool {
			position94, tokenIndex94 := position, tokenIndex
			{
				position95 := position
				{
					position96, tokenIndex96 := position, tokenIndex
					if !_rules[rule_dnumber]() {
						goto l97
					}
					{
						position98, tokenIndex98 := position, tokenIndex
						if buffer[position] != rune('d') {
							goto l99
						}
						position++
						goto l98
					l99:
						position, tokenIndex = position98, tokenIndex98
						if buffer[position] != rune('D') {
							goto l97
						}
						position++
					}
				l98:
					{
						add(ruleAction20, position)
					}
					if !_rules[ruleeDice2]() {
						goto l97
					}
					if !_rules[ruledndDiceSuffix]() {
						goto l97
					}
					{
						add(ruleAction21, position)
					}
					goto l96
				l97:
					position, tokenIndex = position96, tokenIndex96
					if !_rules[rule_dnumber]() {
						goto l102
					}
					{
						position103, tokenIndex103 := position, tokenIndex
						if buffer[position] != rune('d') {
							goto l104
						}
						position++
						goto l103
					l104:
						position, tokenIndex = position103, tokenIndex103
						if buffer[position] != rune('D') {
							goto l102
						}
						position++
					}
				l103:
					{
						add(ruleAction22, position)
					}
					if !_rules[ruleeDice2]() {
						goto l102
					}
					if !_rules[rulekqDiceOp]() {
						goto l102
					}
					{
						add(ruleAction23, position)
					}
					goto l96
				l102:
					position, tokenIndex = position96, tokenIndex96
					{
						position108, tokenIndex108 := position, tokenIndex
						if buffer[position] != rune('d') {
							goto l109
						}
						position++
						goto l108
					l109:
						position, tokenIndex = position108, tokenIndex108
						if buffer[position] != rune('D') {
							goto l107
						}
						position++
					}
				l108:
					if !_rules[ruledndDiceSuffix]() {
						goto l107
					}
					{
						add(ruleAction24, position)
					}
					goto l96
				l107:
					position, tokenIndex = position96, tokenIndex96
					{
						position112, tokenIndex112 := position, tokenIndex
						if buffer[position] != rune('d') {
							goto l113
						}
						position++
						goto l112
					l113:
						position, tokenIndex = position112, tokenIndex112
						if buffer[position] != rune('D') {
							goto l111
						}
						position++
					}
				l112:
					{
						position114, tokenIndex114 := position, tokenIndex
						{
							position115, tokenIndex115 := position, tokenIndex
							{
								switch buffer[position] {
								case '\r':
									if buffer[position] != rune('\r') {
										goto l115
									}
									position++
								case '\n':
									if buffer[position] != rune('\n') {
										goto l115
									}
									position++
								case '\t':
									if buffer[position] != rune('\t') {
										goto l115
									}
									position++
								case ' ':
									if buffer[position] != rune(' ') {
										goto l115
									}
									position++
								case '~':
									if buffer[position] != rune('~') {
										goto l115
									}
									position++
								case '}':
									if buffer[position] != rune('}') {
										goto l115
									}
									position++
								case '|':
									if buffer[position] != rune('|') {
										goto l115
									}
									position++
								case '{':
									if buffer[position] != rune('{') {
										goto l115
									}
									position++
								case '`':
									if buffer[position] != rune('`') {
										goto l115
									}
									position++
								case '^':
									if buffer[position] != rune('^') {
										goto l115
									}
									position++
								case ']':
									if buffer[position] != rune(']') {
										goto l115
									}
									position++
								case '\\':
									if buffer[position] != rune('\\') {
										goto l115
									}
									position++
								case '[':
									if buffer[position] != rune('[') {
										goto l115
									}
									position++
								case '@':
									if buffer[position] != rune('@') {
										goto l115
									}
									position++
								case '?':
									if buffer[position] != rune('?') {
										goto l115
									}
									position++
								case '>':
									if buffer[position] != rune('>') {
										goto l115
									}
									position++
								case '=':
									if buffer[position] != rune('=') {
										goto l115
									}
									position++
								case '<':
									if buffer[position] != rune('<') {
										goto l115
									}
									position++
								case ';':
									if buffer[position] != rune(';') {
										goto l115
									}
									position++
								case '/':
									if buffer[position] != rune('/') {
										goto l115
									}
									position++
								case '+':
									if buffer[position] != rune('+') {
										goto l115
									}
									position++
								case '*':
									if buffer[position] != rune('*') {
										goto l115
									}
									position++
								case ')':
									if buffer[position] != rune(')') {
										goto l115
									}
									position++
								case '(':
									if buffer[position] != rune('(') {
										goto l115
									}
									position++
								case '\'':
									if buffer[position] != rune('\'') {
										goto l115
									}
									position++
								case '&':
									if buffer[position] != rune('&') {
										goto l115
									}
									position++
								case '%':
									if buffer[position] != rune('%') {
										goto l115
									}
									position++
								case '$':
									if buffer[position] != rune('$') {
										goto l115
									}
									position++
								case '#':
									if buffer[position] != rune('#') {
										goto l115
									}
									position++
								case '"':
									if buffer[position] != rune('"') {
										goto l115
									}
									position++
								case '!':
									if buffer[position] != rune('!') {
										goto l115
									}
									position++
								default:
									if c := buffer[position]; c < rune(',') || c > rune('.') {
										goto l115
									}
									position++
								}
							}

							goto l114
						l115:
							position, tokenIndex = position115, tokenIndex115
						}
						if !matchDot() {
							goto l114
						}
						goto l111
					l114:
						position, tokenIndex = position114, tokenIndex114
					}
					if !_rules[rulesp]() {
						goto l111
					}
					{
						add(ruleAction25, position)
					}
					goto l96
				l111:
					position, tokenIndex = position96, tokenIndex96
					if !_rules[ruleeDice2]() {
						goto l94
					}
				l118:
					{
						position119, tokenIndex119 := position, tokenIndex
						{
							position120, tokenIndex120 := position, tokenIndex
							if buffer[position] != rune('d') {
								goto l121
							}
							position++
							goto l120
						l121:
							position, tokenIndex = position120, tokenIndex120
							if buffer[position] != rune('D') {
								goto l119
							}
							position++
						}
					l120:
						{
							add(ruleAction26, position)
						}
						{
							position123, tokenIndex123 := position, tokenIndex
							{
								position124, tokenIndex124 := position, tokenIndex
								if !_rules[rulenumber]() {
									goto l125
								}
								goto l124
							l125:
								position, tokenIndex = position124, tokenIndex124
								if buffer[position] != rune('(') {
									goto l119
								}
								position++
							}
						l124:
							position, tokenIndex = position123, tokenIndex123
						}
						if !_rules[ruleeDice2]() {
							goto l119
						}
						if !_rules[rulekqDiceOp]() {
							goto l119
						}
						{
							add(ruleAction27, position)
						}
						goto l118
					l119:
						position, tokenIndex = position119, tokenIndex119
					}
				}
			l96:
				add(ruleeDice, position95)
			}
			return true
		l94:
			position, tokenIndex = position94, tokenIndex94
			return false
		},
		/* 10 laNumberOrLeftParen <- <&(number / '(')> */
		func() bool {
			position127, tokenIndex127 := position, tokenIndex
			{
				position128 := position
				{
					position129, tokenIndex129 := position, tokenIndex
					{
						position130, tokenIndex130 := position, tokenIndex
						if !_rules[rulenumber]() {
							goto l131
						}
						goto l130
					l131:
						position, tokenIndex = position130, tokenIndex130
						if buffer[position] != rune('(') {
							goto l127
						}
						position++
					}
				l130:
					position, tokenIndex = position129, tokenIndex129
				}
				add(rulelaNumberOrLeftParen, position128)
			}
			return true
		l127:
			position, tokenIndex = position127, tokenIndex127
			return false
		},
		/* 11 eDice2 <- <((('p' / 'P') laNumberOrLeftParen eDice3 Action28) / (('p' / 'P') Action29) / eDice3)> */
		func() bool {
			position132, tokenIndex132 := position, tokenIndex
			{
				position133 := position
				{
					position134, tokenIndex134 := position, tokenIndex
					{
						position136, tokenIndex136 := position, tokenIndex
						if buffer[position] != rune('p') {
							goto l137
						}
						position++
						goto l136
					l137:
						position, tokenIndex = position136, tokenIndex136
						if buffer[position] != rune('P') {
							goto l135
						}
						position++
					}
				l136:
					if !_rules[rulelaNumberOrLeftParen]() {
						goto l135
					}
					if !_rules[ruleeDice3]() {
						goto l135
					}
					{
						add(ruleAction28, position)
					}
					goto l134
				l135:
					position, tokenIndex = position134, tokenIndex134
					{
						position140, tokenIndex140 := position, tokenIndex
						if buffer[position] != rune('p') {
							goto l141
						}
						position++
						goto l140
					l141:
						position, tokenIndex = position140, tokenIndex140
						if buffer[position] != rune('P') {
							goto l139
						}
						position++
					}
				l140:
					{
						add(ruleAction29, position)
					}
					goto l134
				l139:
					position, tokenIndex = position134, tokenIndex134
					if !_rules[ruleeDice3]() {
						goto l132
					}
				}
			l134:
				add(ruleeDice2, position133)
			}
			return true
		l132:
			position, tokenIndex = position132, tokenIndex132
			return false
		},
		/* 12 eDice3 <- <((('b' / 'B') laNumberOrLeftParen value Action30) / (('b' / 'B') Action31) / eDice4)> */
		func() bool {
			position143, tokenIndex143 := position, tokenIndex
			{
				position144 := position
				{
					position145, tokenIndex145 := position, tokenIndex
					{
						position147, tokenIndex147 := position, tokenIndex
						if buffer[position] != rune('b') {
							goto l148
						}
						position++
						goto l147
					l148:
						position, tokenIndex = position147, tokenIndex147
						if buffer[position] != rune('B') {
							goto l146
						}
						position++
					}
				l147:
					if !_rules[rulelaNumberOrLeftParen]() {
						goto l146
					}
					if !_rules[rulevalue]() {
						goto l146
					}
					{
						add(ruleAction30, position)
					}
					goto l145
				l146:
					position, tokenIndex = position145, tokenIndex145
					{
						position151, tokenIndex151 := position, tokenIndex
						if buffer[position] != rune('b') {
							goto l152
						}
						position++
						goto l151
					l152:
						position, tokenIndex = position151, tokenIndex151
						if buffer[position] != rune('B') {
							goto l150
						}
						position++
					}
				l151:
					{
						add(ruleAction31, position)
					}
					goto l145
				l150:
					position, tokenIndex = position145, tokenIndex145
					{
						position154 := position
						{
							position155, tokenIndex155 := position, tokenIndex
							{
								position157, tokenIndex157 := position, tokenIndex
								if buffer[position] != rune('f') {
									goto l158
								}
								position++
								goto l157
							l158:
								position, tokenIndex = position157, tokenIndex157
								if buffer[position] != rune('F') {
									goto l156
								}
								position++
							}
						l157:
							if !_rules[rulesp]() {
								goto l156
							}
							{
								add(ruleAction32, position)
							}
							goto l155
						l156:
							position, tokenIndex = position155, tokenIndex155
							if !_rules[rulevalue]() {
								goto l143
							}
						}
					l155:
						add(ruleeDice4, position154)
					}
				}
			l145:
				add(ruleeDice3, position144)
			}
			return true
		l143:
			position, tokenIndex = position143, tokenIndex143
			return false
		},
		/* 13 eDice4 <- <((('f' / 'F') sp Action32) / value)> */
		nil,
		/* 14 value <- <(number / assign_expr / (identifier Action33) / sub)> */
		func() bool {
			position161, tokenIndex161 := position, tokenIndex
			{
				position162 := position
				{
					position163, tokenIndex163 := position, tokenIndex
					if !_rules[rulenumber]() {
						goto l164
					}
					goto l163
				l164:
					position, tokenIndex = position163, tokenIndex163
					{
						position166 := position
						if !_rules[ruleidentifier]() {
							goto l165
						}
						{
							add(ruleAction35, position)
						}
						if buffer[position] != rune('=') {
							goto l165
						}
						position++
						if !_rules[rulee1]() {
							goto l165
						}
						{
							add(ruleAction36, position)
						}
						add(ruleassign_expr, position166)
					}
					goto l163
				l165:
					position, tokenIndex = position163, tokenIndex163
					if !_rules[ruleidentifier]() {
						goto l169
					}
					{
						add(ruleAction33, position)
					}
					goto l163
				l169:
					position, tokenIndex = position163, tokenIndex163
					{
						position171 := position
						{
							position172 := position
							if buffer[position] != rune('(') {
								goto l161
							}
							position++
							if !_rules[rulesp]() {
								goto l161
							}
							add(ruleopen, position172)
						}
						if !_rules[rulee1]() {
							goto l161
						}
						{
							position173 := position
							if buffer[position] != rune(')') {
								goto l161
							}
							position++
							if !_rules[rulesp]() {
								goto l161
							}
							add(ruleclose, position173)
						}
						add(rulesub, position171)
					}
				}
			l163:
				add(rulevalue, position162)
			}
			return true
		l161:
			position, tokenIndex = position161, tokenIndex161
			return false
		},
		/* 15 number <- <(<[0-9]+> sp Action34)> */
		func() bool {
			position174, tokenIndex174 := position, tokenIndex
			{
				position175 := position
				{
					position176 := position
					if c := buffer[position]; c < rune('0') || c > rune('9') {
						goto l174
					}
					position++
				l177:
					{
						position178, tokenIndex178 := position, tokenIndex
						if c := buffer[position]; c < rune('0') || c > rune('9') {
							goto l178
						}
						position++
						goto l177
					l178:
						position, tokenIndex = position178, tokenIndex178
					}
					add(rulePegText, position176)
				}
				if !_rules[rulesp]() {
					goto l174
				}
				{
					add(ruleAction34, position)
				}
				add(rulenumber, position175)
			}
			return true
		l174:
			position, tokenIndex = position174, tokenIndex174
			return false
		},
		/* 16 assign_expr <- <(identifier Action35 '=' e1 Action36)> */
		nil,
		/* 17 identifier <- <(<(!((&('\r') '\r') | (&('\n') '\n') | (&('\t') '\t') | (&(' ') ' ') | (&('~') '~') | (&('}') '}') | (&('|') '|') | (&('{') '{') | (&('`') '`') | (&('^') '^') | (&(']') ']') | (&('\\') '\\') | (&('[') '[') | (&('@') '@') | (&('?') '?') | (&('>') '>') | (&('=') '=') | (&('<') '<') | (&(';') ';') | (&(':') ':') | (&('/') '/') | (&('+') '+') | (&('*') '*') | (&(')') ')') | (&('(') '(') | (&('\'') '\'') | (&('&') '&') | (&('%') '%') | (&('#') '#') | (&('"') '"') | (&('!') '!') | (&(',' | '-' | '.') [,-.]) | (&('0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9') [0-9])) . (!((&('\r') '\r') | (&('\n') '\n') | (&('\t') '\t') | (&(' ') ' ') | (&('~') '~') | (&('}') '}') | (&('|') '|') | (&('{') '{') | (&('`') '`') | (&('^') '^') | (&(']') ']') | (&('\\') '\\') | (&('[') '[') | (&('@') '@') | (&('?') '?') | (&('>') '>') | (&('=') '=') | (&('<') '<') | (&(';') ';') | (&('/') '/') | (&('+') '+') | (&('*') '*') | (&(')') ')') | (&('(') '(') | (&('\'') '\'') | (&('&') '&') | (&('%') '%') | (&('$') '$') | (&('#') '#') | (&('"') '"') | (&('!') '!') | (&(',' | '-' | '.') [,-.])) .)*)> sp)> */
		func() bool {
			position181, tokenIndex181 := position, tokenIndex
			{
				position182 := position
				{
					position183 := position
					{
						position184, tokenIndex184 := position, tokenIndex
						{
							switch buffer[position] {
							case '\r':
								if buffer[position] != rune('\r') {
									goto l184
								}
								position++
							case '\n':
								if buffer[position] != rune('\n') {
									goto l184
								}
								position++
							case '\t':
								if buffer[position] != rune('\t') {
									goto l184
								}
								position++
							case ' ':
								if buffer[position] != rune(' ') {
									goto l184
								}
								position++
							case '~':
								if buffer[position] != rune('~') {
									goto l184
								}
								position++
							case '}':
								if buffer[position] != rune('}') {
									goto l184
								}
								position++
							case '|':
								if buffer[position] != rune('|') {
									goto l184
								}
								position++
							case '{':
								if buffer[position] != rune('{') {
									goto l184
								}
								position++
							case '`':
								if buffer[position] != rune('`') {
									goto l184
								}
								position++
							case '^':
								if buffer[position] != rune('^') {
									goto l184
								}
								position++
							case ']':
								if buffer[position] != rune(']') {
									goto l184
								}
								position++
							case '\\':
								if buffer[position] != rune('\\') {
									goto l184
								}
								position++
							case '[':
								if buffer[position] != rune('[') {
									goto l184
								}
								position++
							case '@':
								if buffer[position] != rune('@') {
									goto l184
								}
								position++
							case '?':
								if buffer[position] != rune('?') {
									goto l184
								}
								position++
							case '>':
								if buffer[position] != rune('>') {
									goto l184
								}
								position++
							case '=':
								if buffer[position] != rune('=') {
									goto l184
								}
								position++
							case '<':
								if buffer[position] != rune('<') {
									goto l184
								}
								position++
							case ';':
								if buffer[position] != rune(';') {
									goto l184
								}
								position++
							case ':':
								if buffer[position] != rune(':') {
									goto l184
								}
								position++
							case '/':
								if buffer[position] != rune('/') {
									goto l184
								}
								position++
							case '+':
								if buffer[position] != rune('+') {
									goto l184
								}
								position++
							case '*':
								if buffer[position] != rune('*') {
									goto l184
								}
								position++
							case ')':
								if buffer[position] != rune(')') {
									goto l184
								}
								position++
							case '(':
								if buffer[position] != rune('(') {
									goto l184
								}
								position++
							case '\'':
								if buffer[position] != rune('\'') {
									goto l184
								}
								position++
							case '&':
								if buffer[position] != rune('&') {
									goto l184
								}
								position++
							case '%':
								if buffer[position] != rune('%') {
									goto l184
								}
								position++
							case '#':
								if buffer[position] != rune('#') {
									goto l184
								}
								position++
							case '"':
								if buffer[position] != rune('"') {
									goto l184
								}
								position++
							case '!':
								if buffer[position] != rune('!') {
									goto l184
								}
								position++
							case ',', '-', '.':
								if c := buffer[position]; c < rune(',') || c > rune('.') {
									goto l184
								}
								position++
							default:
								if c := buffer[position]; c < rune('0') || c > rune('9') {
									goto l184
								}
								position++
							}
						}

						goto l181
					l184:
						position, tokenIndex = position184, tokenIndex184
					}
					if !matchDot() {
						goto l181
					}
				l186:
					{
						position187, tokenIndex187 := position, tokenIndex
						{
							position188, tokenIndex188 := position, tokenIndex
							{
								switch buffer[position] {
								case '\r':
									if buffer[position] != rune('\r') {
										goto l188
									}
									position++
								case '\n':
									if buffer[position] != rune('\n') {
										goto l188
									}
									position++
								case '\t':
									if buffer[position] != rune('\t') {
										goto l188
									}
									position++
								case ' ':
									if buffer[position] != rune(' ') {
										goto l188
									}
									position++
								case '~':
									if buffer[position] != rune('~') {
										goto l188
									}
									position++
								case '}':
									if buffer[position] != rune('}') {
										goto l188
									}
									position++
								case '|':
									if buffer[position] != rune('|') {
										goto l188
									}
									position++
								case '{':
									if buffer[position] != rune('{') {
										goto l188
									}
									position++
								case '`':
									if buffer[position] != rune('`') {
										goto l188
									}
									position++
								case '^':
									if buffer[position] != rune('^') {
										goto l188
									}
									position++
								case ']':
									if buffer[position] != rune(']') {
										goto l188
									}
									position++
								case '\\':
									if buffer[position] != rune('\\') {
										goto l188
									}
									position++
								case '[':
									if buffer[position] != rune('[') {
										goto l188
									}
									position++
								case '@':
									if buffer[position] != rune('@') {
										goto l188
									}
									position++
								case '?':
									if buffer[position] != rune('?') {
										goto l188
									}
									position++
								case '>':
									if buffer[position] != rune('>') {
										goto l188
									}
									position++
								case '=':
									if buffer[position] != rune('=') {
										goto l188
									}
									position++
								case '<':
									if buffer[position] != rune('<') {
										goto l188
									}
									position++
								case ';':
									if buffer[position] != rune(';') {
										goto l188
									}
									position++
								case '/':
									if buffer[position] != rune('/') {
										goto l188
									}
									position++
								case '+':
									if buffer[position] != rune('+') {
										goto l188
									}
									position++
								case '*':
									if buffer[position] != rune('*') {
										goto l188
									}
									position++
								case ')':
									if buffer[position] != rune(')') {
										goto l188
									}
									position++
								case '(':
									if buffer[position] != rune('(') {
										goto l188
									}
									position++
								case '\'':
									if buffer[position] != rune('\'') {
										goto l188
									}
									position++
								case '&':
									if buffer[position] != rune('&') {
										goto l188
									}
									position++
								case '%':
									if buffer[position] != rune('%') {
										goto l188
									}
									position++
								case '$':
									if buffer[position] != rune('$') {
										goto l188
									}
									position++
								case '#':
									if buffer[position] != rune('#') {
										goto l188
									}
									position++
								case '"':
									if buffer[position] != rune('"') {
										goto l188
									}
									position++
								case '!':
									if buffer[position] != rune('!') {
										goto l188
									}
									position++
								default:
									if c := buffer[position]; c < rune(',') || c > rune('.') {
										goto l188
									}
									position++
								}
							}

							goto l187
						l188:
							position, tokenIndex = position188, tokenIndex188
						}
						if !matchDot() {
							goto l187
						}
						goto l186
					l187:
						position, tokenIndex = position187, tokenIndex187
					}
					add(rulePegText, position183)
				}
				if !_rules[rulesp]() {
					goto l181
				}
				add(ruleidentifier, position182)
			}
			return true
		l181:
			position, tokenIndex = position181, tokenIndex181
			return false
		},
		/* 18 sub <- <(open e1 close)> */
		nil,
		/* 19 add <- <(('+' / '＋') sp)> */
		func() bool {
			position191, tokenIndex191 := position, tokenIndex
			{
				position192 := position
				{
					position193, tokenIndex193 := position, tokenIndex
					if buffer[position] != rune('+') {
						goto l194
					}
					position++
					goto l193
				l194:
					position, tokenIndex = position193, tokenIndex193
					if buffer[position] != rune('＋') {
						goto l191
					}
					position++
				}
			l193:
				if !_rules[rulesp]() {
					goto l191
				}
				add(ruleadd, position192)
			}
			return true
		l191:
			position, tokenIndex = position191, tokenIndex191
			return false
		},
		/* 20 minus <- <(('-' / '－') sp)> */
		func() bool {
			position195, tokenIndex195 := position, tokenIndex
			{
				position196 := position
				{
					position197, tokenIndex197 := position, tokenIndex
					if buffer[position] != rune('-') {
						goto l198
					}
					position++
					goto l197
				l198:
					position, tokenIndex = position197, tokenIndex197
					if buffer[position] != rune('－') {
						goto l195
					}
					position++
				}
			l197:
				if !_rules[rulesp]() {
					goto l195
				}
				add(ruleminus, position196)
			}
			return true
		l195:
			position, tokenIndex = position195, tokenIndex195
			return false
		},
		/* 21 multiply <- <(('*' / '＊') sp)> */
		nil,
		/* 22 divide <- <(('/' / '／') sp)> */
		nil,
		/* 23 modulus <- <('%' sp)> */
		nil,
		/* 24 exponentiation <- <(('^' sp) / ('*' '*' sp))> */
		nil,
		/* 25 open <- <('(' sp)> */
		nil,
		/* 26 close <- <(')' sp)> */
		nil,
		/* 27 sp <- <(' ' / '\t')*> */
		func() bool {
			{
				position206 := position
			l207:
				{
					position208, tokenIndex208 := position, tokenIndex
					{
						position209, tokenIndex209 := position, tokenIndex
						if buffer[position] != rune(' ') {
							goto l210
						}
						position++
						goto l209
					l210:
						position, tokenIndex = position209, tokenIndex209
						if buffer[position] != rune('\t') {
							goto l208
						}
						position++
					}
				l209:
					goto l207
				l208:
					position, tokenIndex = position208, tokenIndex208
				}
				add(rulesp, position206)
			}
			return true
		},
		/* 28 fstring <- <('`' <(('{' sp e1 sp '}') / escape / (!((&('\r') '\r') | (&('\n') '\n') | (&('\\') '\\') | (&('`') '`')) .))*> '`' sp Action37)> */
		nil,
		/* 29 escape <- <('\\' ((&('\\') '\\') | (&('\'') '\'') | (&('"') '"') | (&('r') 'r') | (&('f') 'f') | (&('n') 'n') | (&('t') 't') | (&('b') 'b')))> */
		nil,
		/* 31 Action0 <- <{ p.AddOperator(TypeHalt) }> */
		nil,
		/* 32 Action1 <- <{ p.AddLeftValueMark() }> */
		nil,
		/* 33 Action2 <- <{ p.AddOperator(TypeAdd) }> */
		nil,
		/* 34 Action3 <- <{ p.AddLeftValueMark() }> */
		nil,
		/* 35 Action4 <- <{ p.AddOperator(TypeSubtract) }> */
		nil,
		/* 36 Action5 <- <{ p.AddLeftValueMark() }> */
		nil,
		/* 37 Action6 <- <{ p.AddOperator(TypeMultiply) }> */
		nil,
		/* 38 Action7 <- <{ p.AddLeftValueMark() }> */
		nil,
		/* 39 Action8 <- <{ p.AddOperator(TypeDivide) }> */
		nil,
		/* 40 Action9 <- <{ p.AddLeftValueMark() }> */
		nil,
		/* 41 Action10 <- <{ p.AddOperator(TypeModulus) }> */
		nil,
		/* 42 Action11 <- <{ p.AddLeftValueMark() }> */
		nil,
		/* 43 Action12 <- <{ p.AddOperator(TypeExponentiation) }> */
		nil,
		/* 44 Action13 <- <{ p.AddOperator(TypeNegation) }> */
		nil,
		/* 45 Action14 <- <{p.AddValue("1"); p.AddOperator(TypeDiceSetK)}> */
		nil,
		/* 46 Action15 <- <{p.AddValue("1"); p.AddOperator(TypeDiceSetQ)}> */
		nil,
		/* 47 Action16 <- <{ p.AddOperator(TypeDiceSetK) }> */
		nil,
		/* 48 Action17 <- <{ p.AddOperator(TypeDiceSetQ) }> */
		nil,
		/* 49 Action18 <- <{ p.AddOperatorWithInt64(TypeDiceSetK, 1) }> */
		nil,
		/* 50 Action19 <- <{ p.AddOperatorWithInt64(TypeDiceSetQ, 1) }> */
		nil,
		/* 51 Action20 <- <{ p.AddValue("2"); p.AddLeftValueMark() }> */
		nil,
		/* 52 Action21 <- <{ p.AddOperator(TypeDice) }> */
		nil,
		/* 53 Action22 <- <{ p.AddValue("1"); p.AddLeftValueMark() }> */
		nil,
		/* 54 Action23 <- <{ p.AddOperator(TypeDice) }> */
		nil,
		/* 55 Action24 <- <{ p.AddValue("2"); p.AddLeftValueMark(); p.AddValue("0"); p.AddOperator(TypeDice) }> */
		nil,
		/* 56 Action25 <- <{ p.AddValue("1"); p.AddLeftValueMark(); p.AddValue("0"); p.AddOperator(TypeDice) }> */
		nil,
		/* 57 Action26 <- <{ p.AddLeftValueMark() }> */
		nil,
		/* 58 Action27 <- <{ p.AddOperator(TypeDice) }> */
		nil,
		/* 59 Action28 <- <{ p.AddOperator(TypeDicePenalty) }> */
		nil,
		/* 60 Action29 <- <{ p.AddValue("1"); p.AddOperator(TypeDicePenalty) }> */
		nil,
		/* 61 Action30 <- <{ p.AddOperator(TypeDiceBonus) }> */
		nil,
		/* 62 Action31 <- <{ p.AddValue("1"); p.AddOperator(TypeDiceBonus) }> */
		nil,
		/* 63 Action32 <- <{ p.AddValue("0"); p.AddValue("0"); p.AddOperator(TypeDiceFate) }> */
		nil,
		/* 64 Action33 <- <{ p.AddLoadVarname(string(text)) }> */
		nil,
		nil,
		/* 66 Action34 <- <{ p.AddValue(string(text)) }> */
		nil,
		/* 67 Action35 <- <{ p.AddValueStr(string(text)) }> */
		nil,
		/* 68 Action36 <- <{ p.AddStore() }> */
		nil,
		/* 69 Action37 <- <{ p.AddFormatString(string(text)) }> */
		nil,
	}
	p.rules = _rules
	return nil
}
