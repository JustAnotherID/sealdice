package dice

// Code generated by peg -switch -inline dice/roll.peg DO NOT EDIT.

import (
	"fmt"
	"io"
	"os"
	"sort"
	"strconv"
	"strings"
)

const endSymbol rune = 1114112

/* The rule types inferred from the grammar are below. */
type pegRule uint8

const (
	ruleUnknown pegRule = iota
	rulee
	rulee1
	rulee2
	rulee3
	ruleeDice
	ruleeDice2
	ruleeDice3
	rulee4
	rulevalue
	rulenumber
	ruleassign_expr
	ruleidentifier
	rulesub
	ruleadd
	ruleminus
	rulemultiply
	ruledivide
	rulemodulus
	ruleexponentiation
	ruleopen
	ruleclose
	rulesp
	rulefstring
	ruleescape
	ruleAction0
	ruleAction1
	ruleAction2
	ruleAction3
	ruleAction4
	ruleAction5
	ruleAction6
	ruleAction7
	ruleAction8
	ruleAction9
	ruleAction10
	ruleAction11
	ruleAction12
	ruleAction13
	ruleAction14
	ruleAction15
	ruleAction16
	ruleAction17
	ruleAction18
	ruleAction19
	ruleAction20
	ruleAction21
	ruleAction22
	ruleAction23
	ruleAction24
	rulePegText
	ruleAction25
	ruleAction26
	ruleAction27
	ruleAction28
)

var rul3s = [...]string{
	"Unknown",
	"e",
	"e1",
	"e2",
	"e3",
	"eDice",
	"eDice2",
	"eDice3",
	"e4",
	"value",
	"number",
	"assign_expr",
	"identifier",
	"sub",
	"add",
	"minus",
	"multiply",
	"divide",
	"modulus",
	"exponentiation",
	"open",
	"close",
	"sp",
	"fstring",
	"escape",
	"Action0",
	"Action1",
	"Action2",
	"Action3",
	"Action4",
	"Action5",
	"Action6",
	"Action7",
	"Action8",
	"Action9",
	"Action10",
	"Action11",
	"Action12",
	"Action13",
	"Action14",
	"Action15",
	"Action16",
	"Action17",
	"Action18",
	"Action19",
	"Action20",
	"Action21",
	"Action22",
	"Action23",
	"Action24",
	"PegText",
	"Action25",
	"Action26",
	"Action27",
	"Action28",
}

type token32 struct {
	pegRule
	begin, end uint32
}

func (t *token32) String() string {
	return fmt.Sprintf("\x1B[34m%v\x1B[m %v %v", rul3s[t.pegRule], t.begin, t.end)
}

type node32 struct {
	token32
	up, next *node32
}

func (node *node32) print(w io.Writer, pretty bool, buffer string) {
	var print func(node *node32, depth int)
	print = func(node *node32, depth int) {
		for node != nil {
			for c := 0; c < depth; c++ {
				fmt.Fprintf(w, " ")
			}
			rule := rul3s[node.pegRule]
			quote := strconv.Quote(string(([]rune(buffer)[node.begin:node.end])))
			if !pretty {
				fmt.Fprintf(w, "%v %v\n", rule, quote)
			} else {
				fmt.Fprintf(w, "\x1B[36m%v\x1B[m %v\n", rule, quote)
			}
			if node.up != nil {
				print(node.up, depth+1)
			}
			node = node.next
		}
	}
	print(node, 0)
}

func (node *node32) Print(w io.Writer, buffer string) {
	node.print(w, false, buffer)
}

func (node *node32) PrettyPrint(w io.Writer, buffer string) {
	node.print(w, true, buffer)
}

type tokens32 struct {
	tree []token32
}

func (t *tokens32) Trim(length uint32) {
	t.tree = t.tree[:length]
}

func (t *tokens32) Print() {
	for _, token := range t.tree {
		fmt.Println(token.String())
	}
}

func (t *tokens32) AST() *node32 {
	type element struct {
		node *node32
		down *element
	}
	tokens := t.Tokens()
	var stack *element
	for _, token := range tokens {
		if token.begin == token.end {
			continue
		}
		node := &node32{token32: token}
		for stack != nil && stack.node.begin >= token.begin && stack.node.end <= token.end {
			stack.node.next = node.up
			node.up = stack.node
			stack = stack.down
		}
		stack = &element{node: node, down: stack}
	}
	if stack != nil {
		return stack.node
	}
	return nil
}

func (t *tokens32) PrintSyntaxTree(buffer string) {
	t.AST().Print(os.Stdout, buffer)
}

func (t *tokens32) WriteSyntaxTree(w io.Writer, buffer string) {
	t.AST().Print(w, buffer)
}

func (t *tokens32) PrettyPrintSyntaxTree(buffer string) {
	t.AST().PrettyPrint(os.Stdout, buffer)
}

func (t *tokens32) Add(rule pegRule, begin, end, index uint32) {
	tree, i := t.tree, int(index)
	if i >= len(tree) {
		t.tree = append(tree, token32{pegRule: rule, begin: begin, end: end})
		return
	}
	tree[i] = token32{pegRule: rule, begin: begin, end: end}
}

func (t *tokens32) Tokens() []token32 {
	return t.tree
}

type DiceRollParser struct {
	RollExpression

	Buffer string
	buffer []rune
	rules  [55]func() bool
	parse  func(rule ...int) error
	reset  func()
	Pretty bool
	tokens32
}

func (p *DiceRollParser) Parse(rule ...int) error {
	return p.parse(rule...)
}

func (p *DiceRollParser) Reset() {
	p.reset()
}

type textPosition struct {
	line, symbol int
}

type textPositionMap map[int]textPosition

func translatePositions(buffer []rune, positions []int) textPositionMap {
	length, translations, j, line, symbol := len(positions), make(textPositionMap, len(positions)), 0, 1, 0
	sort.Ints(positions)

search:
	for i, c := range buffer {
		if c == '\n' {
			line, symbol = line+1, 0
		} else {
			symbol++
		}
		if i == positions[j] {
			translations[positions[j]] = textPosition{line, symbol}
			for j++; j < length; j++ {
				if i != positions[j] {
					continue search
				}
			}
			break search
		}
	}

	return translations
}

type parseError struct {
	p   *DiceRollParser
	max token32
}

func (e *parseError) Error() string {
	tokens, err := []token32{e.max}, "\n"
	positions, p := make([]int, 2*len(tokens)), 0
	for _, token := range tokens {
		positions[p], p = int(token.begin), p+1
		positions[p], p = int(token.end), p+1
	}
	translations := translatePositions(e.p.buffer, positions)
	format := "parse error near %v (line %v symbol %v - line %v symbol %v):\n%v\n"
	if e.p.Pretty {
		format = "parse error near \x1B[34m%v\x1B[m (line %v symbol %v - line %v symbol %v):\n%v\n"
	}
	for _, token := range tokens {
		begin, end := int(token.begin), int(token.end)
		err += fmt.Sprintf(format,
			rul3s[token.pegRule],
			translations[begin].line, translations[begin].symbol,
			translations[end].line, translations[end].symbol,
			strconv.Quote(string(e.p.buffer[begin:end])))
	}

	return err
}

func (p *DiceRollParser) PrintSyntaxTree() {
	if p.Pretty {
		p.tokens32.PrettyPrintSyntaxTree(p.Buffer)
	} else {
		p.tokens32.PrintSyntaxTree(p.Buffer)
	}
}

func (p *DiceRollParser) WriteSyntaxTree(w io.Writer) {
	p.tokens32.WriteSyntaxTree(w, p.Buffer)
}

func (p *DiceRollParser) SprintSyntaxTree() string {
	var bldr strings.Builder
	p.WriteSyntaxTree(&bldr)
	return bldr.String()
}

func (p *DiceRollParser) Execute() {
	buffer, _buffer, text, begin, end := p.Buffer, p.buffer, "", 0, 0
	for _, token := range p.Tokens() {
		switch token.pegRule {

		case rulePegText:
			begin, end = int(token.begin), int(token.end)
			text = string(_buffer[begin:end])

		case ruleAction0:
			p.AddOperator(TypeHalt)
		case ruleAction1:
			p.AddLeftValueMark()
		case ruleAction2:
			p.AddOperator(TypeAdd)
		case ruleAction3:
			p.AddLeftValueMark()
		case ruleAction4:
			p.AddOperator(TypeSubtract)
		case ruleAction5:
			p.AddLeftValueMark()
		case ruleAction6:
			p.AddOperator(TypeMultiply)
		case ruleAction7:
			p.AddLeftValueMark()
		case ruleAction8:
			p.AddOperator(TypeDivide)
		case ruleAction9:
			p.AddLeftValueMark()
		case ruleAction10:
			p.AddOperator(TypeModulus)
		case ruleAction11:
			p.AddLeftValueMark()
		case ruleAction12:
			p.AddOperator(TypeExponentiation)
		case ruleAction13:
			p.AddLeftValueMark()
		case ruleAction14:
			p.AddOperator(TypeDiceSetK)
		case ruleAction15:
			p.AddOperator(TypeDice)
		case ruleAction16:
			p.AddValue("1")
			p.AddLeftValueMark()
		case ruleAction17:
			p.AddOperator(TypeDiceSetK)
		case ruleAction18:
			p.AddOperator(TypeDice)
		case ruleAction19:
			p.AddOperator(TypeDicePenalty)
		case ruleAction20:
			p.AddValue("1")
			p.AddOperator(TypeDicePenalty)
		case ruleAction21:
			p.AddOperator(TypeDiceBonus)
		case ruleAction22:
			p.AddValue("1")
			p.AddOperator(TypeDiceBonus)
		case ruleAction23:
			p.AddOperator(TypeNegation)
		case ruleAction24:
			p.AddLoadVarname(string(text))
		case ruleAction25:
			p.AddValue(string(text))
		case ruleAction26:
			p.AddValueStr(string(text))
		case ruleAction27:
			p.AddStore()
		case ruleAction28:
			p.AddFormatString(string(text))

		}
	}
	_, _, _, _, _ = buffer, _buffer, text, begin, end
}

func Pretty(pretty bool) func(*DiceRollParser) error {
	return func(p *DiceRollParser) error {
		p.Pretty = pretty
		return nil
	}
}

func Size(size int) func(*DiceRollParser) error {
	return func(p *DiceRollParser) error {
		p.tokens32 = tokens32{tree: make([]token32, 0, size)}
		return nil
	}
}
func (p *DiceRollParser) Init(options ...func(*DiceRollParser) error) error {
	var (
		max                  token32
		position, tokenIndex uint32
		buffer               []rune
	)
	for _, option := range options {
		err := option(p)
		if err != nil {
			return err
		}
	}
	p.reset = func() {
		max = token32{}
		position, tokenIndex = 0, 0

		p.buffer = []rune(p.Buffer)
		if len(p.buffer) == 0 || p.buffer[len(p.buffer)-1] != endSymbol {
			p.buffer = append(p.buffer, endSymbol)
		}
		buffer = p.buffer
	}
	p.reset()

	_rules := p.rules
	tree := p.tokens32
	p.parse = func(rule ...int) error {
		r := 1
		if len(rule) > 0 {
			r = rule[0]
		}
		matches := p.rules[r]()
		p.tokens32 = tree
		if matches {
			p.Trim(tokenIndex)
			return nil
		}
		return &parseError{p, max}
	}

	add := func(rule pegRule, begin uint32) {
		tree.Add(rule, begin, position, tokenIndex)
		tokenIndex++
		if begin != position && position > max.end {
			max = token32{rule, begin, position}
		}
	}

	matchDot := func() bool {
		if buffer[position] != endSymbol {
			position++
			return true
		}
		return false
	}

	/*matchChar := func(c byte) bool {
		if buffer[position] == c {
			position++
			return true
		}
		return false
	}*/

	/*matchRange := func(lower byte, upper byte) bool {
		if c := buffer[position]; c >= lower && c <= upper {
			position++
			return true
		}
		return false
	}*/

	_rules = [...]func() bool{
		nil,
		/* 0 e <- <(sp (fstring / e1) Action0)> */
		func() bool {
			position0, tokenIndex0 := position, tokenIndex
			{
				position1 := position
				if !_rules[rulesp]() {
					goto l0
				}
				{
					position2, tokenIndex2 := position, tokenIndex
					{
						position4 := position
						if buffer[position] != rune('`') {
							goto l3
						}
						position++
						{
							position5 := position
						l6:
							{
								position7, tokenIndex7 := position, tokenIndex
								{
									position8, tokenIndex8 := position, tokenIndex
									if buffer[position] != rune('{') {
										goto l9
									}
									position++
									if !_rules[rulesp]() {
										goto l9
									}
									if !_rules[rulee1]() {
										goto l9
									}
									if !_rules[rulesp]() {
										goto l9
									}
									if buffer[position] != rune('}') {
										goto l9
									}
									position++
									goto l8
								l9:
									position, tokenIndex = position8, tokenIndex8
									{
										position11 := position
										if buffer[position] != rune('\\') {
											goto l10
										}
										position++
										{
											switch buffer[position] {
											case '\\':
												if buffer[position] != rune('\\') {
													goto l10
												}
												position++
											case '\'':
												if buffer[position] != rune('\'') {
													goto l10
												}
												position++
											case '"':
												if buffer[position] != rune('"') {
													goto l10
												}
												position++
											case 'r':
												if buffer[position] != rune('r') {
													goto l10
												}
												position++
											case 'f':
												if buffer[position] != rune('f') {
													goto l10
												}
												position++
											case 'n':
												if buffer[position] != rune('n') {
													goto l10
												}
												position++
											case 't':
												if buffer[position] != rune('t') {
													goto l10
												}
												position++
											default:
												if buffer[position] != rune('b') {
													goto l10
												}
												position++
											}
										}

										add(ruleescape, position11)
									}
									goto l8
								l10:
									position, tokenIndex = position8, tokenIndex8
									{
										position13, tokenIndex13 := position, tokenIndex
										{
											switch buffer[position] {
											case '\r':
												if buffer[position] != rune('\r') {
													goto l13
												}
												position++
											case '\n':
												if buffer[position] != rune('\n') {
													goto l13
												}
												position++
											case '\\':
												if buffer[position] != rune('\\') {
													goto l13
												}
												position++
											default:
												if buffer[position] != rune('`') {
													goto l13
												}
												position++
											}
										}

										goto l7
									l13:
										position, tokenIndex = position13, tokenIndex13
									}
									if !matchDot() {
										goto l7
									}
								}
							l8:
								goto l6
							l7:
								position, tokenIndex = position7, tokenIndex7
							}
							add(rulePegText, position5)
						}
						if buffer[position] != rune('`') {
							goto l3
						}
						position++
						if !_rules[rulesp]() {
							goto l3
						}
						{
							add(ruleAction28, position)
						}
						add(rulefstring, position4)
					}
					goto l2
				l3:
					position, tokenIndex = position2, tokenIndex2
					if !_rules[rulee1]() {
						goto l0
					}
				}
			l2:
				{
					add(ruleAction0, position)
				}
				add(rulee, position1)
			}
			return true
		l0:
			position, tokenIndex = position0, tokenIndex0
			return false
		},
		/* 1 e1 <- <(e2 ((add Action1 e2 Action2) / (minus Action3 e2 Action4))*)> */
		func() bool {
			position17, tokenIndex17 := position, tokenIndex
			{
				position18 := position
				if !_rules[rulee2]() {
					goto l17
				}
			l19:
				{
					position20, tokenIndex20 := position, tokenIndex
					{
						position21, tokenIndex21 := position, tokenIndex
						{
							position23 := position
							if buffer[position] != rune('+') {
								goto l22
							}
							position++
							if !_rules[rulesp]() {
								goto l22
							}
							add(ruleadd, position23)
						}
						{
							add(ruleAction1, position)
						}
						if !_rules[rulee2]() {
							goto l22
						}
						{
							add(ruleAction2, position)
						}
						goto l21
					l22:
						position, tokenIndex = position21, tokenIndex21
						if !_rules[ruleminus]() {
							goto l20
						}
						{
							add(ruleAction3, position)
						}
						if !_rules[rulee2]() {
							goto l20
						}
						{
							add(ruleAction4, position)
						}
					}
				l21:
					goto l19
				l20:
					position, tokenIndex = position20, tokenIndex20
				}
				add(rulee1, position18)
			}
			return true
		l17:
			position, tokenIndex = position17, tokenIndex17
			return false
		},
		/* 2 e2 <- <(e3 ((&('%') (modulus Action9 e3 Action10)) | (&('/') (divide Action7 e3 Action8)) | (&('*') (multiply Action5 e3 Action6)))*)> */
		func() bool {
			position28, tokenIndex28 := position, tokenIndex
			{
				position29 := position
				if !_rules[rulee3]() {
					goto l28
				}
			l30:
				{
					position31, tokenIndex31 := position, tokenIndex
					{
						switch buffer[position] {
						case '%':
							{
								position33 := position
								if buffer[position] != rune('%') {
									goto l31
								}
								position++
								if !_rules[rulesp]() {
									goto l31
								}
								add(rulemodulus, position33)
							}
							{
								add(ruleAction9, position)
							}
							if !_rules[rulee3]() {
								goto l31
							}
							{
								add(ruleAction10, position)
							}
						case '/':
							{
								position36 := position
								if buffer[position] != rune('/') {
									goto l31
								}
								position++
								if !_rules[rulesp]() {
									goto l31
								}
								add(ruledivide, position36)
							}
							{
								add(ruleAction7, position)
							}
							if !_rules[rulee3]() {
								goto l31
							}
							{
								add(ruleAction8, position)
							}
						default:
							{
								position39 := position
								if buffer[position] != rune('*') {
									goto l31
								}
								position++
								if !_rules[rulesp]() {
									goto l31
								}
								add(rulemultiply, position39)
							}
							{
								add(ruleAction5, position)
							}
							if !_rules[rulee3]() {
								goto l31
							}
							{
								add(ruleAction6, position)
							}
						}
					}

					goto l30
				l31:
					position, tokenIndex = position31, tokenIndex31
				}
				add(rulee2, position29)
			}
			return true
		l28:
			position, tokenIndex = position28, tokenIndex28
			return false
		},
		/* 3 e3 <- <(eDice (exponentiation Action11 eDice Action12)*)> */
		func() bool {
			position42, tokenIndex42 := position, tokenIndex
			{
				position43 := position
				if !_rules[ruleeDice]() {
					goto l42
				}
			l44:
				{
					position45, tokenIndex45 := position, tokenIndex
					{
						position46 := position
						{
							position47, tokenIndex47 := position, tokenIndex
							if buffer[position] != rune('^') {
								goto l48
							}
							position++
							if !_rules[rulesp]() {
								goto l48
							}
							goto l47
						l48:
							position, tokenIndex = position47, tokenIndex47
							if buffer[position] != rune('*') {
								goto l45
							}
							position++
							if buffer[position] != rune('*') {
								goto l45
							}
							position++
							if !_rules[rulesp]() {
								goto l45
							}
						}
					l47:
						add(ruleexponentiation, position46)
					}
					{
						add(ruleAction11, position)
					}
					if !_rules[ruleeDice]() {
						goto l45
					}
					{
						add(ruleAction12, position)
					}
					goto l44
				l45:
					position, tokenIndex = position45, tokenIndex45
				}
				add(rulee3, position43)
			}
			return true
		l42:
			position, tokenIndex = position42, tokenIndex42
			return false
		},
		/* 4 eDice <- <((eDice2 (('d' / 'D') Action13 eDice2 ('k' eDice2 Action14)? Action15)*) / (('d' / 'D') Action16 eDice2 ('k' eDice2 Action17)? Action18)+)> */
		func() bool {
			position51, tokenIndex51 := position, tokenIndex
			{
				position52 := position
				{
					position53, tokenIndex53 := position, tokenIndex
					if !_rules[ruleeDice2]() {
						goto l54
					}
				l55:
					{
						position56, tokenIndex56 := position, tokenIndex
						{
							position57, tokenIndex57 := position, tokenIndex
							if buffer[position] != rune('d') {
								goto l58
							}
							position++
							goto l57
						l58:
							position, tokenIndex = position57, tokenIndex57
							if buffer[position] != rune('D') {
								goto l56
							}
							position++
						}
					l57:
						{
							add(ruleAction13, position)
						}
						if !_rules[ruleeDice2]() {
							goto l56
						}
						{
							position60, tokenIndex60 := position, tokenIndex
							if buffer[position] != rune('k') {
								goto l60
							}
							position++
							if !_rules[ruleeDice2]() {
								goto l60
							}
							{
								add(ruleAction14, position)
							}
							goto l61
						l60:
							position, tokenIndex = position60, tokenIndex60
						}
					l61:
						{
							add(ruleAction15, position)
						}
						goto l55
					l56:
						position, tokenIndex = position56, tokenIndex56
					}
					goto l53
				l54:
					position, tokenIndex = position53, tokenIndex53
					{
						position66, tokenIndex66 := position, tokenIndex
						if buffer[position] != rune('d') {
							goto l67
						}
						position++
						goto l66
					l67:
						position, tokenIndex = position66, tokenIndex66
						if buffer[position] != rune('D') {
							goto l51
						}
						position++
					}
				l66:
					{
						add(ruleAction16, position)
					}
					if !_rules[ruleeDice2]() {
						goto l51
					}
					{
						position69, tokenIndex69 := position, tokenIndex
						if buffer[position] != rune('k') {
							goto l69
						}
						position++
						if !_rules[ruleeDice2]() {
							goto l69
						}
						{
							add(ruleAction17, position)
						}
						goto l70
					l69:
						position, tokenIndex = position69, tokenIndex69
					}
				l70:
					{
						add(ruleAction18, position)
					}
				l64:
					{
						position65, tokenIndex65 := position, tokenIndex
						{
							position73, tokenIndex73 := position, tokenIndex
							if buffer[position] != rune('d') {
								goto l74
							}
							position++
							goto l73
						l74:
							position, tokenIndex = position73, tokenIndex73
							if buffer[position] != rune('D') {
								goto l65
							}
							position++
						}
					l73:
						{
							add(ruleAction16, position)
						}
						if !_rules[ruleeDice2]() {
							goto l65
						}
						{
							position76, tokenIndex76 := position, tokenIndex
							if buffer[position] != rune('k') {
								goto l76
							}
							position++
							if !_rules[ruleeDice2]() {
								goto l76
							}
							{
								add(ruleAction17, position)
							}
							goto l77
						l76:
							position, tokenIndex = position76, tokenIndex76
						}
					l77:
						{
							add(ruleAction18, position)
						}
						goto l64
					l65:
						position, tokenIndex = position65, tokenIndex65
					}
				}
			l53:
				add(ruleeDice, position52)
			}
			return true
		l51:
			position, tokenIndex = position51, tokenIndex51
			return false
		},
		/* 5 eDice2 <- <((('p' / 'P') number Action19) / (('p' / 'P') Action20) / eDice3)> */
		func() bool {
			position80, tokenIndex80 := position, tokenIndex
			{
				position81 := position
				{
					position82, tokenIndex82 := position, tokenIndex
					{
						position84, tokenIndex84 := position, tokenIndex
						if buffer[position] != rune('p') {
							goto l85
						}
						position++
						goto l84
					l85:
						position, tokenIndex = position84, tokenIndex84
						if buffer[position] != rune('P') {
							goto l83
						}
						position++
					}
				l84:
					if !_rules[rulenumber]() {
						goto l83
					}
					{
						add(ruleAction19, position)
					}
					goto l82
				l83:
					position, tokenIndex = position82, tokenIndex82
					{
						position88, tokenIndex88 := position, tokenIndex
						if buffer[position] != rune('p') {
							goto l89
						}
						position++
						goto l88
					l89:
						position, tokenIndex = position88, tokenIndex88
						if buffer[position] != rune('P') {
							goto l87
						}
						position++
					}
				l88:
					{
						add(ruleAction20, position)
					}
					goto l82
				l87:
					position, tokenIndex = position82, tokenIndex82
					{
						position91 := position
						{
							position92, tokenIndex92 := position, tokenIndex
							{
								position94, tokenIndex94 := position, tokenIndex
								if buffer[position] != rune('b') {
									goto l95
								}
								position++
								goto l94
							l95:
								position, tokenIndex = position94, tokenIndex94
								if buffer[position] != rune('B') {
									goto l93
								}
								position++
							}
						l94:
							if !_rules[rulenumber]() {
								goto l93
							}
							{
								add(ruleAction21, position)
							}
							goto l92
						l93:
							position, tokenIndex = position92, tokenIndex92
							{
								position98, tokenIndex98 := position, tokenIndex
								if buffer[position] != rune('b') {
									goto l99
								}
								position++
								goto l98
							l99:
								position, tokenIndex = position98, tokenIndex98
								if buffer[position] != rune('B') {
									goto l97
								}
								position++
							}
						l98:
							{
								add(ruleAction22, position)
							}
							goto l92
						l97:
							position, tokenIndex = position92, tokenIndex92
							{
								position101 := position
								{
									position102, tokenIndex102 := position, tokenIndex
									if !_rules[ruleminus]() {
										goto l103
									}
									if !_rules[rulevalue]() {
										goto l103
									}
									{
										add(ruleAction23, position)
									}
									goto l102
								l103:
									position, tokenIndex = position102, tokenIndex102
									if !_rules[rulevalue]() {
										goto l80
									}
								}
							l102:
								add(rulee4, position101)
							}
						}
					l92:
						add(ruleeDice3, position91)
					}
				}
			l82:
				add(ruleeDice2, position81)
			}
			return true
		l80:
			position, tokenIndex = position80, tokenIndex80
			return false
		},
		/* 6 eDice3 <- <((('b' / 'B') number Action21) / (('b' / 'B') Action22) / e4)> */
		nil,
		/* 7 e4 <- <((minus value Action23) / value)> */
		nil,
		/* 8 value <- <(number / assign_expr / (identifier Action24) / sub)> */
		func() bool {
			position107, tokenIndex107 := position, tokenIndex
			{
				position108 := position
				{
					position109, tokenIndex109 := position, tokenIndex
					if !_rules[rulenumber]() {
						goto l110
					}
					goto l109
				l110:
					position, tokenIndex = position109, tokenIndex109
					{
						position112 := position
						if !_rules[ruleidentifier]() {
							goto l111
						}
						{
							add(ruleAction26, position)
						}
						if buffer[position] != rune('=') {
							goto l111
						}
						position++
						if !_rules[rulee1]() {
							goto l111
						}
						{
							add(ruleAction27, position)
						}
						add(ruleassign_expr, position112)
					}
					goto l109
				l111:
					position, tokenIndex = position109, tokenIndex109
					if !_rules[ruleidentifier]() {
						goto l115
					}
					{
						add(ruleAction24, position)
					}
					goto l109
				l115:
					position, tokenIndex = position109, tokenIndex109
					{
						position117 := position
						{
							position118 := position
							if buffer[position] != rune('(') {
								goto l107
							}
							position++
							if !_rules[rulesp]() {
								goto l107
							}
							add(ruleopen, position118)
						}
						if !_rules[rulee1]() {
							goto l107
						}
						{
							position119 := position
							if buffer[position] != rune(')') {
								goto l107
							}
							position++
							if !_rules[rulesp]() {
								goto l107
							}
							add(ruleclose, position119)
						}
						add(rulesub, position117)
					}
				}
			l109:
				add(rulevalue, position108)
			}
			return true
		l107:
			position, tokenIndex = position107, tokenIndex107
			return false
		},
		/* 9 number <- <(<[0-9]+> sp Action25)> */
		func() bool {
			position120, tokenIndex120 := position, tokenIndex
			{
				position121 := position
				{
					position122 := position
					if c := buffer[position]; c < rune('0') || c > rune('9') {
						goto l120
					}
					position++
				l123:
					{
						position124, tokenIndex124 := position, tokenIndex
						if c := buffer[position]; c < rune('0') || c > rune('9') {
							goto l124
						}
						position++
						goto l123
					l124:
						position, tokenIndex = position124, tokenIndex124
					}
					add(rulePegText, position122)
				}
				if !_rules[rulesp]() {
					goto l120
				}
				{
					add(ruleAction25, position)
				}
				add(rulenumber, position121)
			}
			return true
		l120:
			position, tokenIndex = position120, tokenIndex120
			return false
		},
		/* 10 assign_expr <- <(identifier Action26 '=' e1 Action27)> */
		nil,
		/* 11 identifier <- <(!'d' <(!((&('\r') '\r') | (&('\n') '\n') | (&('\t') '\t') | (&(' ') ' ') | (&('~') '~') | (&('}') '}') | (&('|') '|') | (&('{') '{') | (&('`') '`') | (&('^') '^') | (&(']') ']') | (&('\\') '\\') | (&('[') '[') | (&('@') '@') | (&('?') '?') | (&('>') '>') | (&('=') '=') | (&('<') '<') | (&(';') ';') | (&(':') ':') | (&('/') '/') | (&('+') '+') | (&('*') '*') | (&(')') ')') | (&('(') '(') | (&('\'') '\'') | (&('&') '&') | (&('%') '%') | (&('#') '#') | (&('"') '"') | (&('!') '!') | (&(',' | '-' | '.') [,-.]) | (&('0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9') [0-9])) . (!((&('\r') '\r') | (&('\n') '\n') | (&('\t') '\t') | (&(' ') ' ') | (&('~') '~') | (&('}') '}') | (&('|') '|') | (&('{') '{') | (&('`') '`') | (&('^') '^') | (&(']') ']') | (&('\\') '\\') | (&('[') '[') | (&('@') '@') | (&('?') '?') | (&('>') '>') | (&('=') '=') | (&('<') '<') | (&(';') ';') | (&('/') '/') | (&('+') '+') | (&('*') '*') | (&(')') ')') | (&('(') '(') | (&('\'') '\'') | (&('&') '&') | (&('%') '%') | (&('$') '$') | (&('#') '#') | (&('"') '"') | (&('!') '!') | (&(',' | '-' | '.') [,-.])) .)*)> sp)> */
		func() bool {
			position127, tokenIndex127 := position, tokenIndex
			{
				position128 := position
				{
					position129, tokenIndex129 := position, tokenIndex
					if buffer[position] != rune('d') {
						goto l129
					}
					position++
					goto l127
				l129:
					position, tokenIndex = position129, tokenIndex129
				}
				{
					position130 := position
					{
						position131, tokenIndex131 := position, tokenIndex
						{
							switch buffer[position] {
							case '\r':
								if buffer[position] != rune('\r') {
									goto l131
								}
								position++
							case '\n':
								if buffer[position] != rune('\n') {
									goto l131
								}
								position++
							case '\t':
								if buffer[position] != rune('\t') {
									goto l131
								}
								position++
							case ' ':
								if buffer[position] != rune(' ') {
									goto l131
								}
								position++
							case '~':
								if buffer[position] != rune('~') {
									goto l131
								}
								position++
							case '}':
								if buffer[position] != rune('}') {
									goto l131
								}
								position++
							case '|':
								if buffer[position] != rune('|') {
									goto l131
								}
								position++
							case '{':
								if buffer[position] != rune('{') {
									goto l131
								}
								position++
							case '`':
								if buffer[position] != rune('`') {
									goto l131
								}
								position++
							case '^':
								if buffer[position] != rune('^') {
									goto l131
								}
								position++
							case ']':
								if buffer[position] != rune(']') {
									goto l131
								}
								position++
							case '\\':
								if buffer[position] != rune('\\') {
									goto l131
								}
								position++
							case '[':
								if buffer[position] != rune('[') {
									goto l131
								}
								position++
							case '@':
								if buffer[position] != rune('@') {
									goto l131
								}
								position++
							case '?':
								if buffer[position] != rune('?') {
									goto l131
								}
								position++
							case '>':
								if buffer[position] != rune('>') {
									goto l131
								}
								position++
							case '=':
								if buffer[position] != rune('=') {
									goto l131
								}
								position++
							case '<':
								if buffer[position] != rune('<') {
									goto l131
								}
								position++
							case ';':
								if buffer[position] != rune(';') {
									goto l131
								}
								position++
							case ':':
								if buffer[position] != rune(':') {
									goto l131
								}
								position++
							case '/':
								if buffer[position] != rune('/') {
									goto l131
								}
								position++
							case '+':
								if buffer[position] != rune('+') {
									goto l131
								}
								position++
							case '*':
								if buffer[position] != rune('*') {
									goto l131
								}
								position++
							case ')':
								if buffer[position] != rune(')') {
									goto l131
								}
								position++
							case '(':
								if buffer[position] != rune('(') {
									goto l131
								}
								position++
							case '\'':
								if buffer[position] != rune('\'') {
									goto l131
								}
								position++
							case '&':
								if buffer[position] != rune('&') {
									goto l131
								}
								position++
							case '%':
								if buffer[position] != rune('%') {
									goto l131
								}
								position++
							case '#':
								if buffer[position] != rune('#') {
									goto l131
								}
								position++
							case '"':
								if buffer[position] != rune('"') {
									goto l131
								}
								position++
							case '!':
								if buffer[position] != rune('!') {
									goto l131
								}
								position++
							case ',', '-', '.':
								if c := buffer[position]; c < rune(',') || c > rune('.') {
									goto l131
								}
								position++
							default:
								if c := buffer[position]; c < rune('0') || c > rune('9') {
									goto l131
								}
								position++
							}
						}

						goto l127
					l131:
						position, tokenIndex = position131, tokenIndex131
					}
					if !matchDot() {
						goto l127
					}
				l133:
					{
						position134, tokenIndex134 := position, tokenIndex
						{
							position135, tokenIndex135 := position, tokenIndex
							{
								switch buffer[position] {
								case '\r':
									if buffer[position] != rune('\r') {
										goto l135
									}
									position++
								case '\n':
									if buffer[position] != rune('\n') {
										goto l135
									}
									position++
								case '\t':
									if buffer[position] != rune('\t') {
										goto l135
									}
									position++
								case ' ':
									if buffer[position] != rune(' ') {
										goto l135
									}
									position++
								case '~':
									if buffer[position] != rune('~') {
										goto l135
									}
									position++
								case '}':
									if buffer[position] != rune('}') {
										goto l135
									}
									position++
								case '|':
									if buffer[position] != rune('|') {
										goto l135
									}
									position++
								case '{':
									if buffer[position] != rune('{') {
										goto l135
									}
									position++
								case '`':
									if buffer[position] != rune('`') {
										goto l135
									}
									position++
								case '^':
									if buffer[position] != rune('^') {
										goto l135
									}
									position++
								case ']':
									if buffer[position] != rune(']') {
										goto l135
									}
									position++
								case '\\':
									if buffer[position] != rune('\\') {
										goto l135
									}
									position++
								case '[':
									if buffer[position] != rune('[') {
										goto l135
									}
									position++
								case '@':
									if buffer[position] != rune('@') {
										goto l135
									}
									position++
								case '?':
									if buffer[position] != rune('?') {
										goto l135
									}
									position++
								case '>':
									if buffer[position] != rune('>') {
										goto l135
									}
									position++
								case '=':
									if buffer[position] != rune('=') {
										goto l135
									}
									position++
								case '<':
									if buffer[position] != rune('<') {
										goto l135
									}
									position++
								case ';':
									if buffer[position] != rune(';') {
										goto l135
									}
									position++
								case '/':
									if buffer[position] != rune('/') {
										goto l135
									}
									position++
								case '+':
									if buffer[position] != rune('+') {
										goto l135
									}
									position++
								case '*':
									if buffer[position] != rune('*') {
										goto l135
									}
									position++
								case ')':
									if buffer[position] != rune(')') {
										goto l135
									}
									position++
								case '(':
									if buffer[position] != rune('(') {
										goto l135
									}
									position++
								case '\'':
									if buffer[position] != rune('\'') {
										goto l135
									}
									position++
								case '&':
									if buffer[position] != rune('&') {
										goto l135
									}
									position++
								case '%':
									if buffer[position] != rune('%') {
										goto l135
									}
									position++
								case '$':
									if buffer[position] != rune('$') {
										goto l135
									}
									position++
								case '#':
									if buffer[position] != rune('#') {
										goto l135
									}
									position++
								case '"':
									if buffer[position] != rune('"') {
										goto l135
									}
									position++
								case '!':
									if buffer[position] != rune('!') {
										goto l135
									}
									position++
								default:
									if c := buffer[position]; c < rune(',') || c > rune('.') {
										goto l135
									}
									position++
								}
							}

							goto l134
						l135:
							position, tokenIndex = position135, tokenIndex135
						}
						if !matchDot() {
							goto l134
						}
						goto l133
					l134:
						position, tokenIndex = position134, tokenIndex134
					}
					add(rulePegText, position130)
				}
				if !_rules[rulesp]() {
					goto l127
				}
				add(ruleidentifier, position128)
			}
			return true
		l127:
			position, tokenIndex = position127, tokenIndex127
			return false
		},
		/* 12 sub <- <(open e1 close)> */
		nil,
		/* 13 add <- <('+' sp)> */
		nil,
		/* 14 minus <- <('-' sp)> */
		func() bool {
			position139, tokenIndex139 := position, tokenIndex
			{
				position140 := position
				if buffer[position] != rune('-') {
					goto l139
				}
				position++
				if !_rules[rulesp]() {
					goto l139
				}
				add(ruleminus, position140)
			}
			return true
		l139:
			position, tokenIndex = position139, tokenIndex139
			return false
		},
		/* 15 multiply <- <('*' sp)> */
		nil,
		/* 16 divide <- <('/' sp)> */
		nil,
		/* 17 modulus <- <('%' sp)> */
		nil,
		/* 18 exponentiation <- <(('^' sp) / ('*' '*' sp))> */
		nil,
		/* 19 open <- <('(' sp)> */
		nil,
		/* 20 close <- <(')' sp)> */
		nil,
		/* 21 sp <- <(' ' / '\t')*> */
		func() bool {
			{
				position148 := position
			l149:
				{
					position150, tokenIndex150 := position, tokenIndex
					{
						position151, tokenIndex151 := position, tokenIndex
						if buffer[position] != rune(' ') {
							goto l152
						}
						position++
						goto l151
					l152:
						position, tokenIndex = position151, tokenIndex151
						if buffer[position] != rune('\t') {
							goto l150
						}
						position++
					}
				l151:
					goto l149
				l150:
					position, tokenIndex = position150, tokenIndex150
				}
				add(rulesp, position148)
			}
			return true
		},
		/* 22 fstring <- <('`' <(('{' sp e1 sp '}') / escape / (!((&('\r') '\r') | (&('\n') '\n') | (&('\\') '\\') | (&('`') '`')) .))*> '`' sp Action28)> */
		nil,
		/* 23 escape <- <('\\' ((&('\\') '\\') | (&('\'') '\'') | (&('"') '"') | (&('r') 'r') | (&('f') 'f') | (&('n') 'n') | (&('t') 't') | (&('b') 'b')))> */
		nil,
		/* 25 Action0 <- <{ p.AddOperator(TypeHalt) }> */
		nil,
		/* 26 Action1 <- <{ p.AddLeftValueMark() }> */
		nil,
		/* 27 Action2 <- <{ p.AddOperator(TypeAdd) }> */
		nil,
		/* 28 Action3 <- <{ p.AddLeftValueMark() }> */
		nil,
		/* 29 Action4 <- <{ p.AddOperator(TypeSubtract) }> */
		nil,
		/* 30 Action5 <- <{ p.AddLeftValueMark() }> */
		nil,
		/* 31 Action6 <- <{ p.AddOperator(TypeMultiply) }> */
		nil,
		/* 32 Action7 <- <{ p.AddLeftValueMark() }> */
		nil,
		/* 33 Action8 <- <{ p.AddOperator(TypeDivide) }> */
		nil,
		/* 34 Action9 <- <{ p.AddLeftValueMark() }> */
		nil,
		/* 35 Action10 <- <{ p.AddOperator(TypeModulus) }> */
		nil,
		/* 36 Action11 <- <{ p.AddLeftValueMark() }> */
		nil,
		/* 37 Action12 <- <{ p.AddOperator(TypeExponentiation) }> */
		nil,
		/* 38 Action13 <- <{ p.AddLeftValueMark() }> */
		nil,
		/* 39 Action14 <- <{ p.AddOperator(TypeDiceSetK) }> */
		nil,
		/* 40 Action15 <- <{ p.AddOperator(TypeDice) }> */
		nil,
		/* 41 Action16 <- <{ p.AddValue("1"); p.AddLeftValueMark() }> */
		nil,
		/* 42 Action17 <- <{ p.AddOperator(TypeDiceSetK) }> */
		nil,
		/* 43 Action18 <- <{ p.AddOperator(TypeDice) }> */
		nil,
		/* 44 Action19 <- <{ p.AddOperator(TypeDicePenalty) }> */
		nil,
		/* 45 Action20 <- <{ p.AddValue("1"); p.AddOperator(TypeDicePenalty) }> */
		nil,
		/* 46 Action21 <- <{ p.AddOperator(TypeDiceBonus) }> */
		nil,
		/* 47 Action22 <- <{ p.AddValue("1"); p.AddOperator(TypeDiceBonus) }> */
		nil,
		/* 48 Action23 <- <{ p.AddOperator(TypeNegation) }> */
		nil,
		/* 49 Action24 <- <{ p.AddLoadVarname(string(text)) }> */
		nil,
		nil,
		/* 51 Action25 <- <{ p.AddValue(string(text)) }> */
		nil,
		/* 52 Action26 <- <{ p.AddValueStr(string(text)) }> */
		nil,
		/* 53 Action27 <- <{ p.AddStore() }> */
		nil,
		/* 54 Action28 <- <{ p.AddFormatString(string(text)) }> */
		nil,
	}
	p.rules = _rules
	return nil
}
