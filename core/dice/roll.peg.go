package dice

// Code generated by C:\Users\fy0\go\bin\peg.exe -switch -inline dice/roll.peg DO NOT EDIT.

import (
	"fmt"
	"io"
	"os"
	"sort"
	"strconv"
	"strings"
)

const endSymbol rune = 1114112

/* The rule types inferred from the grammar are below. */
type pegRule uint8

const (
	ruleUnknown pegRule = iota
	rulee
	rulee1
	rulee2
	rulee3
	rulee4
	rulee5
	ruledndDiceSuffix
	rulekqDiceOp
	rule_dnumber
	ruleeDice
	rulelaNumberOrLeftParen
	ruleeDice2
	ruleeDice3
	rulevalue
	rulenumber
	ruleassign_expr
	ruleidentifier
	rulesub
	ruleadd
	ruleminus
	rulemultiply
	ruledivide
	rulemodulus
	ruleexponentiation
	ruleopen
	ruleclose
	rulesp
	rulefstring
	ruleescape
	ruleAction0
	ruleAction1
	ruleAction2
	ruleAction3
	ruleAction4
	ruleAction5
	ruleAction6
	ruleAction7
	ruleAction8
	ruleAction9
	ruleAction10
	ruleAction11
	ruleAction12
	ruleAction13
	ruleAction14
	ruleAction15
	ruleAction16
	ruleAction17
	ruleAction18
	ruleAction19
	ruleAction20
	ruleAction21
	ruleAction22
	ruleAction23
	ruleAction24
	ruleAction25
	ruleAction26
	ruleAction27
	ruleAction28
	ruleAction29
	ruleAction30
	rulePegText
	ruleAction31
	ruleAction32
	ruleAction33
	ruleAction34
)

var rul3s = [...]string{
	"Unknown",
	"e",
	"e1",
	"e2",
	"e3",
	"e4",
	"e5",
	"dndDiceSuffix",
	"kqDiceOp",
	"_dnumber",
	"eDice",
	"laNumberOrLeftParen",
	"eDice2",
	"eDice3",
	"value",
	"number",
	"assign_expr",
	"identifier",
	"sub",
	"add",
	"minus",
	"multiply",
	"divide",
	"modulus",
	"exponentiation",
	"open",
	"close",
	"sp",
	"fstring",
	"escape",
	"Action0",
	"Action1",
	"Action2",
	"Action3",
	"Action4",
	"Action5",
	"Action6",
	"Action7",
	"Action8",
	"Action9",
	"Action10",
	"Action11",
	"Action12",
	"Action13",
	"Action14",
	"Action15",
	"Action16",
	"Action17",
	"Action18",
	"Action19",
	"Action20",
	"Action21",
	"Action22",
	"Action23",
	"Action24",
	"Action25",
	"Action26",
	"Action27",
	"Action28",
	"Action29",
	"Action30",
	"PegText",
	"Action31",
	"Action32",
	"Action33",
	"Action34",
}

type token32 struct {
	pegRule
	begin, end uint32
}

func (t *token32) String() string {
	return fmt.Sprintf("\x1B[34m%v\x1B[m %v %v", rul3s[t.pegRule], t.begin, t.end)
}

type node32 struct {
	token32
	up, next *node32
}

func (node *node32) print(w io.Writer, pretty bool, buffer string) {
	var print func(node *node32, depth int)
	print = func(node *node32, depth int) {
		for node != nil {
			for c := 0; c < depth; c++ {
				fmt.Fprintf(w, " ")
			}
			rule := rul3s[node.pegRule]
			quote := strconv.Quote(string(([]rune(buffer)[node.begin:node.end])))
			if !pretty {
				fmt.Fprintf(w, "%v %v\n", rule, quote)
			} else {
				fmt.Fprintf(w, "\x1B[36m%v\x1B[m %v\n", rule, quote)
			}
			if node.up != nil {
				print(node.up, depth+1)
			}
			node = node.next
		}
	}
	print(node, 0)
}

func (node *node32) Print(w io.Writer, buffer string) {
	node.print(w, false, buffer)
}

func (node *node32) PrettyPrint(w io.Writer, buffer string) {
	node.print(w, true, buffer)
}

type tokens32 struct {
	tree []token32
}

func (t *tokens32) Trim(length uint32) {
	t.tree = t.tree[:length]
}

func (t *tokens32) Print() {
	for _, token := range t.tree {
		fmt.Println(token.String())
	}
}

func (t *tokens32) AST() *node32 {
	type element struct {
		node *node32
		down *element
	}
	tokens := t.Tokens()
	var stack *element
	for _, token := range tokens {
		if token.begin == token.end {
			continue
		}
		node := &node32{token32: token}
		for stack != nil && stack.node.begin >= token.begin && stack.node.end <= token.end {
			stack.node.next = node.up
			node.up = stack.node
			stack = stack.down
		}
		stack = &element{node: node, down: stack}
	}
	if stack != nil {
		return stack.node
	}
	return nil
}

func (t *tokens32) PrintSyntaxTree(buffer string) {
	t.AST().Print(os.Stdout, buffer)
}

func (t *tokens32) WriteSyntaxTree(w io.Writer, buffer string) {
	t.AST().Print(w, buffer)
}

func (t *tokens32) PrettyPrintSyntaxTree(buffer string) {
	t.AST().PrettyPrint(os.Stdout, buffer)
}

func (t *tokens32) Add(rule pegRule, begin, end, index uint32) {
	tree, i := t.tree, int(index)
	if i >= len(tree) {
		t.tree = append(tree, token32{pegRule: rule, begin: begin, end: end})
		return
	}
	tree[i] = token32{pegRule: rule, begin: begin, end: end}
}

func (t *tokens32) Tokens() []token32 {
	return t.tree
}

type DiceRollParser struct {
	RollExpression

	Buffer string
	buffer []rune
	rules  [66]func() bool
	parse  func(rule ...int) error
	reset  func()
	Pretty bool
	tokens32
}

func (p *DiceRollParser) Parse(rule ...int) error {
	return p.parse(rule...)
}

func (p *DiceRollParser) Reset() {
	p.reset()
}

type textPosition struct {
	line, symbol int
}

type textPositionMap map[int]textPosition

func translatePositions(buffer []rune, positions []int) textPositionMap {
	length, translations, j, line, symbol := len(positions), make(textPositionMap, len(positions)), 0, 1, 0
	sort.Ints(positions)

search:
	for i, c := range buffer {
		if c == '\n' {
			line, symbol = line+1, 0
		} else {
			symbol++
		}
		if i == positions[j] {
			translations[positions[j]] = textPosition{line, symbol}
			for j++; j < length; j++ {
				if i != positions[j] {
					continue search
				}
			}
			break search
		}
	}

	return translations
}

type parseError struct {
	p   *DiceRollParser
	max token32
}

func (e *parseError) Error() string {
	tokens, err := []token32{e.max}, "\n"
	positions, p := make([]int, 2*len(tokens)), 0
	for _, token := range tokens {
		positions[p], p = int(token.begin), p+1
		positions[p], p = int(token.end), p+1
	}
	translations := translatePositions(e.p.buffer, positions)
	format := "parse error near %v (line %v symbol %v - line %v symbol %v):\n%v\n"
	if e.p.Pretty {
		format = "parse error near \x1B[34m%v\x1B[m (line %v symbol %v - line %v symbol %v):\n%v\n"
	}
	for _, token := range tokens {
		begin, end := int(token.begin), int(token.end)
		err += fmt.Sprintf(format,
			rul3s[token.pegRule],
			translations[begin].line, translations[begin].symbol,
			translations[end].line, translations[end].symbol,
			strconv.Quote(string(e.p.buffer[begin:end])))
	}

	return err
}

func (p *DiceRollParser) PrintSyntaxTree() {
	if p.Pretty {
		p.tokens32.PrettyPrintSyntaxTree(p.Buffer)
	} else {
		p.tokens32.PrintSyntaxTree(p.Buffer)
	}
}

func (p *DiceRollParser) WriteSyntaxTree(w io.Writer) {
	p.tokens32.WriteSyntaxTree(w, p.Buffer)
}

func (p *DiceRollParser) SprintSyntaxTree() string {
	var bldr strings.Builder
	p.WriteSyntaxTree(&bldr)
	return bldr.String()
}

func (p *DiceRollParser) Execute() {
	buffer, _buffer, text, begin, end := p.Buffer, p.buffer, "", 0, 0
	for _, token := range p.Tokens() {
		switch token.pegRule {

		case rulePegText:
			begin, end = int(token.begin), int(token.end)
			text = string(_buffer[begin:end])

		case ruleAction0:
			p.AddOperator(TypeHalt)
		case ruleAction1:
			p.AddLeftValueMark()
		case ruleAction2:
			p.AddOperator(TypeAdd)
		case ruleAction3:
			p.AddLeftValueMark()
		case ruleAction4:
			p.AddOperator(TypeSubtract)
		case ruleAction5:
			p.AddLeftValueMark()
		case ruleAction6:
			p.AddOperator(TypeMultiply)
		case ruleAction7:
			p.AddLeftValueMark()
		case ruleAction8:
			p.AddOperator(TypeDivide)
		case ruleAction9:
			p.AddLeftValueMark()
		case ruleAction10:
			p.AddOperator(TypeModulus)
		case ruleAction11:
			p.AddLeftValueMark()
		case ruleAction12:
			p.AddOperator(TypeExponentiation)
		case ruleAction13:
			p.AddOperator(TypeNegation)
		case ruleAction14:
			p.AddValue("1")
			p.AddOperator(TypeDiceSetK)
		case ruleAction15:
			p.AddValue("1")
			p.AddOperator(TypeDiceSetQ)
		case ruleAction16:
			p.AddOperator(TypeDiceSetK)
		case ruleAction17:
			p.AddOperator(TypeDiceSetQ)
		case ruleAction18:
			p.AddValue("2")
			p.AddLeftValueMark()
		case ruleAction19:
			p.AddOperator(TypeDice)
		case ruleAction20:
			p.AddValue("1")
			p.AddLeftValueMark()
		case ruleAction21:
			p.AddOperator(TypeDice)
		case ruleAction22:
			p.AddValue("2")
			p.AddLeftValueMark()
			p.AddValue("0")
			p.AddOperator(TypeDice)
		case ruleAction23:
			p.AddValue("1")
			p.AddLeftValueMark()
			p.AddValue("0")
			p.AddOperator(TypeDice)
		case ruleAction24:
			p.AddLeftValueMark()
		case ruleAction25:
			p.AddOperator(TypeDice)
		case ruleAction26:
			p.AddOperator(TypeDicePenalty)
		case ruleAction27:
			p.AddValue("1")
			p.AddOperator(TypeDicePenalty)
		case ruleAction28:
			p.AddOperator(TypeDiceBonus)
		case ruleAction29:
			p.AddValue("1")
			p.AddOperator(TypeDiceBonus)
		case ruleAction30:
			p.AddLoadVarname(string(text))
		case ruleAction31:
			p.AddValue(string(text))
		case ruleAction32:
			p.AddValueStr(string(text))
		case ruleAction33:
			p.AddStore()
		case ruleAction34:
			p.AddFormatString(string(text))

		}
	}
	_, _, _, _, _ = buffer, _buffer, text, begin, end
}

func Pretty(pretty bool) func(*DiceRollParser) error {
	return func(p *DiceRollParser) error {
		p.Pretty = pretty
		return nil
	}
}

func Size(size int) func(*DiceRollParser) error {
	return func(p *DiceRollParser) error {
		p.tokens32 = tokens32{tree: make([]token32, 0, size)}
		return nil
	}
}
func (p *DiceRollParser) Init(options ...func(*DiceRollParser) error) error {
	var (
		max                  token32
		position, tokenIndex uint32
		buffer               []rune
	)
	for _, option := range options {
		err := option(p)
		if err != nil {
			return err
		}
	}
	p.reset = func() {
		max = token32{}
		position, tokenIndex = 0, 0

		p.buffer = []rune(p.Buffer)
		if len(p.buffer) == 0 || p.buffer[len(p.buffer)-1] != endSymbol {
			p.buffer = append(p.buffer, endSymbol)
		}
		buffer = p.buffer
	}
	p.reset()

	_rules := p.rules
	tree := p.tokens32
	p.parse = func(rule ...int) error {
		r := 1
		if len(rule) > 0 {
			r = rule[0]
		}
		matches := p.rules[r]()
		p.tokens32 = tree
		if matches {
			p.Trim(tokenIndex)
			return nil
		}
		return &parseError{p, max}
	}

	add := func(rule pegRule, begin uint32) {
		tree.Add(rule, begin, position, tokenIndex)
		tokenIndex++
		if begin != position && position > max.end {
			max = token32{rule, begin, position}
		}
	}

	matchDot := func() bool {
		if buffer[position] != endSymbol {
			position++
			return true
		}
		return false
	}

	/*matchChar := func(c byte) bool {
		if buffer[position] == c {
			position++
			return true
		}
		return false
	}*/

	/*matchRange := func(lower byte, upper byte) bool {
		if c := buffer[position]; c >= lower && c <= upper {
			position++
			return true
		}
		return false
	}*/

	_rules = [...]func() bool{
		nil,
		/* 0 e <- <(sp (fstring / e1) Action0)> */
		func() bool {
			position0, tokenIndex0 := position, tokenIndex
			{
				position1 := position
				if !_rules[rulesp]() {
					goto l0
				}
				{
					position2, tokenIndex2 := position, tokenIndex
					{
						position4 := position
						if buffer[position] != rune('`') {
							goto l3
						}
						position++
						{
							position5 := position
						l6:
							{
								position7, tokenIndex7 := position, tokenIndex
								{
									position8, tokenIndex8 := position, tokenIndex
									if buffer[position] != rune('{') {
										goto l9
									}
									position++
									if !_rules[rulesp]() {
										goto l9
									}
									if !_rules[rulee1]() {
										goto l9
									}
									if !_rules[rulesp]() {
										goto l9
									}
									if buffer[position] != rune('}') {
										goto l9
									}
									position++
									goto l8
								l9:
									position, tokenIndex = position8, tokenIndex8
									{
										position11 := position
										if buffer[position] != rune('\\') {
											goto l10
										}
										position++
										{
											switch buffer[position] {
											case '\\':
												if buffer[position] != rune('\\') {
													goto l10
												}
												position++
											case '\'':
												if buffer[position] != rune('\'') {
													goto l10
												}
												position++
											case '"':
												if buffer[position] != rune('"') {
													goto l10
												}
												position++
											case 'r':
												if buffer[position] != rune('r') {
													goto l10
												}
												position++
											case 'f':
												if buffer[position] != rune('f') {
													goto l10
												}
												position++
											case 'n':
												if buffer[position] != rune('n') {
													goto l10
												}
												position++
											case 't':
												if buffer[position] != rune('t') {
													goto l10
												}
												position++
											default:
												if buffer[position] != rune('b') {
													goto l10
												}
												position++
											}
										}

										add(ruleescape, position11)
									}
									goto l8
								l10:
									position, tokenIndex = position8, tokenIndex8
									{
										position13, tokenIndex13 := position, tokenIndex
										{
											switch buffer[position] {
											case '\r':
												if buffer[position] != rune('\r') {
													goto l13
												}
												position++
											case '\n':
												if buffer[position] != rune('\n') {
													goto l13
												}
												position++
											case '\\':
												if buffer[position] != rune('\\') {
													goto l13
												}
												position++
											default:
												if buffer[position] != rune('`') {
													goto l13
												}
												position++
											}
										}

										goto l7
									l13:
										position, tokenIndex = position13, tokenIndex13
									}
									if !matchDot() {
										goto l7
									}
								}
							l8:
								goto l6
							l7:
								position, tokenIndex = position7, tokenIndex7
							}
							add(rulePegText, position5)
						}
						if buffer[position] != rune('`') {
							goto l3
						}
						position++
						if !_rules[rulesp]() {
							goto l3
						}
						{
							add(ruleAction34, position)
						}
						add(rulefstring, position4)
					}
					goto l2
				l3:
					position, tokenIndex = position2, tokenIndex2
					if !_rules[rulee1]() {
						goto l0
					}
				}
			l2:
				{
					add(ruleAction0, position)
				}
				add(rulee, position1)
			}
			return true
		l0:
			position, tokenIndex = position0, tokenIndex0
			return false
		},
		/* 1 e1 <- <(e2 ((add Action1 e2 Action2) / (minus Action3 e2 Action4))*)> */
		func() bool {
			position17, tokenIndex17 := position, tokenIndex
			{
				position18 := position
				if !_rules[rulee2]() {
					goto l17
				}
			l19:
				{
					position20, tokenIndex20 := position, tokenIndex
					{
						position21, tokenIndex21 := position, tokenIndex
						if !_rules[ruleadd]() {
							goto l22
						}
						{
							add(ruleAction1, position)
						}
						if !_rules[rulee2]() {
							goto l22
						}
						{
							add(ruleAction2, position)
						}
						goto l21
					l22:
						position, tokenIndex = position21, tokenIndex21
						if !_rules[ruleminus]() {
							goto l20
						}
						{
							add(ruleAction3, position)
						}
						if !_rules[rulee2]() {
							goto l20
						}
						{
							add(ruleAction4, position)
						}
					}
				l21:
					goto l19
				l20:
					position, tokenIndex = position20, tokenIndex20
				}
				add(rulee1, position18)
			}
			return true
		l17:
			position, tokenIndex = position17, tokenIndex17
			return false
		},
		/* 2 e2 <- <(e3 ((&('%') (modulus Action9 e3 Action10)) | (&('/') (divide Action7 e3 Action8)) | (&('*') (multiply Action5 e3 Action6)))*)> */
		func() bool {
			position27, tokenIndex27 := position, tokenIndex
			{
				position28 := position
				if !_rules[rulee3]() {
					goto l27
				}
			l29:
				{
					position30, tokenIndex30 := position, tokenIndex
					{
						switch buffer[position] {
						case '%':
							{
								position32 := position
								if buffer[position] != rune('%') {
									goto l30
								}
								position++
								if !_rules[rulesp]() {
									goto l30
								}
								add(rulemodulus, position32)
							}
							{
								add(ruleAction9, position)
							}
							if !_rules[rulee3]() {
								goto l30
							}
							{
								add(ruleAction10, position)
							}
						case '/':
							{
								position35 := position
								if buffer[position] != rune('/') {
									goto l30
								}
								position++
								if !_rules[rulesp]() {
									goto l30
								}
								add(ruledivide, position35)
							}
							{
								add(ruleAction7, position)
							}
							if !_rules[rulee3]() {
								goto l30
							}
							{
								add(ruleAction8, position)
							}
						default:
							{
								position38 := position
								if buffer[position] != rune('*') {
									goto l30
								}
								position++
								if !_rules[rulesp]() {
									goto l30
								}
								add(rulemultiply, position38)
							}
							{
								add(ruleAction5, position)
							}
							if !_rules[rulee3]() {
								goto l30
							}
							{
								add(ruleAction6, position)
							}
						}
					}

					goto l29
				l30:
					position, tokenIndex = position30, tokenIndex30
				}
				add(rulee2, position28)
			}
			return true
		l27:
			position, tokenIndex = position27, tokenIndex27
			return false
		},
		/* 3 e3 <- <(e4 (exponentiation Action11 e4 Action12)*)> */
		func() bool {
			position41, tokenIndex41 := position, tokenIndex
			{
				position42 := position
				if !_rules[rulee4]() {
					goto l41
				}
			l43:
				{
					position44, tokenIndex44 := position, tokenIndex
					{
						position45 := position
						{
							position46, tokenIndex46 := position, tokenIndex
							if buffer[position] != rune('^') {
								goto l47
							}
							position++
							if !_rules[rulesp]() {
								goto l47
							}
							goto l46
						l47:
							position, tokenIndex = position46, tokenIndex46
							if buffer[position] != rune('*') {
								goto l44
							}
							position++
							if buffer[position] != rune('*') {
								goto l44
							}
							position++
							if !_rules[rulesp]() {
								goto l44
							}
						}
					l46:
						add(ruleexponentiation, position45)
					}
					{
						add(ruleAction11, position)
					}
					if !_rules[rulee4]() {
						goto l44
					}
					{
						add(ruleAction12, position)
					}
					goto l43
				l44:
					position, tokenIndex = position44, tokenIndex44
				}
				add(rulee3, position42)
			}
			return true
		l41:
			position, tokenIndex = position41, tokenIndex41
			return false
		},
		/* 4 e4 <- <((minus e5 Action13) / e5)> */
		func() bool {
			position50, tokenIndex50 := position, tokenIndex
			{
				position51 := position
				{
					position52, tokenIndex52 := position, tokenIndex
					if !_rules[ruleminus]() {
						goto l53
					}
					if !_rules[rulee5]() {
						goto l53
					}
					{
						add(ruleAction13, position)
					}
					goto l52
				l53:
					position, tokenIndex = position52, tokenIndex52
					if !_rules[rulee5]() {
						goto l50
					}
				}
			l52:
				add(rulee4, position51)
			}
			return true
		l50:
			position, tokenIndex = position50, tokenIndex50
			return false
		},
		/* 5 e5 <- <((add eDice) / eDice)> */
		func() bool {
			position55, tokenIndex55 := position, tokenIndex
			{
				position56 := position
				{
					position57, tokenIndex57 := position, tokenIndex
					if !_rules[ruleadd]() {
						goto l58
					}
					if !_rules[ruleeDice]() {
						goto l58
					}
					goto l57
				l58:
					position, tokenIndex = position57, tokenIndex57
					if !_rules[ruleeDice]() {
						goto l55
					}
				}
			l57:
				add(rulee5, position56)
			}
			return true
		l55:
			position, tokenIndex = position55, tokenIndex55
			return false
		},
		/* 6 dndDiceSuffix <- <(('优' '势' Action14 sp) / ('劣' '势' Action15 sp))> */
		func() bool {
			position59, tokenIndex59 := position, tokenIndex
			{
				position60 := position
				{
					position61, tokenIndex61 := position, tokenIndex
					if buffer[position] != rune('优') {
						goto l62
					}
					position++
					if buffer[position] != rune('势') {
						goto l62
					}
					position++
					{
						add(ruleAction14, position)
					}
					if !_rules[rulesp]() {
						goto l62
					}
					goto l61
				l62:
					position, tokenIndex = position61, tokenIndex61
					if buffer[position] != rune('劣') {
						goto l59
					}
					position++
					if buffer[position] != rune('势') {
						goto l59
					}
					position++
					{
						add(ruleAction15, position)
					}
					if !_rules[rulesp]() {
						goto l59
					}
				}
			l61:
				add(ruledndDiceSuffix, position60)
			}
			return true
		l59:
			position, tokenIndex = position59, tokenIndex59
			return false
		},
		/* 7 kqDiceOp <- <(('k' eDice2 Action16)? ('q' eDice2 Action17)?)> */
		func() bool {
			{
				position66 := position
				{
					position67, tokenIndex67 := position, tokenIndex
					if buffer[position] != rune('k') {
						goto l67
					}
					position++
					if !_rules[ruleeDice2]() {
						goto l67
					}
					{
						add(ruleAction16, position)
					}
					goto l68
				l67:
					position, tokenIndex = position67, tokenIndex67
				}
			l68:
				{
					position70, tokenIndex70 := position, tokenIndex
					if buffer[position] != rune('q') {
						goto l70
					}
					position++
					if !_rules[ruleeDice2]() {
						goto l70
					}
					{
						add(ruleAction17, position)
					}
					goto l71
				l70:
					position, tokenIndex = position70, tokenIndex70
				}
			l71:
				add(rulekqDiceOp, position66)
			}
			return true
		},
		/* 8 _dnumber <- <&(('d' / 'D') (number / '('))> */
		func() bool {
			position73, tokenIndex73 := position, tokenIndex
			{
				position74 := position
				{
					position75, tokenIndex75 := position, tokenIndex
					{
						position76, tokenIndex76 := position, tokenIndex
						if buffer[position] != rune('d') {
							goto l77
						}
						position++
						goto l76
					l77:
						position, tokenIndex = position76, tokenIndex76
						if buffer[position] != rune('D') {
							goto l73
						}
						position++
					}
				l76:
					{
						position78, tokenIndex78 := position, tokenIndex
						if !_rules[rulenumber]() {
							goto l79
						}
						goto l78
					l79:
						position, tokenIndex = position78, tokenIndex78
						if buffer[position] != rune('(') {
							goto l73
						}
						position++
					}
				l78:
					position, tokenIndex = position75, tokenIndex75
				}
				add(rule_dnumber, position74)
			}
			return true
		l73:
			position, tokenIndex = position73, tokenIndex73
			return false
		},
		/* 9 eDice <- <((_dnumber ('d' / 'D') Action18 eDice2 dndDiceSuffix Action19) / (_dnumber ('d' / 'D') Action20 eDice2 kqDiceOp Action21) / (('d' / 'D') dndDiceSuffix Action22) / (('d' / 'D') Action23) / (eDice2 (('d' / 'D') Action24 &(number / '(') eDice2 kqDiceOp Action25)*))> */
		func() bool {
			position80, tokenIndex80 := position, tokenIndex
			{
				position81 := position
				{
					position82, tokenIndex82 := position, tokenIndex
					if !_rules[rule_dnumber]() {
						goto l83
					}
					{
						position84, tokenIndex84 := position, tokenIndex
						if buffer[position] != rune('d') {
							goto l85
						}
						position++
						goto l84
					l85:
						position, tokenIndex = position84, tokenIndex84
						if buffer[position] != rune('D') {
							goto l83
						}
						position++
					}
				l84:
					{
						add(ruleAction18, position)
					}
					if !_rules[ruleeDice2]() {
						goto l83
					}
					if !_rules[ruledndDiceSuffix]() {
						goto l83
					}
					{
						add(ruleAction19, position)
					}
					goto l82
				l83:
					position, tokenIndex = position82, tokenIndex82
					if !_rules[rule_dnumber]() {
						goto l88
					}
					{
						position89, tokenIndex89 := position, tokenIndex
						if buffer[position] != rune('d') {
							goto l90
						}
						position++
						goto l89
					l90:
						position, tokenIndex = position89, tokenIndex89
						if buffer[position] != rune('D') {
							goto l88
						}
						position++
					}
				l89:
					{
						add(ruleAction20, position)
					}
					if !_rules[ruleeDice2]() {
						goto l88
					}
					if !_rules[rulekqDiceOp]() {
						goto l88
					}
					{
						add(ruleAction21, position)
					}
					goto l82
				l88:
					position, tokenIndex = position82, tokenIndex82
					{
						position94, tokenIndex94 := position, tokenIndex
						if buffer[position] != rune('d') {
							goto l95
						}
						position++
						goto l94
					l95:
						position, tokenIndex = position94, tokenIndex94
						if buffer[position] != rune('D') {
							goto l93
						}
						position++
					}
				l94:
					if !_rules[ruledndDiceSuffix]() {
						goto l93
					}
					{
						add(ruleAction22, position)
					}
					goto l82
				l93:
					position, tokenIndex = position82, tokenIndex82
					{
						position98, tokenIndex98 := position, tokenIndex
						if buffer[position] != rune('d') {
							goto l99
						}
						position++
						goto l98
					l99:
						position, tokenIndex = position98, tokenIndex98
						if buffer[position] != rune('D') {
							goto l97
						}
						position++
					}
				l98:
					{
						add(ruleAction23, position)
					}
					goto l82
				l97:
					position, tokenIndex = position82, tokenIndex82
					if !_rules[ruleeDice2]() {
						goto l80
					}
				l101:
					{
						position102, tokenIndex102 := position, tokenIndex
						{
							position103, tokenIndex103 := position, tokenIndex
							if buffer[position] != rune('d') {
								goto l104
							}
							position++
							goto l103
						l104:
							position, tokenIndex = position103, tokenIndex103
							if buffer[position] != rune('D') {
								goto l102
							}
							position++
						}
					l103:
						{
							add(ruleAction24, position)
						}
						{
							position106, tokenIndex106 := position, tokenIndex
							{
								position107, tokenIndex107 := position, tokenIndex
								if !_rules[rulenumber]() {
									goto l108
								}
								goto l107
							l108:
								position, tokenIndex = position107, tokenIndex107
								if buffer[position] != rune('(') {
									goto l102
								}
								position++
							}
						l107:
							position, tokenIndex = position106, tokenIndex106
						}
						if !_rules[ruleeDice2]() {
							goto l102
						}
						if !_rules[rulekqDiceOp]() {
							goto l102
						}
						{
							add(ruleAction25, position)
						}
						goto l101
					l102:
						position, tokenIndex = position102, tokenIndex102
					}
				}
			l82:
				add(ruleeDice, position81)
			}
			return true
		l80:
			position, tokenIndex = position80, tokenIndex80
			return false
		},
		/* 10 laNumberOrLeftParen <- <&(number / '(')> */
		func() bool {
			position110, tokenIndex110 := position, tokenIndex
			{
				position111 := position
				{
					position112, tokenIndex112 := position, tokenIndex
					{
						position113, tokenIndex113 := position, tokenIndex
						if !_rules[rulenumber]() {
							goto l114
						}
						goto l113
					l114:
						position, tokenIndex = position113, tokenIndex113
						if buffer[position] != rune('(') {
							goto l110
						}
						position++
					}
				l113:
					position, tokenIndex = position112, tokenIndex112
				}
				add(rulelaNumberOrLeftParen, position111)
			}
			return true
		l110:
			position, tokenIndex = position110, tokenIndex110
			return false
		},
		/* 11 eDice2 <- <((('p' / 'P') laNumberOrLeftParen eDice3 Action26) / (('p' / 'P') Action27) / eDice3)> */
		func() bool {
			position115, tokenIndex115 := position, tokenIndex
			{
				position116 := position
				{
					position117, tokenIndex117 := position, tokenIndex
					{
						position119, tokenIndex119 := position, tokenIndex
						if buffer[position] != rune('p') {
							goto l120
						}
						position++
						goto l119
					l120:
						position, tokenIndex = position119, tokenIndex119
						if buffer[position] != rune('P') {
							goto l118
						}
						position++
					}
				l119:
					if !_rules[rulelaNumberOrLeftParen]() {
						goto l118
					}
					if !_rules[ruleeDice3]() {
						goto l118
					}
					{
						add(ruleAction26, position)
					}
					goto l117
				l118:
					position, tokenIndex = position117, tokenIndex117
					{
						position123, tokenIndex123 := position, tokenIndex
						if buffer[position] != rune('p') {
							goto l124
						}
						position++
						goto l123
					l124:
						position, tokenIndex = position123, tokenIndex123
						if buffer[position] != rune('P') {
							goto l122
						}
						position++
					}
				l123:
					{
						add(ruleAction27, position)
					}
					goto l117
				l122:
					position, tokenIndex = position117, tokenIndex117
					if !_rules[ruleeDice3]() {
						goto l115
					}
				}
			l117:
				add(ruleeDice2, position116)
			}
			return true
		l115:
			position, tokenIndex = position115, tokenIndex115
			return false
		},
		/* 12 eDice3 <- <((('b' / 'B') laNumberOrLeftParen value Action28) / (('b' / 'B') Action29) / value)> */
		func() bool {
			position126, tokenIndex126 := position, tokenIndex
			{
				position127 := position
				{
					position128, tokenIndex128 := position, tokenIndex
					{
						position130, tokenIndex130 := position, tokenIndex
						if buffer[position] != rune('b') {
							goto l131
						}
						position++
						goto l130
					l131:
						position, tokenIndex = position130, tokenIndex130
						if buffer[position] != rune('B') {
							goto l129
						}
						position++
					}
				l130:
					if !_rules[rulelaNumberOrLeftParen]() {
						goto l129
					}
					if !_rules[rulevalue]() {
						goto l129
					}
					{
						add(ruleAction28, position)
					}
					goto l128
				l129:
					position, tokenIndex = position128, tokenIndex128
					{
						position134, tokenIndex134 := position, tokenIndex
						if buffer[position] != rune('b') {
							goto l135
						}
						position++
						goto l134
					l135:
						position, tokenIndex = position134, tokenIndex134
						if buffer[position] != rune('B') {
							goto l133
						}
						position++
					}
				l134:
					{
						add(ruleAction29, position)
					}
					goto l128
				l133:
					position, tokenIndex = position128, tokenIndex128
					if !_rules[rulevalue]() {
						goto l126
					}
				}
			l128:
				add(ruleeDice3, position127)
			}
			return true
		l126:
			position, tokenIndex = position126, tokenIndex126
			return false
		},
		/* 13 value <- <(number / assign_expr / (identifier Action30) / sub)> */
		func() bool {
			position137, tokenIndex137 := position, tokenIndex
			{
				position138 := position
				{
					position139, tokenIndex139 := position, tokenIndex
					if !_rules[rulenumber]() {
						goto l140
					}
					goto l139
				l140:
					position, tokenIndex = position139, tokenIndex139
					{
						position142 := position
						if !_rules[ruleidentifier]() {
							goto l141
						}
						{
							add(ruleAction32, position)
						}
						if buffer[position] != rune('=') {
							goto l141
						}
						position++
						if !_rules[rulee1]() {
							goto l141
						}
						{
							add(ruleAction33, position)
						}
						add(ruleassign_expr, position142)
					}
					goto l139
				l141:
					position, tokenIndex = position139, tokenIndex139
					if !_rules[ruleidentifier]() {
						goto l145
					}
					{
						add(ruleAction30, position)
					}
					goto l139
				l145:
					position, tokenIndex = position139, tokenIndex139
					{
						position147 := position
						{
							position148 := position
							if buffer[position] != rune('(') {
								goto l137
							}
							position++
							if !_rules[rulesp]() {
								goto l137
							}
							add(ruleopen, position148)
						}
						if !_rules[rulee1]() {
							goto l137
						}
						{
							position149 := position
							if buffer[position] != rune(')') {
								goto l137
							}
							position++
							if !_rules[rulesp]() {
								goto l137
							}
							add(ruleclose, position149)
						}
						add(rulesub, position147)
					}
				}
			l139:
				add(rulevalue, position138)
			}
			return true
		l137:
			position, tokenIndex = position137, tokenIndex137
			return false
		},
		/* 14 number <- <(<[0-9]+> sp Action31)> */
		func() bool {
			position150, tokenIndex150 := position, tokenIndex
			{
				position151 := position
				{
					position152 := position
					if c := buffer[position]; c < rune('0') || c > rune('9') {
						goto l150
					}
					position++
				l153:
					{
						position154, tokenIndex154 := position, tokenIndex
						if c := buffer[position]; c < rune('0') || c > rune('9') {
							goto l154
						}
						position++
						goto l153
					l154:
						position, tokenIndex = position154, tokenIndex154
					}
					add(rulePegText, position152)
				}
				if !_rules[rulesp]() {
					goto l150
				}
				{
					add(ruleAction31, position)
				}
				add(rulenumber, position151)
			}
			return true
		l150:
			position, tokenIndex = position150, tokenIndex150
			return false
		},
		/* 15 assign_expr <- <(identifier Action32 '=' e1 Action33)> */
		nil,
		/* 16 identifier <- <(<(!((&('\r') '\r') | (&('\n') '\n') | (&('\t') '\t') | (&(' ') ' ') | (&('~') '~') | (&('}') '}') | (&('|') '|') | (&('{') '{') | (&('`') '`') | (&('^') '^') | (&(']') ']') | (&('\\') '\\') | (&('[') '[') | (&('@') '@') | (&('?') '?') | (&('>') '>') | (&('=') '=') | (&('<') '<') | (&(';') ';') | (&(':') ':') | (&('/') '/') | (&('+') '+') | (&('*') '*') | (&(')') ')') | (&('(') '(') | (&('\'') '\'') | (&('&') '&') | (&('%') '%') | (&('#') '#') | (&('"') '"') | (&('!') '!') | (&(',' | '-' | '.') [,-.]) | (&('0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9') [0-9])) . (!((&('\r') '\r') | (&('\n') '\n') | (&('\t') '\t') | (&(' ') ' ') | (&('~') '~') | (&('}') '}') | (&('|') '|') | (&('{') '{') | (&('`') '`') | (&('^') '^') | (&(']') ']') | (&('\\') '\\') | (&('[') '[') | (&('@') '@') | (&('?') '?') | (&('>') '>') | (&('=') '=') | (&('<') '<') | (&(';') ';') | (&('/') '/') | (&('+') '+') | (&('*') '*') | (&(')') ')') | (&('(') '(') | (&('\'') '\'') | (&('&') '&') | (&('%') '%') | (&('$') '$') | (&('#') '#') | (&('"') '"') | (&('!') '!') | (&(',' | '-' | '.') [,-.])) .)*)> sp)> */
		func() bool {
			position157, tokenIndex157 := position, tokenIndex
			{
				position158 := position
				{
					position159 := position
					{
						position160, tokenIndex160 := position, tokenIndex
						{
							switch buffer[position] {
							case '\r':
								if buffer[position] != rune('\r') {
									goto l160
								}
								position++
							case '\n':
								if buffer[position] != rune('\n') {
									goto l160
								}
								position++
							case '\t':
								if buffer[position] != rune('\t') {
									goto l160
								}
								position++
							case ' ':
								if buffer[position] != rune(' ') {
									goto l160
								}
								position++
							case '~':
								if buffer[position] != rune('~') {
									goto l160
								}
								position++
							case '}':
								if buffer[position] != rune('}') {
									goto l160
								}
								position++
							case '|':
								if buffer[position] != rune('|') {
									goto l160
								}
								position++
							case '{':
								if buffer[position] != rune('{') {
									goto l160
								}
								position++
							case '`':
								if buffer[position] != rune('`') {
									goto l160
								}
								position++
							case '^':
								if buffer[position] != rune('^') {
									goto l160
								}
								position++
							case ']':
								if buffer[position] != rune(']') {
									goto l160
								}
								position++
							case '\\':
								if buffer[position] != rune('\\') {
									goto l160
								}
								position++
							case '[':
								if buffer[position] != rune('[') {
									goto l160
								}
								position++
							case '@':
								if buffer[position] != rune('@') {
									goto l160
								}
								position++
							case '?':
								if buffer[position] != rune('?') {
									goto l160
								}
								position++
							case '>':
								if buffer[position] != rune('>') {
									goto l160
								}
								position++
							case '=':
								if buffer[position] != rune('=') {
									goto l160
								}
								position++
							case '<':
								if buffer[position] != rune('<') {
									goto l160
								}
								position++
							case ';':
								if buffer[position] != rune(';') {
									goto l160
								}
								position++
							case ':':
								if buffer[position] != rune(':') {
									goto l160
								}
								position++
							case '/':
								if buffer[position] != rune('/') {
									goto l160
								}
								position++
							case '+':
								if buffer[position] != rune('+') {
									goto l160
								}
								position++
							case '*':
								if buffer[position] != rune('*') {
									goto l160
								}
								position++
							case ')':
								if buffer[position] != rune(')') {
									goto l160
								}
								position++
							case '(':
								if buffer[position] != rune('(') {
									goto l160
								}
								position++
							case '\'':
								if buffer[position] != rune('\'') {
									goto l160
								}
								position++
							case '&':
								if buffer[position] != rune('&') {
									goto l160
								}
								position++
							case '%':
								if buffer[position] != rune('%') {
									goto l160
								}
								position++
							case '#':
								if buffer[position] != rune('#') {
									goto l160
								}
								position++
							case '"':
								if buffer[position] != rune('"') {
									goto l160
								}
								position++
							case '!':
								if buffer[position] != rune('!') {
									goto l160
								}
								position++
							case ',', '-', '.':
								if c := buffer[position]; c < rune(',') || c > rune('.') {
									goto l160
								}
								position++
							default:
								if c := buffer[position]; c < rune('0') || c > rune('9') {
									goto l160
								}
								position++
							}
						}

						goto l157
					l160:
						position, tokenIndex = position160, tokenIndex160
					}
					if !matchDot() {
						goto l157
					}
				l162:
					{
						position163, tokenIndex163 := position, tokenIndex
						{
							position164, tokenIndex164 := position, tokenIndex
							{
								switch buffer[position] {
								case '\r':
									if buffer[position] != rune('\r') {
										goto l164
									}
									position++
								case '\n':
									if buffer[position] != rune('\n') {
										goto l164
									}
									position++
								case '\t':
									if buffer[position] != rune('\t') {
										goto l164
									}
									position++
								case ' ':
									if buffer[position] != rune(' ') {
										goto l164
									}
									position++
								case '~':
									if buffer[position] != rune('~') {
										goto l164
									}
									position++
								case '}':
									if buffer[position] != rune('}') {
										goto l164
									}
									position++
								case '|':
									if buffer[position] != rune('|') {
										goto l164
									}
									position++
								case '{':
									if buffer[position] != rune('{') {
										goto l164
									}
									position++
								case '`':
									if buffer[position] != rune('`') {
										goto l164
									}
									position++
								case '^':
									if buffer[position] != rune('^') {
										goto l164
									}
									position++
								case ']':
									if buffer[position] != rune(']') {
										goto l164
									}
									position++
								case '\\':
									if buffer[position] != rune('\\') {
										goto l164
									}
									position++
								case '[':
									if buffer[position] != rune('[') {
										goto l164
									}
									position++
								case '@':
									if buffer[position] != rune('@') {
										goto l164
									}
									position++
								case '?':
									if buffer[position] != rune('?') {
										goto l164
									}
									position++
								case '>':
									if buffer[position] != rune('>') {
										goto l164
									}
									position++
								case '=':
									if buffer[position] != rune('=') {
										goto l164
									}
									position++
								case '<':
									if buffer[position] != rune('<') {
										goto l164
									}
									position++
								case ';':
									if buffer[position] != rune(';') {
										goto l164
									}
									position++
								case '/':
									if buffer[position] != rune('/') {
										goto l164
									}
									position++
								case '+':
									if buffer[position] != rune('+') {
										goto l164
									}
									position++
								case '*':
									if buffer[position] != rune('*') {
										goto l164
									}
									position++
								case ')':
									if buffer[position] != rune(')') {
										goto l164
									}
									position++
								case '(':
									if buffer[position] != rune('(') {
										goto l164
									}
									position++
								case '\'':
									if buffer[position] != rune('\'') {
										goto l164
									}
									position++
								case '&':
									if buffer[position] != rune('&') {
										goto l164
									}
									position++
								case '%':
									if buffer[position] != rune('%') {
										goto l164
									}
									position++
								case '$':
									if buffer[position] != rune('$') {
										goto l164
									}
									position++
								case '#':
									if buffer[position] != rune('#') {
										goto l164
									}
									position++
								case '"':
									if buffer[position] != rune('"') {
										goto l164
									}
									position++
								case '!':
									if buffer[position] != rune('!') {
										goto l164
									}
									position++
								default:
									if c := buffer[position]; c < rune(',') || c > rune('.') {
										goto l164
									}
									position++
								}
							}

							goto l163
						l164:
							position, tokenIndex = position164, tokenIndex164
						}
						if !matchDot() {
							goto l163
						}
						goto l162
					l163:
						position, tokenIndex = position163, tokenIndex163
					}
					add(rulePegText, position159)
				}
				if !_rules[rulesp]() {
					goto l157
				}
				add(ruleidentifier, position158)
			}
			return true
		l157:
			position, tokenIndex = position157, tokenIndex157
			return false
		},
		/* 17 sub <- <(open e1 close)> */
		nil,
		/* 18 add <- <('+' sp)> */
		func() bool {
			position167, tokenIndex167 := position, tokenIndex
			{
				position168 := position
				if buffer[position] != rune('+') {
					goto l167
				}
				position++
				if !_rules[rulesp]() {
					goto l167
				}
				add(ruleadd, position168)
			}
			return true
		l167:
			position, tokenIndex = position167, tokenIndex167
			return false
		},
		/* 19 minus <- <('-' sp)> */
		func() bool {
			position169, tokenIndex169 := position, tokenIndex
			{
				position170 := position
				if buffer[position] != rune('-') {
					goto l169
				}
				position++
				if !_rules[rulesp]() {
					goto l169
				}
				add(ruleminus, position170)
			}
			return true
		l169:
			position, tokenIndex = position169, tokenIndex169
			return false
		},
		/* 20 multiply <- <('*' sp)> */
		nil,
		/* 21 divide <- <('/' sp)> */
		nil,
		/* 22 modulus <- <('%' sp)> */
		nil,
		/* 23 exponentiation <- <(('^' sp) / ('*' '*' sp))> */
		nil,
		/* 24 open <- <('(' sp)> */
		nil,
		/* 25 close <- <(')' sp)> */
		nil,
		/* 26 sp <- <(' ' / '\t')*> */
		func() bool {
			{
				position178 := position
			l179:
				{
					position180, tokenIndex180 := position, tokenIndex
					{
						position181, tokenIndex181 := position, tokenIndex
						if buffer[position] != rune(' ') {
							goto l182
						}
						position++
						goto l181
					l182:
						position, tokenIndex = position181, tokenIndex181
						if buffer[position] != rune('\t') {
							goto l180
						}
						position++
					}
				l181:
					goto l179
				l180:
					position, tokenIndex = position180, tokenIndex180
				}
				add(rulesp, position178)
			}
			return true
		},
		/* 27 fstring <- <('`' <(('{' sp e1 sp '}') / escape / (!((&('\r') '\r') | (&('\n') '\n') | (&('\\') '\\') | (&('`') '`')) .))*> '`' sp Action34)> */
		nil,
		/* 28 escape <- <('\\' ((&('\\') '\\') | (&('\'') '\'') | (&('"') '"') | (&('r') 'r') | (&('f') 'f') | (&('n') 'n') | (&('t') 't') | (&('b') 'b')))> */
		nil,
		/* 30 Action0 <- <{ p.AddOperator(TypeHalt) }> */
		nil,
		/* 31 Action1 <- <{ p.AddLeftValueMark() }> */
		nil,
		/* 32 Action2 <- <{ p.AddOperator(TypeAdd) }> */
		nil,
		/* 33 Action3 <- <{ p.AddLeftValueMark() }> */
		nil,
		/* 34 Action4 <- <{ p.AddOperator(TypeSubtract) }> */
		nil,
		/* 35 Action5 <- <{ p.AddLeftValueMark() }> */
		nil,
		/* 36 Action6 <- <{ p.AddOperator(TypeMultiply) }> */
		nil,
		/* 37 Action7 <- <{ p.AddLeftValueMark() }> */
		nil,
		/* 38 Action8 <- <{ p.AddOperator(TypeDivide) }> */
		nil,
		/* 39 Action9 <- <{ p.AddLeftValueMark() }> */
		nil,
		/* 40 Action10 <- <{ p.AddOperator(TypeModulus) }> */
		nil,
		/* 41 Action11 <- <{ p.AddLeftValueMark() }> */
		nil,
		/* 42 Action12 <- <{ p.AddOperator(TypeExponentiation) }> */
		nil,
		/* 43 Action13 <- <{ p.AddOperator(TypeNegation) }> */
		nil,
		/* 44 Action14 <- <{p.AddValue("1"); p.AddOperator(TypeDiceSetK)}> */
		nil,
		/* 45 Action15 <- <{p.AddValue("1"); p.AddOperator(TypeDiceSetQ)}> */
		nil,
		/* 46 Action16 <- <{ p.AddOperator(TypeDiceSetK) }> */
		nil,
		/* 47 Action17 <- <{ p.AddOperator(TypeDiceSetQ) }> */
		nil,
		/* 48 Action18 <- <{ p.AddValue("2"); p.AddLeftValueMark() }> */
		nil,
		/* 49 Action19 <- <{ p.AddOperator(TypeDice) }> */
		nil,
		/* 50 Action20 <- <{ p.AddValue("1"); p.AddLeftValueMark() }> */
		nil,
		/* 51 Action21 <- <{ p.AddOperator(TypeDice) }> */
		nil,
		/* 52 Action22 <- <{ p.AddValue("2"); p.AddLeftValueMark(); p.AddValue("0"); p.AddOperator(TypeDice) }> */
		nil,
		/* 53 Action23 <- <{ p.AddValue("1"); p.AddLeftValueMark(); p.AddValue("0"); p.AddOperator(TypeDice) }> */
		nil,
		/* 54 Action24 <- <{ p.AddLeftValueMark() }> */
		nil,
		/* 55 Action25 <- <{ p.AddOperator(TypeDice) }> */
		nil,
		/* 56 Action26 <- <{ p.AddOperator(TypeDicePenalty) }> */
		nil,
		/* 57 Action27 <- <{ p.AddValue("1"); p.AddOperator(TypeDicePenalty) }> */
		nil,
		/* 58 Action28 <- <{ p.AddOperator(TypeDiceBonus) }> */
		nil,
		/* 59 Action29 <- <{ p.AddValue("1"); p.AddOperator(TypeDiceBonus) }> */
		nil,
		/* 60 Action30 <- <{ p.AddLoadVarname(string(text)) }> */
		nil,
		nil,
		/* 62 Action31 <- <{ p.AddValue(string(text)) }> */
		nil,
		/* 63 Action32 <- <{ p.AddValueStr(string(text)) }> */
		nil,
		/* 64 Action33 <- <{ p.AddStore() }> */
		nil,
		/* 65 Action34 <- <{ p.AddFormatString(string(text)) }> */
		nil,
	}
	p.rules = _rules
	return nil
}
