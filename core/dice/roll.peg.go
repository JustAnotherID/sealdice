package dice

// Code generated by C:\Users\fy0\go\bin\peg.exe -switch -inline dice/roll.peg DO NOT EDIT.

import (
	"fmt"
	"io"
	"os"
	"sort"
	"strconv"
	"strings"
)

const endSymbol rune = 1114112

/* The rule types inferred from the grammar are below. */
type pegRule uint8

const (
	ruleUnknown pegRule = iota
	ruleeBase
	rulee
	ruleeOne
	ruleassign_expr
	rulee0
	ruleeSimpleSwitch
	ruleeTernary
	ruleeBitwise
	ruleeComp
	rulee1
	rulee2
	rulee3
	rulee4
	rulee5
	ruledndDiceSuffix
	rulekqDiceOp
	rule_dnumber
	ruleeDice
	rulelaNumberOrLeftParen
	ruleeDice2
	ruleeDice3
	ruleeDice4
	rulevalue
	rulenumber
	ruleidentifier
	rulesub
	ruleadd
	ruleminus
	rulemultiply
	ruledivide
	rulemodulus
	ruleexponentiation
	ruleopen
	ruleclose
	rulebitwiseOr
	rulelogicOr
	rulebitwiseAnd
	rulelogicAnd
	rulesp
	rulelt
	rulegt
	rulele
	rulege
	ruleeq
	rulene
	rulestrPart
	rulestrPart2
	rulestrPart3
	rulefstring
	ruleescape
	ruleAction0
	ruleAction1
	ruleAction2
	ruleAction3
	ruleAction4
	ruleAction5
	ruleAction6
	ruleAction7
	ruleAction8
	ruleAction9
	ruleAction10
	ruleAction11
	ruleAction12
	ruleAction13
	ruleAction14
	ruleAction15
	ruleAction16
	ruleAction17
	ruleAction18
	ruleAction19
	ruleAction20
	ruleAction21
	ruleAction22
	ruleAction23
	ruleAction24
	ruleAction25
	ruleAction26
	ruleAction27
	ruleAction28
	ruleAction29
	ruleAction30
	ruleAction31
	ruleAction32
	ruleAction33
	ruleAction34
	ruleAction35
	ruleAction36
	ruleAction37
	ruleAction38
	ruleAction39
	ruleAction40
	ruleAction41
	ruleAction42
	ruleAction43
	ruleAction44
	ruleAction45
	ruleAction46
	ruleAction47
	ruleAction48
	ruleAction49
	ruleAction50
	ruleAction51
	ruleAction52
	ruleAction53
	ruleAction54
	ruleAction55
	ruleAction56
	ruleAction57
	ruleAction58
	ruleAction59
	ruleAction60
	rulePegText
	ruleAction61
	ruleAction62
	ruleAction63
	ruleAction64
	ruleAction65
	ruleAction66
	ruleAction67
	ruleAction68
	ruleAction69
	ruleAction70
	ruleAction71
	ruleAction72
)

var rul3s = [...]string{
	"Unknown",
	"eBase",
	"e",
	"eOne",
	"assign_expr",
	"e0",
	"eSimpleSwitch",
	"eTernary",
	"eBitwise",
	"eComp",
	"e1",
	"e2",
	"e3",
	"e4",
	"e5",
	"dndDiceSuffix",
	"kqDiceOp",
	"_dnumber",
	"eDice",
	"laNumberOrLeftParen",
	"eDice2",
	"eDice3",
	"eDice4",
	"value",
	"number",
	"identifier",
	"sub",
	"add",
	"minus",
	"multiply",
	"divide",
	"modulus",
	"exponentiation",
	"open",
	"close",
	"bitwiseOr",
	"logicOr",
	"bitwiseAnd",
	"logicAnd",
	"sp",
	"lt",
	"gt",
	"le",
	"ge",
	"eq",
	"ne",
	"strPart",
	"strPart2",
	"strPart3",
	"fstring",
	"escape",
	"Action0",
	"Action1",
	"Action2",
	"Action3",
	"Action4",
	"Action5",
	"Action6",
	"Action7",
	"Action8",
	"Action9",
	"Action10",
	"Action11",
	"Action12",
	"Action13",
	"Action14",
	"Action15",
	"Action16",
	"Action17",
	"Action18",
	"Action19",
	"Action20",
	"Action21",
	"Action22",
	"Action23",
	"Action24",
	"Action25",
	"Action26",
	"Action27",
	"Action28",
	"Action29",
	"Action30",
	"Action31",
	"Action32",
	"Action33",
	"Action34",
	"Action35",
	"Action36",
	"Action37",
	"Action38",
	"Action39",
	"Action40",
	"Action41",
	"Action42",
	"Action43",
	"Action44",
	"Action45",
	"Action46",
	"Action47",
	"Action48",
	"Action49",
	"Action50",
	"Action51",
	"Action52",
	"Action53",
	"Action54",
	"Action55",
	"Action56",
	"Action57",
	"Action58",
	"Action59",
	"Action60",
	"PegText",
	"Action61",
	"Action62",
	"Action63",
	"Action64",
	"Action65",
	"Action66",
	"Action67",
	"Action68",
	"Action69",
	"Action70",
	"Action71",
	"Action72",
}

type token32 struct {
	pegRule
	begin, end uint32
}

func (t *token32) String() string {
	return fmt.Sprintf("\x1B[34m%v\x1B[m %v %v", rul3s[t.pegRule], t.begin, t.end)
}

type node32 struct {
	token32
	up, next *node32
}

func (node *node32) print(w io.Writer, pretty bool, buffer string) {
	var print func(node *node32, depth int)
	print = func(node *node32, depth int) {
		for node != nil {
			for c := 0; c < depth; c++ {
				fmt.Fprintf(w, " ")
			}
			rule := rul3s[node.pegRule]
			quote := strconv.Quote(string(([]rune(buffer)[node.begin:node.end])))
			if !pretty {
				fmt.Fprintf(w, "%v %v\n", rule, quote)
			} else {
				fmt.Fprintf(w, "\x1B[36m%v\x1B[m %v\n", rule, quote)
			}
			if node.up != nil {
				print(node.up, depth+1)
			}
			node = node.next
		}
	}
	print(node, 0)
}

func (node *node32) Print(w io.Writer, buffer string) {
	node.print(w, false, buffer)
}

func (node *node32) PrettyPrint(w io.Writer, buffer string) {
	node.print(w, true, buffer)
}

type tokens32 struct {
	tree []token32
}

func (t *tokens32) Trim(length uint32) {
	t.tree = t.tree[:length]
}

func (t *tokens32) Print() {
	for _, token := range t.tree {
		fmt.Println(token.String())
	}
}

func (t *tokens32) AST() *node32 {
	type element struct {
		node *node32
		down *element
	}
	tokens := t.Tokens()
	var stack *element
	for _, token := range tokens {
		if token.begin == token.end {
			continue
		}
		node := &node32{token32: token}
		for stack != nil && stack.node.begin >= token.begin && stack.node.end <= token.end {
			stack.node.next = node.up
			node.up = stack.node
			stack = stack.down
		}
		stack = &element{node: node, down: stack}
	}
	if stack != nil {
		return stack.node
	}
	return nil
}

func (t *tokens32) PrintSyntaxTree(buffer string) {
	t.AST().Print(os.Stdout, buffer)
}

func (t *tokens32) WriteSyntaxTree(w io.Writer, buffer string) {
	t.AST().Print(w, buffer)
}

func (t *tokens32) PrettyPrintSyntaxTree(buffer string) {
	t.AST().PrettyPrint(os.Stdout, buffer)
}

func (t *tokens32) Add(rule pegRule, begin, end, index uint32) {
	tree, i := t.tree, int(index)
	if i >= len(tree) {
		t.tree = append(tree, token32{pegRule: rule, begin: begin, end: end})
		return
	}
	tree[i] = token32{pegRule: rule, begin: begin, end: end}
}

func (t *tokens32) Tokens() []token32 {
	return t.tree
}

type DiceRollParser struct {
	RollExpression

	Buffer string
	buffer []rune
	rules  [125]func() bool
	parse  func(rule ...int) error
	reset  func()
	Pretty bool
	tokens32
}

func (p *DiceRollParser) Parse(rule ...int) error {
	return p.parse(rule...)
}

func (p *DiceRollParser) Reset() {
	p.reset()
}

type textPosition struct {
	line, symbol int
}

type textPositionMap map[int]textPosition

func translatePositions(buffer []rune, positions []int) textPositionMap {
	length, translations, j, line, symbol := len(positions), make(textPositionMap, len(positions)), 0, 1, 0
	sort.Ints(positions)

search:
	for i, c := range buffer {
		if c == '\n' {
			line, symbol = line+1, 0
		} else {
			symbol++
		}
		if i == positions[j] {
			translations[positions[j]] = textPosition{line, symbol}
			for j++; j < length; j++ {
				if i != positions[j] {
					continue search
				}
			}
			break search
		}
	}

	return translations
}

type parseError struct {
	p   *DiceRollParser
	max token32
}

func (e *parseError) Error() string {
	tokens, err := []token32{e.max}, "\n"
	positions, p := make([]int, 2*len(tokens)), 0
	for _, token := range tokens {
		positions[p], p = int(token.begin), p+1
		positions[p], p = int(token.end), p+1
	}
	translations := translatePositions(e.p.buffer, positions)
	format := "parse error near %v (line %v symbol %v - line %v symbol %v):\n%v\n"
	if e.p.Pretty {
		format = "parse error near \x1B[34m%v\x1B[m (line %v symbol %v - line %v symbol %v):\n%v\n"
	}
	for _, token := range tokens {
		begin, end := int(token.begin), int(token.end)
		err += fmt.Sprintf(format,
			rul3s[token.pegRule],
			translations[begin].line, translations[begin].symbol,
			translations[end].line, translations[end].symbol,
			strconv.Quote(string(e.p.buffer[begin:end])))
	}

	return err
}

func (p *DiceRollParser) PrintSyntaxTree() {
	if p.Pretty {
		p.tokens32.PrettyPrintSyntaxTree(p.Buffer)
	} else {
		p.tokens32.PrintSyntaxTree(p.Buffer)
	}
}

func (p *DiceRollParser) WriteSyntaxTree(w io.Writer) {
	p.tokens32.WriteSyntaxTree(w, p.Buffer)
}

func (p *DiceRollParser) SprintSyntaxTree() string {
	var bldr strings.Builder
	p.WriteSyntaxTree(&bldr)
	return bldr.String()
}

func (p *DiceRollParser) Execute() {
	buffer, _buffer, text, begin, end := p.Buffer, p.buffer, "", 0, 0
	for _, token := range p.Tokens() {
		switch token.pegRule {

		case rulePegText:
			begin, end = int(token.begin), int(token.end)
			text = string(_buffer[begin:end])

		case ruleAction0:
			p.AddOperator(TypeHalt)
		case ruleAction1:
			p.AddOperator(TypeClearDetail)
		case ruleAction2:
			p.AddValueStr(string(text))
		case ruleAction3:
			p.AddStore()
		case ruleAction4:
			p.AddOperator(TypeJne)
			p.PushForOffset()
		case ruleAction5:
			p.AddOperator(TypeJmp)
			p.PopAndSetOffset()
			p.PushForOffset()
		case ruleAction6:
			p.AddOperator(TypeJne)
			p.PushForOffset()
		case ruleAction7:
			p.AddOperator(TypeJmp)
			p.PopAndSetOffset()
			p.PushForOffset()
		case ruleAction8:
			p.PopAndSetOffset()
		case ruleAction9:
			p.CounterPush()
		case ruleAction10:
			p.CounterAdd(1)
		case ruleAction11:
			p.AddValueStr("")
			limit := p.CounterPop() + 1
			for i := int64(0); i < limit; i++ {
				p.PopAndSetOffset()
			}
		case ruleAction12:
			p.AddLeftValueMark()
		case ruleAction13:
			p.AddOperator(TypeBitwiseOr)
		case ruleAction14:
			p.AddLeftValueMark()
		case ruleAction15:
			p.AddOperator(TypeBitwiseAnd)
		case ruleAction16:
			p.AddLeftValueMark()
		case ruleAction17:
			p.AddOperator(TypeCompLT)
		case ruleAction18:
			p.AddLeftValueMark()
		case ruleAction19:
			p.AddOperator(TypeCompLE)
		case ruleAction20:
			p.AddLeftValueMark()
		case ruleAction21:
			p.AddOperator(TypeCompEQ)
		case ruleAction22:
			p.AddLeftValueMark()
		case ruleAction23:
			p.AddOperator(TypeCompNE)
		case ruleAction24:
			p.AddLeftValueMark()
		case ruleAction25:
			p.AddOperator(TypeCompGE)
		case ruleAction26:
			p.AddLeftValueMark()
		case ruleAction27:
			p.AddOperator(TypeCompGT)
		case ruleAction28:
			p.AddLeftValueMark()
		case ruleAction29:
			p.AddOperator(TypeAdd)
		case ruleAction30:
			p.AddLeftValueMark()
		case ruleAction31:
			p.AddOperator(TypeSubtract)
		case ruleAction32:
			p.AddLeftValueMark()
		case ruleAction33:
			p.AddOperator(TypeMultiply)
		case ruleAction34:
			p.AddLeftValueMark()
		case ruleAction35:
			p.AddOperator(TypeDivide)
		case ruleAction36:
			p.AddLeftValueMark()
		case ruleAction37:
			p.AddOperator(TypeModulus)
		case ruleAction38:
			p.AddLeftValueMark()
		case ruleAction39:
			p.AddOperator(TypeExponentiation)
		case ruleAction40:
			p.AddOperator(TypeNegation)
		case ruleAction41:
			p.AddValue("1")
			p.AddOperator(TypeDiceSetK)
		case ruleAction42:
			p.AddValue("1")
			p.AddOperator(TypeDiceSetQ)
		case ruleAction43:
			p.AddOperator(TypeDiceSetK)
		case ruleAction44:
			p.AddOperator(TypeDiceSetQ)
		case ruleAction45:
			p.AddOperatorWithInt64(TypeDiceSetK, 1)
		case ruleAction46:
			p.AddOperatorWithInt64(TypeDiceSetQ, 1)
		case ruleAction47:
			p.AddValue("2")
			p.AddLeftValueMark()
		case ruleAction48:
			p.AddOperator(TypeDice)
		case ruleAction49:
			p.AddValue("1")
			p.AddLeftValueMark()
		case ruleAction50:
			p.AddOperator(TypeDice)
		case ruleAction51:
			p.AddValue("2")
			p.AddLeftValueMark()
			p.AddValue("0")
			p.AddOperator(TypeDice)
		case ruleAction52:
			p.AddValue("1")
			p.AddLeftValueMark()
			p.AddValue("0")
			p.AddOperator(TypeDice)
		case ruleAction53:
			p.AddLeftValueMark()
		case ruleAction54:
			p.AddOperator(TypeDice)
		case ruleAction55:
			p.AddOperator(TypeDicePenalty)
		case ruleAction56:
			p.AddValue("1")
			p.AddOperator(TypeDicePenalty)
		case ruleAction57:
			p.AddOperator(TypeDiceBonus)
		case ruleAction58:
			p.AddValue("1")
			p.AddOperator(TypeDiceBonus)
		case ruleAction59:
			p.AddValue("0")
			p.AddValue("0")
			p.AddOperator(TypeDiceFate)
		case ruleAction60:
			p.AddLoadVarname(string(text))
		case ruleAction61:
			p.AddValue(string(text))
		case ruleAction62:
			p.AddValueStr(string(text))
			p.CounterAdd(1)
		case ruleAction63:
			p.AddValueStr(string(text))
			p.CounterAdd(1)
		case ruleAction64:
			p.AddValueStr(string(text))
			p.CounterAdd(1)
		case ruleAction65:
			p.CounterPush()
		case ruleAction66:
			p.CounterAdd(1)
		case ruleAction67:
			p.CounterAdd(1)
		case ruleAction68:
			p.AddFormatString(string(text), p.CounterPop())
		case ruleAction69:
			p.CounterPush()
		case ruleAction70:
			p.AddFormatString(string(text), p.CounterPop())
		case ruleAction71:
			p.CounterPush()
		case ruleAction72:
			p.AddFormatString(string(text), p.CounterPop())

		}
	}
	_, _, _, _, _ = buffer, _buffer, text, begin, end
}

func Pretty(pretty bool) func(*DiceRollParser) error {
	return func(p *DiceRollParser) error {
		p.Pretty = pretty
		return nil
	}
}

func Size(size int) func(*DiceRollParser) error {
	return func(p *DiceRollParser) error {
		p.tokens32 = tokens32{tree: make([]token32, 0, size)}
		return nil
	}
}
func (p *DiceRollParser) Init(options ...func(*DiceRollParser) error) error {
	var (
		max                  token32
		position, tokenIndex uint32
		buffer               []rune
	)
	for _, option := range options {
		err := option(p)
		if err != nil {
			return err
		}
	}
	p.reset = func() {
		max = token32{}
		position, tokenIndex = 0, 0

		p.buffer = []rune(p.Buffer)
		if len(p.buffer) == 0 || p.buffer[len(p.buffer)-1] != endSymbol {
			p.buffer = append(p.buffer, endSymbol)
		}
		buffer = p.buffer
	}
	p.reset()

	_rules := p.rules
	tree := p.tokens32
	p.parse = func(rule ...int) error {
		r := 1
		if len(rule) > 0 {
			r = rule[0]
		}
		matches := p.rules[r]()
		p.tokens32 = tree
		if matches {
			p.Trim(tokenIndex)
			return nil
		}
		return &parseError{p, max}
	}

	add := func(rule pegRule, begin uint32) {
		tree.Add(rule, begin, position, tokenIndex)
		tokenIndex++
		if begin != position && position > max.end {
			max = token32{rule, begin, position}
		}
	}

	matchDot := func() bool {
		if buffer[position] != endSymbol {
			position++
			return true
		}
		return false
	}

	/*matchChar := func(c byte) bool {
		if buffer[position] == c {
			position++
			return true
		}
		return false
	}*/

	/*matchRange := func(lower byte, upper byte) bool {
		if c := buffer[position]; c >= lower && c <= upper {
			position++
			return true
		}
		return false
	}*/

	_rules = [...]func() bool{
		nil,
		/* 0 eBase <- <(e Action0)> */
		func() bool {
			position0, tokenIndex0 := position, tokenIndex
			{
				position1 := position
				if !_rules[rulee]() {
					goto l0
				}
				{
					add(ruleAction0, position)
				}
				add(ruleeBase, position1)
			}
			return true
		l0:
			position, tokenIndex = position0, tokenIndex0
			return false
		},
		/* 1 e <- <((eOne ';' sp Action1)* eOne)> */
		func() bool {
			position3, tokenIndex3 := position, tokenIndex
			{
				position4 := position
			l5:
				{
					position6, tokenIndex6 := position, tokenIndex
					if !_rules[ruleeOne]() {
						goto l6
					}
					if buffer[position] != rune(';') {
						goto l6
					}
					position++
					if !_rules[rulesp]() {
						goto l6
					}
					{
						add(ruleAction1, position)
					}
					goto l5
				l6:
					position, tokenIndex = position6, tokenIndex6
				}
				if !_rules[ruleeOne]() {
					goto l3
				}
				add(rulee, position4)
			}
			return true
		l3:
			position, tokenIndex = position3, tokenIndex3
			return false
		},
		/* 2 eOne <- <(sp (fstring / e0))> */
		func() bool {
			position8, tokenIndex8 := position, tokenIndex
			{
				position9 := position
				if !_rules[rulesp]() {
					goto l8
				}
				{
					position10, tokenIndex10 := position, tokenIndex
					if !_rules[rulefstring]() {
						goto l11
					}
					goto l10
				l11:
					position, tokenIndex = position10, tokenIndex10
					if !_rules[rulee0]() {
						goto l8
					}
				}
			l10:
				add(ruleeOne, position9)
			}
			return true
		l8:
			position, tokenIndex = position8, tokenIndex8
			return false
		},
		/* 3 assign_expr <- <(identifier Action2 '=' sp e0 Action3)> */
		nil,
		/* 4 e0 <- <eTernary> */
		func() bool {
			position13, tokenIndex13 := position, tokenIndex
			{
				position14 := position
				{
					position15 := position
					{
						position16, tokenIndex16 := position, tokenIndex
						if !_rules[ruleeBitwise]() {
							goto l17
						}
						if buffer[position] != rune('?') {
							goto l17
						}
						position++
						if !_rules[rulesp]() {
							goto l17
						}
						{
							add(ruleAction6, position)
						}
						if !_rules[ruleeBitwise]() {
							goto l17
						}
						if buffer[position] != rune(':') {
							goto l17
						}
						position++
						if !_rules[rulesp]() {
							goto l17
						}
						{
							add(ruleAction7, position)
						}
						if !_rules[ruleeBitwise]() {
							goto l17
						}
						{
							add(ruleAction8, position)
						}
						goto l16
					l17:
						position, tokenIndex = position16, tokenIndex16
						if !_rules[ruleeSimpleSwitch]() {
							goto l21
						}
						{
							add(ruleAction9, position)
						}
					l23:
						{
							position24, tokenIndex24 := position, tokenIndex
							if buffer[position] != rune(',') {
								goto l24
							}
							position++
							if !_rules[rulesp]() {
								goto l24
							}
							if !_rules[ruleeSimpleSwitch]() {
								goto l24
							}
							{
								add(ruleAction10, position)
							}
							goto l23
						l24:
							position, tokenIndex = position24, tokenIndex24
						}
						{
							add(ruleAction11, position)
						}
						goto l16
					l21:
						position, tokenIndex = position16, tokenIndex16
						if !_rules[ruleeBitwise]() {
							goto l13
						}
					}
				l16:
					add(ruleeTernary, position15)
				}
				add(rulee0, position14)
			}
			return true
		l13:
			position, tokenIndex = position13, tokenIndex13
			return false
		},
		/* 5 eSimpleSwitch <- <(eBitwise '?' sp Action4 eBitwise Action5)> */
		func() bool {
			position27, tokenIndex27 := position, tokenIndex
			{
				position28 := position
				if !_rules[ruleeBitwise]() {
					goto l27
				}
				if buffer[position] != rune('?') {
					goto l27
				}
				position++
				if !_rules[rulesp]() {
					goto l27
				}
				{
					add(ruleAction4, position)
				}
				if !_rules[ruleeBitwise]() {
					goto l27
				}
				{
					add(ruleAction5, position)
				}
				add(ruleeSimpleSwitch, position28)
			}
			return true
		l27:
			position, tokenIndex = position27, tokenIndex27
			return false
		},
		/* 6 eTernary <- <((eBitwise '?' sp Action6 eBitwise ':' sp Action7 eBitwise Action8) / (eSimpleSwitch Action9 (',' sp eSimpleSwitch Action10)* Action11) / eBitwise)> */
		nil,
		/* 7 eBitwise <- <(eComp (((logicOr / bitwiseOr) Action12 eComp Action13) / ((logicAnd / bitwiseAnd) Action14 eComp Action15))*)> */
		func() bool {
			position32, tokenIndex32 := position, tokenIndex
			{
				position33 := position
				if !_rules[ruleeComp]() {
					goto l32
				}
			l34:
				{
					position35, tokenIndex35 := position, tokenIndex
					{
						position36, tokenIndex36 := position, tokenIndex
						{
							position38, tokenIndex38 := position, tokenIndex
							{
								position40 := position
								if buffer[position] != rune('|') {
									goto l39
								}
								position++
								if buffer[position] != rune('|') {
									goto l39
								}
								position++
								if !_rules[rulesp]() {
									goto l39
								}
								add(rulelogicOr, position40)
							}
							goto l38
						l39:
							position, tokenIndex = position38, tokenIndex38
							{
								position41 := position
								if buffer[position] != rune('|') {
									goto l37
								}
								position++
								if !_rules[rulesp]() {
									goto l37
								}
								add(rulebitwiseOr, position41)
							}
						}
					l38:
						{
							add(ruleAction12, position)
						}
						if !_rules[ruleeComp]() {
							goto l37
						}
						{
							add(ruleAction13, position)
						}
						goto l36
					l37:
						position, tokenIndex = position36, tokenIndex36
						{
							position44, tokenIndex44 := position, tokenIndex
							{
								position46 := position
								{
									position47, tokenIndex47 := position, tokenIndex
									if buffer[position] != rune('&') {
										goto l48
									}
									position++
									if buffer[position] != rune('&') {
										goto l48
									}
									position++
									goto l47
								l48:
									position, tokenIndex = position47, tokenIndex47
									if buffer[position] != rune('&') {
										goto l45
									}
									position++
									if buffer[position] != rune('a') {
										goto l45
									}
									position++
									if buffer[position] != rune('m') {
										goto l45
									}
									position++
									if buffer[position] != rune('p') {
										goto l45
									}
									position++
									if buffer[position] != rune(';') {
										goto l45
									}
									position++
									if buffer[position] != rune('&') {
										goto l45
									}
									position++
									if buffer[position] != rune('a') {
										goto l45
									}
									position++
									if buffer[position] != rune('m') {
										goto l45
									}
									position++
									if buffer[position] != rune('p') {
										goto l45
									}
									position++
									if buffer[position] != rune(';') {
										goto l45
									}
									position++
								}
							l47:
								if !_rules[rulesp]() {
									goto l45
								}
								add(rulelogicAnd, position46)
							}
							goto l44
						l45:
							position, tokenIndex = position44, tokenIndex44
							{
								position49 := position
								{
									position50, tokenIndex50 := position, tokenIndex
									if buffer[position] != rune('&') {
										goto l51
									}
									position++
									goto l50
								l51:
									position, tokenIndex = position50, tokenIndex50
									if buffer[position] != rune('&') {
										goto l35
									}
									position++
									if buffer[position] != rune('a') {
										goto l35
									}
									position++
									if buffer[position] != rune('m') {
										goto l35
									}
									position++
									if buffer[position] != rune('p') {
										goto l35
									}
									position++
									if buffer[position] != rune(';') {
										goto l35
									}
									position++
								}
							l50:
								if !_rules[rulesp]() {
									goto l35
								}
								add(rulebitwiseAnd, position49)
							}
						}
					l44:
						{
							add(ruleAction14, position)
						}
						if !_rules[ruleeComp]() {
							goto l35
						}
						{
							add(ruleAction15, position)
						}
					}
				l36:
					goto l34
				l35:
					position, tokenIndex = position35, tokenIndex35
				}
				add(ruleeBitwise, position33)
			}
			return true
		l32:
			position, tokenIndex = position32, tokenIndex32
			return false
		},
		/* 8 eComp <- <(e1 ((lt Action16 e1 Action17) / (ge Action24 e1 Action25) / ((&('>') (gt Action26 e1 Action27)) | (&('!') (ne Action22 e1 Action23)) | (&('=') (eq Action20 e1 Action21)) | (&('<') (le Action18 e1 Action19))))*)> */
		func() bool {
			position54, tokenIndex54 := position, tokenIndex
			{
				position55 := position
				if !_rules[rulee1]() {
					goto l54
				}
			l56:
				{
					position57, tokenIndex57 := position, tokenIndex
					{
						position58, tokenIndex58 := position, tokenIndex
						{
							position60 := position
							{
								position61, tokenIndex61 := position, tokenIndex
								if buffer[position] != rune('<') {
									goto l62
								}
								position++
								goto l61
							l62:
								position, tokenIndex = position61, tokenIndex61
								if buffer[position] != rune('＜') {
									goto l59
								}
								position++
							}
						l61:
							if !_rules[rulesp]() {
								goto l59
							}
							add(rulelt, position60)
						}
						{
							add(ruleAction16, position)
						}
						if !_rules[rulee1]() {
							goto l59
						}
						{
							add(ruleAction17, position)
						}
						goto l58
					l59:
						position, tokenIndex = position58, tokenIndex58
						{
							position66 := position
							{
								position67, tokenIndex67 := position, tokenIndex
								if buffer[position] != rune('>') {
									goto l68
								}
								position++
								if buffer[position] != rune('=') {
									goto l68
								}
								position++
								goto l67
							l68:
								position, tokenIndex = position67, tokenIndex67
								if buffer[position] != rune('＞') {
									goto l65
								}
								position++
								if buffer[position] != rune('＝') {
									goto l65
								}
								position++
							}
						l67:
							if !_rules[rulesp]() {
								goto l65
							}
							add(rulege, position66)
						}
						{
							add(ruleAction24, position)
						}
						if !_rules[rulee1]() {
							goto l65
						}
						{
							add(ruleAction25, position)
						}
						goto l58
					l65:
						position, tokenIndex = position58, tokenIndex58
						{
							switch buffer[position] {
							case '>':
								{
									position72 := position
									{
										position73, tokenIndex73 := position, tokenIndex
										if buffer[position] != rune('>') {
											goto l74
										}
										position++
										goto l73
									l74:
										position, tokenIndex = position73, tokenIndex73
										if buffer[position] != rune('＞') {
											goto l57
										}
										position++
									}
								l73:
									if !_rules[rulesp]() {
										goto l57
									}
									add(rulegt, position72)
								}
								{
									add(ruleAction26, position)
								}
								if !_rules[rulee1]() {
									goto l57
								}
								{
									add(ruleAction27, position)
								}
							case '!':
								{
									position77 := position
									{
										position78, tokenIndex78 := position, tokenIndex
										if buffer[position] != rune('!') {
											goto l79
										}
										position++
										if buffer[position] != rune('=') {
											goto l79
										}
										position++
										goto l78
									l79:
										position, tokenIndex = position78, tokenIndex78
										if buffer[position] != rune('！') {
											goto l57
										}
										position++
										if buffer[position] != rune('＝') {
											goto l57
										}
										position++
									}
								l78:
									if !_rules[rulesp]() {
										goto l57
									}
									add(rulene, position77)
								}
								{
									add(ruleAction22, position)
								}
								if !_rules[rulee1]() {
									goto l57
								}
								{
									add(ruleAction23, position)
								}
							case '=':
								{
									position82 := position
									{
										position83, tokenIndex83 := position, tokenIndex
										if buffer[position] != rune('=') {
											goto l84
										}
										position++
										if buffer[position] != rune('=') {
											goto l84
										}
										position++
										goto l83
									l84:
										position, tokenIndex = position83, tokenIndex83
										if buffer[position] != rune('＝') {
											goto l57
										}
										position++
										if buffer[position] != rune('＝') {
											goto l57
										}
										position++
									}
								l83:
									if !_rules[rulesp]() {
										goto l57
									}
									add(ruleeq, position82)
								}
								{
									add(ruleAction20, position)
								}
								if !_rules[rulee1]() {
									goto l57
								}
								{
									add(ruleAction21, position)
								}
							default:
								{
									position87 := position
									{
										position88, tokenIndex88 := position, tokenIndex
										if buffer[position] != rune('<') {
											goto l89
										}
										position++
										if buffer[position] != rune('=') {
											goto l89
										}
										position++
										goto l88
									l89:
										position, tokenIndex = position88, tokenIndex88
										if buffer[position] != rune('＜') {
											goto l57
										}
										position++
										if buffer[position] != rune('＝') {
											goto l57
										}
										position++
									}
								l88:
									if !_rules[rulesp]() {
										goto l57
									}
									add(rulele, position87)
								}
								{
									add(ruleAction18, position)
								}
								if !_rules[rulee1]() {
									goto l57
								}
								{
									add(ruleAction19, position)
								}
							}
						}

					}
				l58:
					goto l56
				l57:
					position, tokenIndex = position57, tokenIndex57
				}
				add(ruleeComp, position55)
			}
			return true
		l54:
			position, tokenIndex = position54, tokenIndex54
			return false
		},
		/* 9 e1 <- <(e2 ((add Action28 e2 Action29) / (minus Action30 e2 Action31))*)> */
		func() bool {
			position92, tokenIndex92 := position, tokenIndex
			{
				position93 := position
				if !_rules[rulee2]() {
					goto l92
				}
			l94:
				{
					position95, tokenIndex95 := position, tokenIndex
					{
						position96, tokenIndex96 := position, tokenIndex
						if !_rules[ruleadd]() {
							goto l97
						}
						{
							add(ruleAction28, position)
						}
						if !_rules[rulee2]() {
							goto l97
						}
						{
							add(ruleAction29, position)
						}
						goto l96
					l97:
						position, tokenIndex = position96, tokenIndex96
						if !_rules[ruleminus]() {
							goto l95
						}
						{
							add(ruleAction30, position)
						}
						if !_rules[rulee2]() {
							goto l95
						}
						{
							add(ruleAction31, position)
						}
					}
				l96:
					goto l94
				l95:
					position, tokenIndex = position95, tokenIndex95
				}
				add(rulee1, position93)
			}
			return true
		l92:
			position, tokenIndex = position92, tokenIndex92
			return false
		},
		/* 10 e2 <- <(e3 ((&('%') (modulus Action36 e3 Action37)) | (&('/') (divide Action34 e3 Action35)) | (&('*') (multiply Action32 e3 Action33)))*)> */
		func() bool {
			position102, tokenIndex102 := position, tokenIndex
			{
				position103 := position
				if !_rules[rulee3]() {
					goto l102
				}
			l104:
				{
					position105, tokenIndex105 := position, tokenIndex
					{
						switch buffer[position] {
						case '%':
							{
								position107 := position
								if buffer[position] != rune('%') {
									goto l105
								}
								position++
								if !_rules[rulesp]() {
									goto l105
								}
								add(rulemodulus, position107)
							}
							{
								add(ruleAction36, position)
							}
							if !_rules[rulee3]() {
								goto l105
							}
							{
								add(ruleAction37, position)
							}
						case '/':
							{
								position110 := position
								{
									position111, tokenIndex111 := position, tokenIndex
									if buffer[position] != rune('/') {
										goto l112
									}
									position++
									goto l111
								l112:
									position, tokenIndex = position111, tokenIndex111
									if buffer[position] != rune('／') {
										goto l105
									}
									position++
								}
							l111:
								if !_rules[rulesp]() {
									goto l105
								}
								add(ruledivide, position110)
							}
							{
								add(ruleAction34, position)
							}
							if !_rules[rulee3]() {
								goto l105
							}
							{
								add(ruleAction35, position)
							}
						default:
							{
								position115 := position
								{
									position116, tokenIndex116 := position, tokenIndex
									if buffer[position] != rune('*') {
										goto l117
									}
									position++
									goto l116
								l117:
									position, tokenIndex = position116, tokenIndex116
									if buffer[position] != rune('＊') {
										goto l105
									}
									position++
								}
							l116:
								if !_rules[rulesp]() {
									goto l105
								}
								add(rulemultiply, position115)
							}
							{
								add(ruleAction32, position)
							}
							if !_rules[rulee3]() {
								goto l105
							}
							{
								add(ruleAction33, position)
							}
						}
					}

					goto l104
				l105:
					position, tokenIndex = position105, tokenIndex105
				}
				add(rulee2, position103)
			}
			return true
		l102:
			position, tokenIndex = position102, tokenIndex102
			return false
		},
		/* 11 e3 <- <(e4 (exponentiation Action38 e4 Action39)*)> */
		func() bool {
			position120, tokenIndex120 := position, tokenIndex
			{
				position121 := position
				if !_rules[rulee4]() {
					goto l120
				}
			l122:
				{
					position123, tokenIndex123 := position, tokenIndex
					{
						position124 := position
						{
							position125, tokenIndex125 := position, tokenIndex
							if buffer[position] != rune('^') {
								goto l126
							}
							position++
							if !_rules[rulesp]() {
								goto l126
							}
							goto l125
						l126:
							position, tokenIndex = position125, tokenIndex125
							if buffer[position] != rune('*') {
								goto l123
							}
							position++
							if buffer[position] != rune('*') {
								goto l123
							}
							position++
							if !_rules[rulesp]() {
								goto l123
							}
						}
					l125:
						add(ruleexponentiation, position124)
					}
					{
						add(ruleAction38, position)
					}
					if !_rules[rulee4]() {
						goto l123
					}
					{
						add(ruleAction39, position)
					}
					goto l122
				l123:
					position, tokenIndex = position123, tokenIndex123
				}
				add(rulee3, position121)
			}
			return true
		l120:
			position, tokenIndex = position120, tokenIndex120
			return false
		},
		/* 12 e4 <- <((minus e5 Action40) / e5)> */
		func() bool {
			position129, tokenIndex129 := position, tokenIndex
			{
				position130 := position
				{
					position131, tokenIndex131 := position, tokenIndex
					if !_rules[ruleminus]() {
						goto l132
					}
					if !_rules[rulee5]() {
						goto l132
					}
					{
						add(ruleAction40, position)
					}
					goto l131
				l132:
					position, tokenIndex = position131, tokenIndex131
					if !_rules[rulee5]() {
						goto l129
					}
				}
			l131:
				add(rulee4, position130)
			}
			return true
		l129:
			position, tokenIndex = position129, tokenIndex129
			return false
		},
		/* 13 e5 <- <((add eDice) / eDice)> */
		func() bool {
			position134, tokenIndex134 := position, tokenIndex
			{
				position135 := position
				{
					position136, tokenIndex136 := position, tokenIndex
					if !_rules[ruleadd]() {
						goto l137
					}
					if !_rules[ruleeDice]() {
						goto l137
					}
					goto l136
				l137:
					position, tokenIndex = position136, tokenIndex136
					if !_rules[ruleeDice]() {
						goto l134
					}
				}
			l136:
				add(rulee5, position135)
			}
			return true
		l134:
			position, tokenIndex = position134, tokenIndex134
			return false
		},
		/* 14 dndDiceSuffix <- <(((('优' '势') / ('k' 'h')) Action41 sp) / ((('劣' '势') / ('k' 'l')) Action42 sp))> */
		func() bool {
			position138, tokenIndex138 := position, tokenIndex
			{
				position139 := position
				{
					position140, tokenIndex140 := position, tokenIndex
					{
						position142, tokenIndex142 := position, tokenIndex
						if buffer[position] != rune('优') {
							goto l143
						}
						position++
						if buffer[position] != rune('势') {
							goto l143
						}
						position++
						goto l142
					l143:
						position, tokenIndex = position142, tokenIndex142
						if buffer[position] != rune('k') {
							goto l141
						}
						position++
						if buffer[position] != rune('h') {
							goto l141
						}
						position++
					}
				l142:
					{
						add(ruleAction41, position)
					}
					if !_rules[rulesp]() {
						goto l141
					}
					goto l140
				l141:
					position, tokenIndex = position140, tokenIndex140
					{
						position145, tokenIndex145 := position, tokenIndex
						if buffer[position] != rune('劣') {
							goto l146
						}
						position++
						if buffer[position] != rune('势') {
							goto l146
						}
						position++
						goto l145
					l146:
						position, tokenIndex = position145, tokenIndex145
						if buffer[position] != rune('k') {
							goto l138
						}
						position++
						if buffer[position] != rune('l') {
							goto l138
						}
						position++
					}
				l145:
					{
						add(ruleAction42, position)
					}
					if !_rules[rulesp]() {
						goto l138
					}
				}
			l140:
				add(ruledndDiceSuffix, position139)
			}
			return true
		l138:
			position, tokenIndex = position138, tokenIndex138
			return false
		},
		/* 15 kqDiceOp <- <(('k' eDice2 Action43)? ('q' eDice2 Action44)? ('d' 'l' eDice2 Action45)? ('d' 'h' eDice2 Action46)?)> */
		func() bool {
			{
				position149 := position
				{
					position150, tokenIndex150 := position, tokenIndex
					if buffer[position] != rune('k') {
						goto l150
					}
					position++
					if !_rules[ruleeDice2]() {
						goto l150
					}
					{
						add(ruleAction43, position)
					}
					goto l151
				l150:
					position, tokenIndex = position150, tokenIndex150
				}
			l151:
				{
					position153, tokenIndex153 := position, tokenIndex
					if buffer[position] != rune('q') {
						goto l153
					}
					position++
					if !_rules[ruleeDice2]() {
						goto l153
					}
					{
						add(ruleAction44, position)
					}
					goto l154
				l153:
					position, tokenIndex = position153, tokenIndex153
				}
			l154:
				{
					position156, tokenIndex156 := position, tokenIndex
					if buffer[position] != rune('d') {
						goto l156
					}
					position++
					if buffer[position] != rune('l') {
						goto l156
					}
					position++
					if !_rules[ruleeDice2]() {
						goto l156
					}
					{
						add(ruleAction45, position)
					}
					goto l157
				l156:
					position, tokenIndex = position156, tokenIndex156
				}
			l157:
				{
					position159, tokenIndex159 := position, tokenIndex
					if buffer[position] != rune('d') {
						goto l159
					}
					position++
					if buffer[position] != rune('h') {
						goto l159
					}
					position++
					if !_rules[ruleeDice2]() {
						goto l159
					}
					{
						add(ruleAction46, position)
					}
					goto l160
				l159:
					position, tokenIndex = position159, tokenIndex159
				}
			l160:
				add(rulekqDiceOp, position149)
			}
			return true
		},
		/* 16 _dnumber <- <&(('d' / 'D') (number / '('))> */
		func() bool {
			position162, tokenIndex162 := position, tokenIndex
			{
				position163 := position
				{
					position164, tokenIndex164 := position, tokenIndex
					{
						position165, tokenIndex165 := position, tokenIndex
						if buffer[position] != rune('d') {
							goto l166
						}
						position++
						goto l165
					l166:
						position, tokenIndex = position165, tokenIndex165
						if buffer[position] != rune('D') {
							goto l162
						}
						position++
					}
				l165:
					{
						position167, tokenIndex167 := position, tokenIndex
						if !_rules[rulenumber]() {
							goto l168
						}
						goto l167
					l168:
						position, tokenIndex = position167, tokenIndex167
						if buffer[position] != rune('(') {
							goto l162
						}
						position++
					}
				l167:
					position, tokenIndex = position164, tokenIndex164
				}
				add(rule_dnumber, position163)
			}
			return true
		l162:
			position, tokenIndex = position162, tokenIndex162
			return false
		},
		/* 17 eDice <- <((_dnumber ('d' / 'D') Action47 eDice2 dndDiceSuffix Action48) / (_dnumber ('d' / 'D') Action49 eDice2 kqDiceOp Action50) / (('d' / 'D') dndDiceSuffix Action51) / (('d' / 'D') !(!((&('\r') '\r') | (&('\n') '\n') | (&('\t') '\t') | (&(' ') ' ') | (&('~') '~') | (&('}') '}') | (&('|') '|') | (&('{') '{') | (&('`') '`') | (&('^') '^') | (&(']') ']') | (&('\\') '\\') | (&('[') '[') | (&('@') '@') | (&('?') '?') | (&('>') '>') | (&('=') '=') | (&('<') '<') | (&(';') ';') | (&('/') '/') | (&('+') '+') | (&('*') '*') | (&(')') ')') | (&('(') '(') | (&('\'') '\'') | (&('&') '&') | (&('%') '%') | (&('$') '$') | (&('#') '#') | (&('"') '"') | (&('!') '!') | (&(',' | '-' | '.') [,-.])) .) sp Action52) / (eDice2 (('d' / 'D') Action53 &(number / '(') eDice2 kqDiceOp Action54)*))> */
		func() bool {
			position169, tokenIndex169 := position, tokenIndex
			{
				position170 := position
				{
					position171, tokenIndex171 := position, tokenIndex
					if !_rules[rule_dnumber]() {
						goto l172
					}
					{
						position173, tokenIndex173 := position, tokenIndex
						if buffer[position] != rune('d') {
							goto l174
						}
						position++
						goto l173
					l174:
						position, tokenIndex = position173, tokenIndex173
						if buffer[position] != rune('D') {
							goto l172
						}
						position++
					}
				l173:
					{
						add(ruleAction47, position)
					}
					if !_rules[ruleeDice2]() {
						goto l172
					}
					if !_rules[ruledndDiceSuffix]() {
						goto l172
					}
					{
						add(ruleAction48, position)
					}
					goto l171
				l172:
					position, tokenIndex = position171, tokenIndex171
					if !_rules[rule_dnumber]() {
						goto l177
					}
					{
						position178, tokenIndex178 := position, tokenIndex
						if buffer[position] != rune('d') {
							goto l179
						}
						position++
						goto l178
					l179:
						position, tokenIndex = position178, tokenIndex178
						if buffer[position] != rune('D') {
							goto l177
						}
						position++
					}
				l178:
					{
						add(ruleAction49, position)
					}
					if !_rules[ruleeDice2]() {
						goto l177
					}
					if !_rules[rulekqDiceOp]() {
						goto l177
					}
					{
						add(ruleAction50, position)
					}
					goto l171
				l177:
					position, tokenIndex = position171, tokenIndex171
					{
						position183, tokenIndex183 := position, tokenIndex
						if buffer[position] != rune('d') {
							goto l184
						}
						position++
						goto l183
					l184:
						position, tokenIndex = position183, tokenIndex183
						if buffer[position] != rune('D') {
							goto l182
						}
						position++
					}
				l183:
					if !_rules[ruledndDiceSuffix]() {
						goto l182
					}
					{
						add(ruleAction51, position)
					}
					goto l171
				l182:
					position, tokenIndex = position171, tokenIndex171
					{
						position187, tokenIndex187 := position, tokenIndex
						if buffer[position] != rune('d') {
							goto l188
						}
						position++
						goto l187
					l188:
						position, tokenIndex = position187, tokenIndex187
						if buffer[position] != rune('D') {
							goto l186
						}
						position++
					}
				l187:
					{
						position189, tokenIndex189 := position, tokenIndex
						{
							position190, tokenIndex190 := position, tokenIndex
							{
								switch buffer[position] {
								case '\r':
									if buffer[position] != rune('\r') {
										goto l190
									}
									position++
								case '\n':
									if buffer[position] != rune('\n') {
										goto l190
									}
									position++
								case '\t':
									if buffer[position] != rune('\t') {
										goto l190
									}
									position++
								case ' ':
									if buffer[position] != rune(' ') {
										goto l190
									}
									position++
								case '~':
									if buffer[position] != rune('~') {
										goto l190
									}
									position++
								case '}':
									if buffer[position] != rune('}') {
										goto l190
									}
									position++
								case '|':
									if buffer[position] != rune('|') {
										goto l190
									}
									position++
								case '{':
									if buffer[position] != rune('{') {
										goto l190
									}
									position++
								case '`':
									if buffer[position] != rune('`') {
										goto l190
									}
									position++
								case '^':
									if buffer[position] != rune('^') {
										goto l190
									}
									position++
								case ']':
									if buffer[position] != rune(']') {
										goto l190
									}
									position++
								case '\\':
									if buffer[position] != rune('\\') {
										goto l190
									}
									position++
								case '[':
									if buffer[position] != rune('[') {
										goto l190
									}
									position++
								case '@':
									if buffer[position] != rune('@') {
										goto l190
									}
									position++
								case '?':
									if buffer[position] != rune('?') {
										goto l190
									}
									position++
								case '>':
									if buffer[position] != rune('>') {
										goto l190
									}
									position++
								case '=':
									if buffer[position] != rune('=') {
										goto l190
									}
									position++
								case '<':
									if buffer[position] != rune('<') {
										goto l190
									}
									position++
								case ';':
									if buffer[position] != rune(';') {
										goto l190
									}
									position++
								case '/':
									if buffer[position] != rune('/') {
										goto l190
									}
									position++
								case '+':
									if buffer[position] != rune('+') {
										goto l190
									}
									position++
								case '*':
									if buffer[position] != rune('*') {
										goto l190
									}
									position++
								case ')':
									if buffer[position] != rune(')') {
										goto l190
									}
									position++
								case '(':
									if buffer[position] != rune('(') {
										goto l190
									}
									position++
								case '\'':
									if buffer[position] != rune('\'') {
										goto l190
									}
									position++
								case '&':
									if buffer[position] != rune('&') {
										goto l190
									}
									position++
								case '%':
									if buffer[position] != rune('%') {
										goto l190
									}
									position++
								case '$':
									if buffer[position] != rune('$') {
										goto l190
									}
									position++
								case '#':
									if buffer[position] != rune('#') {
										goto l190
									}
									position++
								case '"':
									if buffer[position] != rune('"') {
										goto l190
									}
									position++
								case '!':
									if buffer[position] != rune('!') {
										goto l190
									}
									position++
								default:
									if c := buffer[position]; c < rune(',') || c > rune('.') {
										goto l190
									}
									position++
								}
							}

							goto l189
						l190:
							position, tokenIndex = position190, tokenIndex190
						}
						if !matchDot() {
							goto l189
						}
						goto l186
					l189:
						position, tokenIndex = position189, tokenIndex189
					}
					if !_rules[rulesp]() {
						goto l186
					}
					{
						add(ruleAction52, position)
					}
					goto l171
				l186:
					position, tokenIndex = position171, tokenIndex171
					if !_rules[ruleeDice2]() {
						goto l169
					}
				l193:
					{
						position194, tokenIndex194 := position, tokenIndex
						{
							position195, tokenIndex195 := position, tokenIndex
							if buffer[position] != rune('d') {
								goto l196
							}
							position++
							goto l195
						l196:
							position, tokenIndex = position195, tokenIndex195
							if buffer[position] != rune('D') {
								goto l194
							}
							position++
						}
					l195:
						{
							add(ruleAction53, position)
						}
						{
							position198, tokenIndex198 := position, tokenIndex
							{
								position199, tokenIndex199 := position, tokenIndex
								if !_rules[rulenumber]() {
									goto l200
								}
								goto l199
							l200:
								position, tokenIndex = position199, tokenIndex199
								if buffer[position] != rune('(') {
									goto l194
								}
								position++
							}
						l199:
							position, tokenIndex = position198, tokenIndex198
						}
						if !_rules[ruleeDice2]() {
							goto l194
						}
						if !_rules[rulekqDiceOp]() {
							goto l194
						}
						{
							add(ruleAction54, position)
						}
						goto l193
					l194:
						position, tokenIndex = position194, tokenIndex194
					}
				}
			l171:
				add(ruleeDice, position170)
			}
			return true
		l169:
			position, tokenIndex = position169, tokenIndex169
			return false
		},
		/* 18 laNumberOrLeftParen <- <&(number / '(')> */
		func() bool {
			position202, tokenIndex202 := position, tokenIndex
			{
				position203 := position
				{
					position204, tokenIndex204 := position, tokenIndex
					{
						position205, tokenIndex205 := position, tokenIndex
						if !_rules[rulenumber]() {
							goto l206
						}
						goto l205
					l206:
						position, tokenIndex = position205, tokenIndex205
						if buffer[position] != rune('(') {
							goto l202
						}
						position++
					}
				l205:
					position, tokenIndex = position204, tokenIndex204
				}
				add(rulelaNumberOrLeftParen, position203)
			}
			return true
		l202:
			position, tokenIndex = position202, tokenIndex202
			return false
		},
		/* 19 eDice2 <- <((('p' / 'P') laNumberOrLeftParen eDice3 Action55) / (('p' / 'P') Action56) / eDice3)> */
		func() bool {
			position207, tokenIndex207 := position, tokenIndex
			{
				position208 := position
				{
					position209, tokenIndex209 := position, tokenIndex
					{
						position211, tokenIndex211 := position, tokenIndex
						if buffer[position] != rune('p') {
							goto l212
						}
						position++
						goto l211
					l212:
						position, tokenIndex = position211, tokenIndex211
						if buffer[position] != rune('P') {
							goto l210
						}
						position++
					}
				l211:
					if !_rules[rulelaNumberOrLeftParen]() {
						goto l210
					}
					if !_rules[ruleeDice3]() {
						goto l210
					}
					{
						add(ruleAction55, position)
					}
					goto l209
				l210:
					position, tokenIndex = position209, tokenIndex209
					{
						position215, tokenIndex215 := position, tokenIndex
						if buffer[position] != rune('p') {
							goto l216
						}
						position++
						goto l215
					l216:
						position, tokenIndex = position215, tokenIndex215
						if buffer[position] != rune('P') {
							goto l214
						}
						position++
					}
				l215:
					{
						add(ruleAction56, position)
					}
					goto l209
				l214:
					position, tokenIndex = position209, tokenIndex209
					if !_rules[ruleeDice3]() {
						goto l207
					}
				}
			l209:
				add(ruleeDice2, position208)
			}
			return true
		l207:
			position, tokenIndex = position207, tokenIndex207
			return false
		},
		/* 20 eDice3 <- <((('b' / 'B') laNumberOrLeftParen value Action57) / (('b' / 'B') Action58) / eDice4)> */
		func() bool {
			position218, tokenIndex218 := position, tokenIndex
			{
				position219 := position
				{
					position220, tokenIndex220 := position, tokenIndex
					{
						position222, tokenIndex222 := position, tokenIndex
						if buffer[position] != rune('b') {
							goto l223
						}
						position++
						goto l222
					l223:
						position, tokenIndex = position222, tokenIndex222
						if buffer[position] != rune('B') {
							goto l221
						}
						position++
					}
				l222:
					if !_rules[rulelaNumberOrLeftParen]() {
						goto l221
					}
					if !_rules[rulevalue]() {
						goto l221
					}
					{
						add(ruleAction57, position)
					}
					goto l220
				l221:
					position, tokenIndex = position220, tokenIndex220
					{
						position226, tokenIndex226 := position, tokenIndex
						if buffer[position] != rune('b') {
							goto l227
						}
						position++
						goto l226
					l227:
						position, tokenIndex = position226, tokenIndex226
						if buffer[position] != rune('B') {
							goto l225
						}
						position++
					}
				l226:
					{
						add(ruleAction58, position)
					}
					goto l220
				l225:
					position, tokenIndex = position220, tokenIndex220
					{
						position229 := position
						{
							position230, tokenIndex230 := position, tokenIndex
							{
								position232, tokenIndex232 := position, tokenIndex
								if buffer[position] != rune('f') {
									goto l233
								}
								position++
								goto l232
							l233:
								position, tokenIndex = position232, tokenIndex232
								if buffer[position] != rune('F') {
									goto l231
								}
								position++
							}
						l232:
							if !_rules[rulesp]() {
								goto l231
							}
							{
								add(ruleAction59, position)
							}
							goto l230
						l231:
							position, tokenIndex = position230, tokenIndex230
							if !_rules[rulevalue]() {
								goto l218
							}
						}
					l230:
						add(ruleeDice4, position229)
					}
				}
			l220:
				add(ruleeDice3, position219)
			}
			return true
		l218:
			position, tokenIndex = position218, tokenIndex218
			return false
		},
		/* 21 eDice4 <- <((('f' / 'F') sp Action59) / value)> */
		nil,
		/* 22 value <- <(number / assign_expr / (identifier Action60) / sub / fstring)> */
		func() bool {
			position236, tokenIndex236 := position, tokenIndex
			{
				position237 := position
				{
					position238, tokenIndex238 := position, tokenIndex
					if !_rules[rulenumber]() {
						goto l239
					}
					goto l238
				l239:
					position, tokenIndex = position238, tokenIndex238
					{
						position241 := position
						if !_rules[ruleidentifier]() {
							goto l240
						}
						{
							add(ruleAction2, position)
						}
						if buffer[position] != rune('=') {
							goto l240
						}
						position++
						if !_rules[rulesp]() {
							goto l240
						}
						if !_rules[rulee0]() {
							goto l240
						}
						{
							add(ruleAction3, position)
						}
						add(ruleassign_expr, position241)
					}
					goto l238
				l240:
					position, tokenIndex = position238, tokenIndex238
					if !_rules[ruleidentifier]() {
						goto l244
					}
					{
						add(ruleAction60, position)
					}
					goto l238
				l244:
					position, tokenIndex = position238, tokenIndex238
					{
						position247 := position
						{
							position248 := position
							if buffer[position] != rune('(') {
								goto l246
							}
							position++
							if !_rules[rulesp]() {
								goto l246
							}
							add(ruleopen, position248)
						}
						if !_rules[rulee0]() {
							goto l246
						}
						{
							position249 := position
							if buffer[position] != rune(')') {
								goto l246
							}
							position++
							if !_rules[rulesp]() {
								goto l246
							}
							add(ruleclose, position249)
						}
						add(rulesub, position247)
					}
					goto l238
				l246:
					position, tokenIndex = position238, tokenIndex238
					if !_rules[rulefstring]() {
						goto l236
					}
				}
			l238:
				add(rulevalue, position237)
			}
			return true
		l236:
			position, tokenIndex = position236, tokenIndex236
			return false
		},
		/* 23 number <- <(<[0-9]+> sp Action61)> */
		func() bool {
			position250, tokenIndex250 := position, tokenIndex
			{
				position251 := position
				{
					position252 := position
					if c := buffer[position]; c < rune('0') || c > rune('9') {
						goto l250
					}
					position++
				l253:
					{
						position254, tokenIndex254 := position, tokenIndex
						if c := buffer[position]; c < rune('0') || c > rune('9') {
							goto l254
						}
						position++
						goto l253
					l254:
						position, tokenIndex = position254, tokenIndex254
					}
					add(rulePegText, position252)
				}
				if !_rules[rulesp]() {
					goto l250
				}
				{
					add(ruleAction61, position)
				}
				add(rulenumber, position251)
			}
			return true
		l250:
			position, tokenIndex = position250, tokenIndex250
			return false
		},
		/* 24 identifier <- <(<(!((&('\r') '\r') | (&('\n') '\n') | (&('\t') '\t') | (&(' ') ' ') | (&('~') '~') | (&('}') '}') | (&('|') '|') | (&('{') '{') | (&('`') '`') | (&('^') '^') | (&(']') ']') | (&('\\') '\\') | (&('[') '[') | (&('@') '@') | (&('?') '?') | (&('>') '>') | (&('=') '=') | (&('<') '<') | (&(';') ';') | (&(':') ':') | (&('/') '/') | (&('+') '+') | (&('*') '*') | (&(')') ')') | (&('(') '(') | (&('\'') '\'') | (&('&') '&') | (&('%') '%') | (&('#') '#') | (&('"') '"') | (&('!') '!') | (&(',' | '-' | '.') [,-.]) | (&('0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9') [0-9])) . (!((&('\r') '\r') | (&('\n') '\n') | (&('\t') '\t') | (&(' ') ' ') | (&('~') '~') | (&('}') '}') | (&('|') '|') | (&('{') '{') | (&('`') '`') | (&('^') '^') | (&(']') ']') | (&('\\') '\\') | (&('[') '[') | (&('@') '@') | (&('?') '?') | (&('>') '>') | (&('=') '=') | (&('<') '<') | (&(';') ';') | (&('/') '/') | (&('+') '+') | (&('*') '*') | (&(')') ')') | (&('(') '(') | (&('\'') '\'') | (&('&') '&') | (&('%') '%') | (&('$') '$') | (&('#') '#') | (&('"') '"') | (&('!') '!') | (&(',' | '-' | '.') [,-.])) .)*)> sp)> */
		func() bool {
			position256, tokenIndex256 := position, tokenIndex
			{
				position257 := position
				{
					position258 := position
					{
						position259, tokenIndex259 := position, tokenIndex
						{
							switch buffer[position] {
							case '\r':
								if buffer[position] != rune('\r') {
									goto l259
								}
								position++
							case '\n':
								if buffer[position] != rune('\n') {
									goto l259
								}
								position++
							case '\t':
								if buffer[position] != rune('\t') {
									goto l259
								}
								position++
							case ' ':
								if buffer[position] != rune(' ') {
									goto l259
								}
								position++
							case '~':
								if buffer[position] != rune('~') {
									goto l259
								}
								position++
							case '}':
								if buffer[position] != rune('}') {
									goto l259
								}
								position++
							case '|':
								if buffer[position] != rune('|') {
									goto l259
								}
								position++
							case '{':
								if buffer[position] != rune('{') {
									goto l259
								}
								position++
							case '`':
								if buffer[position] != rune('`') {
									goto l259
								}
								position++
							case '^':
								if buffer[position] != rune('^') {
									goto l259
								}
								position++
							case ']':
								if buffer[position] != rune(']') {
									goto l259
								}
								position++
							case '\\':
								if buffer[position] != rune('\\') {
									goto l259
								}
								position++
							case '[':
								if buffer[position] != rune('[') {
									goto l259
								}
								position++
							case '@':
								if buffer[position] != rune('@') {
									goto l259
								}
								position++
							case '?':
								if buffer[position] != rune('?') {
									goto l259
								}
								position++
							case '>':
								if buffer[position] != rune('>') {
									goto l259
								}
								position++
							case '=':
								if buffer[position] != rune('=') {
									goto l259
								}
								position++
							case '<':
								if buffer[position] != rune('<') {
									goto l259
								}
								position++
							case ';':
								if buffer[position] != rune(';') {
									goto l259
								}
								position++
							case ':':
								if buffer[position] != rune(':') {
									goto l259
								}
								position++
							case '/':
								if buffer[position] != rune('/') {
									goto l259
								}
								position++
							case '+':
								if buffer[position] != rune('+') {
									goto l259
								}
								position++
							case '*':
								if buffer[position] != rune('*') {
									goto l259
								}
								position++
							case ')':
								if buffer[position] != rune(')') {
									goto l259
								}
								position++
							case '(':
								if buffer[position] != rune('(') {
									goto l259
								}
								position++
							case '\'':
								if buffer[position] != rune('\'') {
									goto l259
								}
								position++
							case '&':
								if buffer[position] != rune('&') {
									goto l259
								}
								position++
							case '%':
								if buffer[position] != rune('%') {
									goto l259
								}
								position++
							case '#':
								if buffer[position] != rune('#') {
									goto l259
								}
								position++
							case '"':
								if buffer[position] != rune('"') {
									goto l259
								}
								position++
							case '!':
								if buffer[position] != rune('!') {
									goto l259
								}
								position++
							case ',', '-', '.':
								if c := buffer[position]; c < rune(',') || c > rune('.') {
									goto l259
								}
								position++
							default:
								if c := buffer[position]; c < rune('0') || c > rune('9') {
									goto l259
								}
								position++
							}
						}

						goto l256
					l259:
						position, tokenIndex = position259, tokenIndex259
					}
					if !matchDot() {
						goto l256
					}
				l261:
					{
						position262, tokenIndex262 := position, tokenIndex
						{
							position263, tokenIndex263 := position, tokenIndex
							{
								switch buffer[position] {
								case '\r':
									if buffer[position] != rune('\r') {
										goto l263
									}
									position++
								case '\n':
									if buffer[position] != rune('\n') {
										goto l263
									}
									position++
								case '\t':
									if buffer[position] != rune('\t') {
										goto l263
									}
									position++
								case ' ':
									if buffer[position] != rune(' ') {
										goto l263
									}
									position++
								case '~':
									if buffer[position] != rune('~') {
										goto l263
									}
									position++
								case '}':
									if buffer[position] != rune('}') {
										goto l263
									}
									position++
								case '|':
									if buffer[position] != rune('|') {
										goto l263
									}
									position++
								case '{':
									if buffer[position] != rune('{') {
										goto l263
									}
									position++
								case '`':
									if buffer[position] != rune('`') {
										goto l263
									}
									position++
								case '^':
									if buffer[position] != rune('^') {
										goto l263
									}
									position++
								case ']':
									if buffer[position] != rune(']') {
										goto l263
									}
									position++
								case '\\':
									if buffer[position] != rune('\\') {
										goto l263
									}
									position++
								case '[':
									if buffer[position] != rune('[') {
										goto l263
									}
									position++
								case '@':
									if buffer[position] != rune('@') {
										goto l263
									}
									position++
								case '?':
									if buffer[position] != rune('?') {
										goto l263
									}
									position++
								case '>':
									if buffer[position] != rune('>') {
										goto l263
									}
									position++
								case '=':
									if buffer[position] != rune('=') {
										goto l263
									}
									position++
								case '<':
									if buffer[position] != rune('<') {
										goto l263
									}
									position++
								case ';':
									if buffer[position] != rune(';') {
										goto l263
									}
									position++
								case '/':
									if buffer[position] != rune('/') {
										goto l263
									}
									position++
								case '+':
									if buffer[position] != rune('+') {
										goto l263
									}
									position++
								case '*':
									if buffer[position] != rune('*') {
										goto l263
									}
									position++
								case ')':
									if buffer[position] != rune(')') {
										goto l263
									}
									position++
								case '(':
									if buffer[position] != rune('(') {
										goto l263
									}
									position++
								case '\'':
									if buffer[position] != rune('\'') {
										goto l263
									}
									position++
								case '&':
									if buffer[position] != rune('&') {
										goto l263
									}
									position++
								case '%':
									if buffer[position] != rune('%') {
										goto l263
									}
									position++
								case '$':
									if buffer[position] != rune('$') {
										goto l263
									}
									position++
								case '#':
									if buffer[position] != rune('#') {
										goto l263
									}
									position++
								case '"':
									if buffer[position] != rune('"') {
										goto l263
									}
									position++
								case '!':
									if buffer[position] != rune('!') {
										goto l263
									}
									position++
								default:
									if c := buffer[position]; c < rune(',') || c > rune('.') {
										goto l263
									}
									position++
								}
							}

							goto l262
						l263:
							position, tokenIndex = position263, tokenIndex263
						}
						if !matchDot() {
							goto l262
						}
						goto l261
					l262:
						position, tokenIndex = position262, tokenIndex262
					}
					add(rulePegText, position258)
				}
				if !_rules[rulesp]() {
					goto l256
				}
				add(ruleidentifier, position257)
			}
			return true
		l256:
			position, tokenIndex = position256, tokenIndex256
			return false
		},
		/* 25 sub <- <(open e0 close)> */
		nil,
		/* 26 add <- <(('+' / '＋') sp)> */
		func() bool {
			position266, tokenIndex266 := position, tokenIndex
			{
				position267 := position
				{
					position268, tokenIndex268 := position, tokenIndex
					if buffer[position] != rune('+') {
						goto l269
					}
					position++
					goto l268
				l269:
					position, tokenIndex = position268, tokenIndex268
					if buffer[position] != rune('＋') {
						goto l266
					}
					position++
				}
			l268:
				if !_rules[rulesp]() {
					goto l266
				}
				add(ruleadd, position267)
			}
			return true
		l266:
			position, tokenIndex = position266, tokenIndex266
			return false
		},
		/* 27 minus <- <(('-' / '－') sp)> */
		func() bool {
			position270, tokenIndex270 := position, tokenIndex
			{
				position271 := position
				{
					position272, tokenIndex272 := position, tokenIndex
					if buffer[position] != rune('-') {
						goto l273
					}
					position++
					goto l272
				l273:
					position, tokenIndex = position272, tokenIndex272
					if buffer[position] != rune('－') {
						goto l270
					}
					position++
				}
			l272:
				if !_rules[rulesp]() {
					goto l270
				}
				add(ruleminus, position271)
			}
			return true
		l270:
			position, tokenIndex = position270, tokenIndex270
			return false
		},
		/* 28 multiply <- <(('*' / '＊') sp)> */
		nil,
		/* 29 divide <- <(('/' / '／') sp)> */
		nil,
		/* 30 modulus <- <('%' sp)> */
		nil,
		/* 31 exponentiation <- <(('^' sp) / ('*' '*' sp))> */
		nil,
		/* 32 open <- <('(' sp)> */
		nil,
		/* 33 close <- <(')' sp)> */
		nil,
		/* 34 bitwiseOr <- <('|' sp)> */
		nil,
		/* 35 logicOr <- <('|' '|' sp)> */
		nil,
		/* 36 bitwiseAnd <- <(('&' / ('&' 'a' 'm' 'p' ';')) sp)> */
		nil,
		/* 37 logicAnd <- <((('&' '&') / ('&' 'a' 'm' 'p' ';' '&' 'a' 'm' 'p' ';')) sp)> */
		nil,
		/* 38 sp <- <((&('\r') '\r') | (&('\n') '\n') | (&('\t') '\t') | (&(' ') ' '))*> */
		func() bool {
			{
				position285 := position
			l286:
				{
					position287, tokenIndex287 := position, tokenIndex
					{
						switch buffer[position] {
						case '\r':
							if buffer[position] != rune('\r') {
								goto l287
							}
							position++
						case '\n':
							if buffer[position] != rune('\n') {
								goto l287
							}
							position++
						case '\t':
							if buffer[position] != rune('\t') {
								goto l287
							}
							position++
						default:
							if buffer[position] != rune(' ') {
								goto l287
							}
							position++
						}
					}

					goto l286
				l287:
					position, tokenIndex = position287, tokenIndex287
				}
				add(rulesp, position285)
			}
			return true
		},
		/* 39 lt <- <(('<' / '＜') sp)> */
		nil,
		/* 40 gt <- <(('>' / '＞') sp)> */
		nil,
		/* 41 le <- <((('<' '=') / ('＜' '＝')) sp)> */
		nil,
		/* 42 ge <- <((('>' '=') / ('＞' '＝')) sp)> */
		nil,
		/* 43 eq <- <((('=' '=') / ('＝' '＝')) sp)> */
		nil,
		/* 44 ne <- <((('!' '=') / ('！' '＝')) sp)> */
		nil,
		/* 45 strPart <- <(<(escape / (!((&('\r') '\r') | (&('\n') '\n') | (&('\\') '\\') | (&('`') '`') | (&('{') '{')) .))+> Action62)> */
		nil,
		/* 46 strPart2 <- <(<(escape / (!((&('\r') '\r') | (&('\n') '\n') | (&('\\') '\\') | (&('"') '"') | (&('{') '{')) .))+> Action63)> */
		nil,
		/* 47 strPart3 <- <(<(escape / (!((&('\r') '\r') | (&('\n') '\n') | (&('\\') '\\') | (&('\'') '\'') | (&('{') '{')) .))+> Action64)> */
		nil,
		/* 48 fstring <- <(((&('\'') ('\'' Action71 <strPart3*> '\'' Action72)) | (&('"') ('"' Action69 <strPart2*> '"' Action70)) | (&('`') ('`' Action65 <(('{' sp e Action66 '}') / ('{' '{' sp e Action67 ('}' '}')) / strPart)*> '`' Action68))) sp)> */
		func() bool {
			position298, tokenIndex298 := position, tokenIndex
			{
				position299 := position
				{
					switch buffer[position] {
					case '\'':
						if buffer[position] != rune('\'') {
							goto l298
						}
						position++
						{
							add(ruleAction71, position)
						}
						{
							position302 := position
						l303:
							{
								position304, tokenIndex304 := position, tokenIndex
								{
									position305 := position
									{
										position306 := position
										{
											position309, tokenIndex309 := position, tokenIndex
											if !_rules[ruleescape]() {
												goto l310
											}
											goto l309
										l310:
											position, tokenIndex = position309, tokenIndex309
											{
												position311, tokenIndex311 := position, tokenIndex
												{
													switch buffer[position] {
													case '\r':
														if buffer[position] != rune('\r') {
															goto l311
														}
														position++
													case '\n':
														if buffer[position] != rune('\n') {
															goto l311
														}
														position++
													case '\\':
														if buffer[position] != rune('\\') {
															goto l311
														}
														position++
													case '\'':
														if buffer[position] != rune('\'') {
															goto l311
														}
														position++
													default:
														if buffer[position] != rune('{') {
															goto l311
														}
														position++
													}
												}

												goto l304
											l311:
												position, tokenIndex = position311, tokenIndex311
											}
											if !matchDot() {
												goto l304
											}
										}
									l309:
									l307:
										{
											position308, tokenIndex308 := position, tokenIndex
											{
												position313, tokenIndex313 := position, tokenIndex
												if !_rules[ruleescape]() {
													goto l314
												}
												goto l313
											l314:
												position, tokenIndex = position313, tokenIndex313
												{
													position315, tokenIndex315 := position, tokenIndex
													{
														switch buffer[position] {
														case '\r':
															if buffer[position] != rune('\r') {
																goto l315
															}
															position++
														case '\n':
															if buffer[position] != rune('\n') {
																goto l315
															}
															position++
														case '\\':
															if buffer[position] != rune('\\') {
																goto l315
															}
															position++
														case '\'':
															if buffer[position] != rune('\'') {
																goto l315
															}
															position++
														default:
															if buffer[position] != rune('{') {
																goto l315
															}
															position++
														}
													}

													goto l308
												l315:
													position, tokenIndex = position315, tokenIndex315
												}
												if !matchDot() {
													goto l308
												}
											}
										l313:
											goto l307
										l308:
											position, tokenIndex = position308, tokenIndex308
										}
										add(rulePegText, position306)
									}
									{
										add(ruleAction64, position)
									}
									add(rulestrPart3, position305)
								}
								goto l303
							l304:
								position, tokenIndex = position304, tokenIndex304
							}
							add(rulePegText, position302)
						}
						if buffer[position] != rune('\'') {
							goto l298
						}
						position++
						{
							add(ruleAction72, position)
						}
					case '"':
						if buffer[position] != rune('"') {
							goto l298
						}
						position++
						{
							add(ruleAction69, position)
						}
						{
							position320 := position
						l321:
							{
								position322, tokenIndex322 := position, tokenIndex
								{
									position323 := position
									{
										position324 := position
										{
											position327, tokenIndex327 := position, tokenIndex
											if !_rules[ruleescape]() {
												goto l328
											}
											goto l327
										l328:
											position, tokenIndex = position327, tokenIndex327
											{
												position329, tokenIndex329 := position, tokenIndex
												{
													switch buffer[position] {
													case '\r':
														if buffer[position] != rune('\r') {
															goto l329
														}
														position++
													case '\n':
														if buffer[position] != rune('\n') {
															goto l329
														}
														position++
													case '\\':
														if buffer[position] != rune('\\') {
															goto l329
														}
														position++
													case '"':
														if buffer[position] != rune('"') {
															goto l329
														}
														position++
													default:
														if buffer[position] != rune('{') {
															goto l329
														}
														position++
													}
												}

												goto l322
											l329:
												position, tokenIndex = position329, tokenIndex329
											}
											if !matchDot() {
												goto l322
											}
										}
									l327:
									l325:
										{
											position326, tokenIndex326 := position, tokenIndex
											{
												position331, tokenIndex331 := position, tokenIndex
												if !_rules[ruleescape]() {
													goto l332
												}
												goto l331
											l332:
												position, tokenIndex = position331, tokenIndex331
												{
													position333, tokenIndex333 := position, tokenIndex
													{
														switch buffer[position] {
														case '\r':
															if buffer[position] != rune('\r') {
																goto l333
															}
															position++
														case '\n':
															if buffer[position] != rune('\n') {
																goto l333
															}
															position++
														case '\\':
															if buffer[position] != rune('\\') {
																goto l333
															}
															position++
														case '"':
															if buffer[position] != rune('"') {
																goto l333
															}
															position++
														default:
															if buffer[position] != rune('{') {
																goto l333
															}
															position++
														}
													}

													goto l326
												l333:
													position, tokenIndex = position333, tokenIndex333
												}
												if !matchDot() {
													goto l326
												}
											}
										l331:
											goto l325
										l326:
											position, tokenIndex = position326, tokenIndex326
										}
										add(rulePegText, position324)
									}
									{
										add(ruleAction63, position)
									}
									add(rulestrPart2, position323)
								}
								goto l321
							l322:
								position, tokenIndex = position322, tokenIndex322
							}
							add(rulePegText, position320)
						}
						if buffer[position] != rune('"') {
							goto l298
						}
						position++
						{
							add(ruleAction70, position)
						}
					default:
						if buffer[position] != rune('`') {
							goto l298
						}
						position++
						{
							add(ruleAction65, position)
						}
						{
							position338 := position
						l339:
							{
								position340, tokenIndex340 := position, tokenIndex
								{
									position341, tokenIndex341 := position, tokenIndex
									if buffer[position] != rune('{') {
										goto l342
									}
									position++
									if !_rules[rulesp]() {
										goto l342
									}
									if !_rules[rulee]() {
										goto l342
									}
									{
										add(ruleAction66, position)
									}
									if buffer[position] != rune('}') {
										goto l342
									}
									position++
									goto l341
								l342:
									position, tokenIndex = position341, tokenIndex341
									if buffer[position] != rune('{') {
										goto l344
									}
									position++
									if buffer[position] != rune('{') {
										goto l344
									}
									position++
									if !_rules[rulesp]() {
										goto l344
									}
									if !_rules[rulee]() {
										goto l344
									}
									{
										add(ruleAction67, position)
									}
									if buffer[position] != rune('}') {
										goto l344
									}
									position++
									if buffer[position] != rune('}') {
										goto l344
									}
									position++
									goto l341
								l344:
									position, tokenIndex = position341, tokenIndex341
									{
										position346 := position
										{
											position347 := position
											{
												position350, tokenIndex350 := position, tokenIndex
												if !_rules[ruleescape]() {
													goto l351
												}
												goto l350
											l351:
												position, tokenIndex = position350, tokenIndex350
												{
													position352, tokenIndex352 := position, tokenIndex
													{
														switch buffer[position] {
														case '\r':
															if buffer[position] != rune('\r') {
																goto l352
															}
															position++
														case '\n':
															if buffer[position] != rune('\n') {
																goto l352
															}
															position++
														case '\\':
															if buffer[position] != rune('\\') {
																goto l352
															}
															position++
														case '`':
															if buffer[position] != rune('`') {
																goto l352
															}
															position++
														default:
															if buffer[position] != rune('{') {
																goto l352
															}
															position++
														}
													}

													goto l340
												l352:
													position, tokenIndex = position352, tokenIndex352
												}
												if !matchDot() {
													goto l340
												}
											}
										l350:
										l348:
											{
												position349, tokenIndex349 := position, tokenIndex
												{
													position354, tokenIndex354 := position, tokenIndex
													if !_rules[ruleescape]() {
														goto l355
													}
													goto l354
												l355:
													position, tokenIndex = position354, tokenIndex354
													{
														position356, tokenIndex356 := position, tokenIndex
														{
															switch buffer[position] {
															case '\r':
																if buffer[position] != rune('\r') {
																	goto l356
																}
																position++
															case '\n':
																if buffer[position] != rune('\n') {
																	goto l356
																}
																position++
															case '\\':
																if buffer[position] != rune('\\') {
																	goto l356
																}
																position++
															case '`':
																if buffer[position] != rune('`') {
																	goto l356
																}
																position++
															default:
																if buffer[position] != rune('{') {
																	goto l356
																}
																position++
															}
														}

														goto l349
													l356:
														position, tokenIndex = position356, tokenIndex356
													}
													if !matchDot() {
														goto l349
													}
												}
											l354:
												goto l348
											l349:
												position, tokenIndex = position349, tokenIndex349
											}
											add(rulePegText, position347)
										}
										{
											add(ruleAction62, position)
										}
										add(rulestrPart, position346)
									}
								}
							l341:
								goto l339
							l340:
								position, tokenIndex = position340, tokenIndex340
							}
							add(rulePegText, position338)
						}
						if buffer[position] != rune('`') {
							goto l298
						}
						position++
						{
							add(ruleAction68, position)
						}
					}
				}

				if !_rules[rulesp]() {
					goto l298
				}
				add(rulefstring, position299)
			}
			return true
		l298:
			position, tokenIndex = position298, tokenIndex298
			return false
		},
		/* 49 escape <- <('\\' ((&('\\') '\\') | (&('\'') '\'') | (&('"') '"') | (&('r') 'r') | (&('f') 'f') | (&('n') 'n') | (&('t') 't') | (&('b') 'b')))> */
		func() bool {
			position360, tokenIndex360 := position, tokenIndex
			{
				position361 := position
				if buffer[position] != rune('\\') {
					goto l360
				}
				position++
				{
					switch buffer[position] {
					case '\\':
						if buffer[position] != rune('\\') {
							goto l360
						}
						position++
					case '\'':
						if buffer[position] != rune('\'') {
							goto l360
						}
						position++
					case '"':
						if buffer[position] != rune('"') {
							goto l360
						}
						position++
					case 'r':
						if buffer[position] != rune('r') {
							goto l360
						}
						position++
					case 'f':
						if buffer[position] != rune('f') {
							goto l360
						}
						position++
					case 'n':
						if buffer[position] != rune('n') {
							goto l360
						}
						position++
					case 't':
						if buffer[position] != rune('t') {
							goto l360
						}
						position++
					default:
						if buffer[position] != rune('b') {
							goto l360
						}
						position++
					}
				}

				add(ruleescape, position361)
			}
			return true
		l360:
			position, tokenIndex = position360, tokenIndex360
			return false
		},
		/* 51 Action0 <- <{ p.AddOperator(TypeHalt) }> */
		nil,
		/* 52 Action1 <- <{ p.AddOperator(TypeClearDetail) }> */
		nil,
		/* 53 Action2 <- <{ p.AddValueStr(string(text)) }> */
		nil,
		/* 54 Action3 <- <{ p.AddStore() }> */
		nil,
		/* 55 Action4 <- <{ p.AddOperator(TypeJne); p.PushForOffset() }> */
		nil,
		/* 56 Action5 <- <{ p.AddOperator(TypeJmp); p.PopAndSetOffset(); p.PushForOffset(); }> */
		nil,
		/* 57 Action6 <- <{ p.AddOperator(TypeJne); p.PushForOffset() }> */
		nil,
		/* 58 Action7 <- <{ p.AddOperator(TypeJmp); p.PopAndSetOffset(); p.PushForOffset() }> */
		nil,
		/* 59 Action8 <- <{ p.PopAndSetOffset() }> */
		nil,
		/* 60 Action9 <- <{ p.CounterPush() }> */
		nil,
		/* 61 Action10 <- <{p.CounterAdd(1)}> */
		nil,
		/* 62 Action11 <- <{ p.AddValueStr(""); limit:=p.CounterPop()+1; for i:=int64(0); i<limit; i++ { p.PopAndSetOffset() } }> */
		nil,
		/* 63 Action12 <- <{ p.AddLeftValueMark() }> */
		nil,
		/* 64 Action13 <- <{ p.AddOperator(TypeBitwiseOr) }> */
		nil,
		/* 65 Action14 <- <{ p.AddLeftValueMark() }> */
		nil,
		/* 66 Action15 <- <{ p.AddOperator(TypeBitwiseAnd) }> */
		nil,
		/* 67 Action16 <- <{ p.AddLeftValueMark() }> */
		nil,
		/* 68 Action17 <- <{ p.AddOperator(TypeCompLT) }> */
		nil,
		/* 69 Action18 <- <{ p.AddLeftValueMark() }> */
		nil,
		/* 70 Action19 <- <{ p.AddOperator(TypeCompLE) }> */
		nil,
		/* 71 Action20 <- <{ p.AddLeftValueMark() }> */
		nil,
		/* 72 Action21 <- <{ p.AddOperator(TypeCompEQ) }> */
		nil,
		/* 73 Action22 <- <{ p.AddLeftValueMark() }> */
		nil,
		/* 74 Action23 <- <{ p.AddOperator(TypeCompNE) }> */
		nil,
		/* 75 Action24 <- <{ p.AddLeftValueMark() }> */
		nil,
		/* 76 Action25 <- <{ p.AddOperator(TypeCompGE) }> */
		nil,
		/* 77 Action26 <- <{ p.AddLeftValueMark() }> */
		nil,
		/* 78 Action27 <- <{ p.AddOperator(TypeCompGT) }> */
		nil,
		/* 79 Action28 <- <{ p.AddLeftValueMark() }> */
		nil,
		/* 80 Action29 <- <{ p.AddOperator(TypeAdd) }> */
		nil,
		/* 81 Action30 <- <{ p.AddLeftValueMark() }> */
		nil,
		/* 82 Action31 <- <{ p.AddOperator(TypeSubtract) }> */
		nil,
		/* 83 Action32 <- <{ p.AddLeftValueMark() }> */
		nil,
		/* 84 Action33 <- <{ p.AddOperator(TypeMultiply) }> */
		nil,
		/* 85 Action34 <- <{ p.AddLeftValueMark() }> */
		nil,
		/* 86 Action35 <- <{ p.AddOperator(TypeDivide) }> */
		nil,
		/* 87 Action36 <- <{ p.AddLeftValueMark() }> */
		nil,
		/* 88 Action37 <- <{ p.AddOperator(TypeModulus) }> */
		nil,
		/* 89 Action38 <- <{ p.AddLeftValueMark() }> */
		nil,
		/* 90 Action39 <- <{ p.AddOperator(TypeExponentiation) }> */
		nil,
		/* 91 Action40 <- <{ p.AddOperator(TypeNegation) }> */
		nil,
		/* 92 Action41 <- <{p.AddValue("1"); p.AddOperator(TypeDiceSetK)}> */
		nil,
		/* 93 Action42 <- <{p.AddValue("1"); p.AddOperator(TypeDiceSetQ)}> */
		nil,
		/* 94 Action43 <- <{ p.AddOperator(TypeDiceSetK) }> */
		nil,
		/* 95 Action44 <- <{ p.AddOperator(TypeDiceSetQ) }> */
		nil,
		/* 96 Action45 <- <{ p.AddOperatorWithInt64(TypeDiceSetK, 1) }> */
		nil,
		/* 97 Action46 <- <{ p.AddOperatorWithInt64(TypeDiceSetQ, 1) }> */
		nil,
		/* 98 Action47 <- <{ p.AddValue("2"); p.AddLeftValueMark() }> */
		nil,
		/* 99 Action48 <- <{ p.AddOperator(TypeDice) }> */
		nil,
		/* 100 Action49 <- <{ p.AddValue("1"); p.AddLeftValueMark() }> */
		nil,
		/* 101 Action50 <- <{ p.AddOperator(TypeDice) }> */
		nil,
		/* 102 Action51 <- <{ p.AddValue("2"); p.AddLeftValueMark(); p.AddValue("0"); p.AddOperator(TypeDice) }> */
		nil,
		/* 103 Action52 <- <{ p.AddValue("1"); p.AddLeftValueMark(); p.AddValue("0"); p.AddOperator(TypeDice) }> */
		nil,
		/* 104 Action53 <- <{ p.AddLeftValueMark() }> */
		nil,
		/* 105 Action54 <- <{ p.AddOperator(TypeDice) }> */
		nil,
		/* 106 Action55 <- <{ p.AddOperator(TypeDicePenalty) }> */
		nil,
		/* 107 Action56 <- <{ p.AddValue("1"); p.AddOperator(TypeDicePenalty) }> */
		nil,
		/* 108 Action57 <- <{ p.AddOperator(TypeDiceBonus) }> */
		nil,
		/* 109 Action58 <- <{ p.AddValue("1"); p.AddOperator(TypeDiceBonus) }> */
		nil,
		/* 110 Action59 <- <{ p.AddValue("0"); p.AddValue("0"); p.AddOperator(TypeDiceFate) }> */
		nil,
		/* 111 Action60 <- <{ p.AddLoadVarname(string(text)) }> */
		nil,
		nil,
		/* 113 Action61 <- <{ p.AddValue(string(text)) }> */
		nil,
		/* 114 Action62 <- <{ p.AddValueStr(string(text)); p.CounterAdd(1) }> */
		nil,
		/* 115 Action63 <- <{ p.AddValueStr(string(text)); p.CounterAdd(1) }> */
		nil,
		/* 116 Action64 <- <{ p.AddValueStr(string(text)); p.CounterAdd(1) }> */
		nil,
		/* 117 Action65 <- <{ p.CounterPush() }> */
		nil,
		/* 118 Action66 <- <{p.CounterAdd(1)}> */
		nil,
		/* 119 Action67 <- <{p.CounterAdd(1)}> */
		nil,
		/* 120 Action68 <- <{ p.AddFormatString(string(text), p.CounterPop()) }> */
		nil,
		/* 121 Action69 <- <{ p.CounterPush() }> */
		nil,
		/* 122 Action70 <- <{ p.AddFormatString(string(text), p.CounterPop()) }> */
		nil,
		/* 123 Action71 <- <{ p.CounterPush() }> */
		nil,
		/* 124 Action72 <- <{ p.AddFormatString(string(text), p.CounterPop()) }> */
		nil,
	}
	p.rules = _rules
	return nil
}
