package dice

// Code generated by peg -switch -inline dice/roll.peg DO NOT EDIT.

import (
	"fmt"
	"io"
	"os"
	"sort"
	"strconv"
	"strings"
)

const endSymbol rune = 1114112

/* The rule types inferred from the grammar are below. */
type pegRule uint8

const (
	ruleUnknown pegRule = iota
	rulee
	rulee1
	rulee2
	rulee3
	ruleeDice
	ruleeDice2
	ruleeDice3
	rulee4
	rulevalue
	rulenumber
	ruleassign_expr
	ruleidentifier
	rulesub
	ruleadd
	ruleminus
	rulemultiply
	ruledivide
	rulemodulus
	ruleexponentiation
	ruleopen
	ruleclose
	rulesp
	rulefstring
	ruleescape
	ruleAction0
	ruleAction1
	ruleAction2
	ruleAction3
	ruleAction4
	ruleAction5
	ruleAction6
	ruleAction7
	ruleAction8
	ruleAction9
	ruleAction10
	ruleAction11
	ruleAction12
	ruleAction13
	ruleAction14
	ruleAction15
	ruleAction16
	ruleAction17
	ruleAction18
	ruleAction19
	ruleAction20
	ruleAction21
	ruleAction22
	ruleAction23
	rulePegText
	ruleAction24
	ruleAction25
	ruleAction26
)

var rul3s = [...]string{
	"Unknown",
	"e",
	"e1",
	"e2",
	"e3",
	"eDice",
	"eDice2",
	"eDice3",
	"e4",
	"value",
	"number",
	"assign_expr",
	"identifier",
	"sub",
	"add",
	"minus",
	"multiply",
	"divide",
	"modulus",
	"exponentiation",
	"open",
	"close",
	"sp",
	"fstring",
	"escape",
	"Action0",
	"Action1",
	"Action2",
	"Action3",
	"Action4",
	"Action5",
	"Action6",
	"Action7",
	"Action8",
	"Action9",
	"Action10",
	"Action11",
	"Action12",
	"Action13",
	"Action14",
	"Action15",
	"Action16",
	"Action17",
	"Action18",
	"Action19",
	"Action20",
	"Action21",
	"Action22",
	"Action23",
	"PegText",
	"Action24",
	"Action25",
	"Action26",
}

type token32 struct {
	pegRule
	begin, end uint32
}

func (t *token32) String() string {
	return fmt.Sprintf("\x1B[34m%v\x1B[m %v %v", rul3s[t.pegRule], t.begin, t.end)
}

type node32 struct {
	token32
	up, next *node32
}

func (node *node32) print(w io.Writer, pretty bool, buffer string) {
	var print func(node *node32, depth int)
	print = func(node *node32, depth int) {
		for node != nil {
			for c := 0; c < depth; c++ {
				fmt.Fprintf(w, " ")
			}
			rule := rul3s[node.pegRule]
			quote := strconv.Quote(string(([]rune(buffer)[node.begin:node.end])))
			if !pretty {
				fmt.Fprintf(w, "%v %v\n", rule, quote)
			} else {
				fmt.Fprintf(w, "\x1B[36m%v\x1B[m %v\n", rule, quote)
			}
			if node.up != nil {
				print(node.up, depth+1)
			}
			node = node.next
		}
	}
	print(node, 0)
}

func (node *node32) Print(w io.Writer, buffer string) {
	node.print(w, false, buffer)
}

func (node *node32) PrettyPrint(w io.Writer, buffer string) {
	node.print(w, true, buffer)
}

type tokens32 struct {
	tree []token32
}

func (t *tokens32) Trim(length uint32) {
	t.tree = t.tree[:length]
}

func (t *tokens32) Print() {
	for _, token := range t.tree {
		fmt.Println(token.String())
	}
}

func (t *tokens32) AST() *node32 {
	type element struct {
		node *node32
		down *element
	}
	tokens := t.Tokens()
	var stack *element
	for _, token := range tokens {
		if token.begin == token.end {
			continue
		}
		node := &node32{token32: token}
		for stack != nil && stack.node.begin >= token.begin && stack.node.end <= token.end {
			stack.node.next = node.up
			node.up = stack.node
			stack = stack.down
		}
		stack = &element{node: node, down: stack}
	}
	if stack != nil {
		return stack.node
	}
	return nil
}

func (t *tokens32) PrintSyntaxTree(buffer string) {
	t.AST().Print(os.Stdout, buffer)
}

func (t *tokens32) WriteSyntaxTree(w io.Writer, buffer string) {
	t.AST().Print(w, buffer)
}

func (t *tokens32) PrettyPrintSyntaxTree(buffer string) {
	t.AST().PrettyPrint(os.Stdout, buffer)
}

func (t *tokens32) Add(rule pegRule, begin, end, index uint32) {
	tree, i := t.tree, int(index)
	if i >= len(tree) {
		t.tree = append(tree, token32{pegRule: rule, begin: begin, end: end})
		return
	}
	tree[i] = token32{pegRule: rule, begin: begin, end: end}
}

func (t *tokens32) Tokens() []token32 {
	return t.tree
}

type DiceRollParser struct {
	RollExpression

	Buffer string
	buffer []rune
	rules  [53]func() bool
	parse  func(rule ...int) error
	reset  func()
	Pretty bool
	tokens32
}

func (p *DiceRollParser) Parse(rule ...int) error {
	return p.parse(rule...)
}

func (p *DiceRollParser) Reset() {
	p.reset()
}

type textPosition struct {
	line, symbol int
}

type textPositionMap map[int]textPosition

func translatePositions(buffer []rune, positions []int) textPositionMap {
	length, translations, j, line, symbol := len(positions), make(textPositionMap, len(positions)), 0, 1, 0
	sort.Ints(positions)

search:
	for i, c := range buffer {
		if c == '\n' {
			line, symbol = line+1, 0
		} else {
			symbol++
		}
		if i == positions[j] {
			translations[positions[j]] = textPosition{line, symbol}
			for j++; j < length; j++ {
				if i != positions[j] {
					continue search
				}
			}
			break search
		}
	}

	return translations
}

type parseError struct {
	p   *DiceRollParser
	max token32
}

func (e *parseError) Error() string {
	tokens, err := []token32{e.max}, "\n"
	positions, p := make([]int, 2*len(tokens)), 0
	for _, token := range tokens {
		positions[p], p = int(token.begin), p+1
		positions[p], p = int(token.end), p+1
	}
	translations := translatePositions(e.p.buffer, positions)
	format := "parse error near %v (line %v symbol %v - line %v symbol %v):\n%v\n"
	if e.p.Pretty {
		format = "parse error near \x1B[34m%v\x1B[m (line %v symbol %v - line %v symbol %v):\n%v\n"
	}
	for _, token := range tokens {
		begin, end := int(token.begin), int(token.end)
		err += fmt.Sprintf(format,
			rul3s[token.pegRule],
			translations[begin].line, translations[begin].symbol,
			translations[end].line, translations[end].symbol,
			strconv.Quote(string(e.p.buffer[begin:end])))
	}

	return err
}

func (p *DiceRollParser) PrintSyntaxTree() {
	if p.Pretty {
		p.tokens32.PrettyPrintSyntaxTree(p.Buffer)
	} else {
		p.tokens32.PrintSyntaxTree(p.Buffer)
	}
}

func (p *DiceRollParser) WriteSyntaxTree(w io.Writer) {
	p.tokens32.WriteSyntaxTree(w, p.Buffer)
}

func (p *DiceRollParser) SprintSyntaxTree() string {
	var bldr strings.Builder
	p.WriteSyntaxTree(&bldr)
	return bldr.String()
}

func (p *DiceRollParser) Execute() {
	buffer, _buffer, text, begin, end := p.Buffer, p.buffer, "", 0, 0
	for _, token := range p.Tokens() {
		switch token.pegRule {

		case rulePegText:
			begin, end = int(token.begin), int(token.end)
			text = string(_buffer[begin:end])

		case ruleAction0:
			p.AddOperator(TypeHalt)
		case ruleAction1:
			p.AddLeftValueMark()
		case ruleAction2:
			p.AddOperator(TypeAdd)
		case ruleAction3:
			p.AddLeftValueMark()
		case ruleAction4:
			p.AddOperator(TypeSubtract)
		case ruleAction5:
			p.AddLeftValueMark()
		case ruleAction6:
			p.AddOperator(TypeMultiply)
		case ruleAction7:
			p.AddLeftValueMark()
		case ruleAction8:
			p.AddOperator(TypeDivide)
		case ruleAction9:
			p.AddLeftValueMark()
		case ruleAction10:
			p.AddOperator(TypeModulus)
		case ruleAction11:
			p.AddLeftValueMark()
		case ruleAction12:
			p.AddOperator(TypeExponentiation)
		case ruleAction13:
			p.AddLeftValueMark()
		case ruleAction14:
			p.AddOperator(TypeDiceSetK)
		case ruleAction15:
			p.AddOperator(TypeDice)
		case ruleAction16:
			p.AddValue("1")
			p.AddLeftValueMark()
		case ruleAction17:
			p.AddOperator(TypeDiceSetK)
		case ruleAction18:
			p.AddOperator(TypeDice)
		case ruleAction19:
			p.AddOperator(TypeDicePenalty)
		case ruleAction20:
			p.AddOperator(TypeDiceBonus)
		case ruleAction21:
			p.AddOperator(TypeNegation)
		case ruleAction22:
			p.AddValue(string(text))
		case ruleAction23:
			p.AddLoadVarname(string(text))
		case ruleAction24:
			p.AddValueStr(string(text))
		case ruleAction25:
			p.AddStore()
		case ruleAction26:
			p.AddFormatString(string(text))

		}
	}
	_, _, _, _, _ = buffer, _buffer, text, begin, end
}

func Pretty(pretty bool) func(*DiceRollParser) error {
	return func(p *DiceRollParser) error {
		p.Pretty = pretty
		return nil
	}
}

func Size(size int) func(*DiceRollParser) error {
	return func(p *DiceRollParser) error {
		p.tokens32 = tokens32{tree: make([]token32, 0, size)}
		return nil
	}
}
func (p *DiceRollParser) Init(options ...func(*DiceRollParser) error) error {
	var (
		max                  token32
		position, tokenIndex uint32
		buffer               []rune
	)
	for _, option := range options {
		err := option(p)
		if err != nil {
			return err
		}
	}
	p.reset = func() {
		max = token32{}
		position, tokenIndex = 0, 0

		p.buffer = []rune(p.Buffer)
		if len(p.buffer) == 0 || p.buffer[len(p.buffer)-1] != endSymbol {
			p.buffer = append(p.buffer, endSymbol)
		}
		buffer = p.buffer
	}
	p.reset()

	_rules := p.rules
	tree := p.tokens32
	p.parse = func(rule ...int) error {
		r := 1
		if len(rule) > 0 {
			r = rule[0]
		}
		matches := p.rules[r]()
		p.tokens32 = tree
		if matches {
			p.Trim(tokenIndex)
			return nil
		}
		return &parseError{p, max}
	}

	add := func(rule pegRule, begin uint32) {
		tree.Add(rule, begin, position, tokenIndex)
		tokenIndex++
		if begin != position && position > max.end {
			max = token32{rule, begin, position}
		}
	}

	matchDot := func() bool {
		if buffer[position] != endSymbol {
			position++
			return true
		}
		return false
	}

	/*matchChar := func(c byte) bool {
		if buffer[position] == c {
			position++
			return true
		}
		return false
	}*/

	/*matchRange := func(lower byte, upper byte) bool {
		if c := buffer[position]; c >= lower && c <= upper {
			position++
			return true
		}
		return false
	}*/

	_rules = [...]func() bool{
		nil,
		/* 0 e <- <(sp (fstring / e1) !. Action0)> */
		func() bool {
			position0, tokenIndex0 := position, tokenIndex
			{
				position1 := position
				if !_rules[rulesp]() {
					goto l0
				}
				{
					position2, tokenIndex2 := position, tokenIndex
					{
						position4 := position
						if buffer[position] != rune('`') {
							goto l3
						}
						position++
						{
							position5 := position
						l6:
							{
								position7, tokenIndex7 := position, tokenIndex
								{
									position8, tokenIndex8 := position, tokenIndex
									if buffer[position] != rune('{') {
										goto l9
									}
									position++
									if !_rules[rulesp]() {
										goto l9
									}
									if !_rules[rulee1]() {
										goto l9
									}
									if !_rules[rulesp]() {
										goto l9
									}
									if buffer[position] != rune('}') {
										goto l9
									}
									position++
									goto l8
								l9:
									position, tokenIndex = position8, tokenIndex8
									{
										position11 := position
										if buffer[position] != rune('\\') {
											goto l10
										}
										position++
										{
											switch buffer[position] {
											case '\\':
												if buffer[position] != rune('\\') {
													goto l10
												}
												position++
											case '\'':
												if buffer[position] != rune('\'') {
													goto l10
												}
												position++
											case '"':
												if buffer[position] != rune('"') {
													goto l10
												}
												position++
											case 'r':
												if buffer[position] != rune('r') {
													goto l10
												}
												position++
											case 'f':
												if buffer[position] != rune('f') {
													goto l10
												}
												position++
											case 'n':
												if buffer[position] != rune('n') {
													goto l10
												}
												position++
											case 't':
												if buffer[position] != rune('t') {
													goto l10
												}
												position++
											default:
												if buffer[position] != rune('b') {
													goto l10
												}
												position++
											}
										}

										add(ruleescape, position11)
									}
									goto l8
								l10:
									position, tokenIndex = position8, tokenIndex8
									{
										position13, tokenIndex13 := position, tokenIndex
										{
											switch buffer[position] {
											case '\r':
												if buffer[position] != rune('\r') {
													goto l13
												}
												position++
											case '\n':
												if buffer[position] != rune('\n') {
													goto l13
												}
												position++
											case '\\':
												if buffer[position] != rune('\\') {
													goto l13
												}
												position++
											default:
												if buffer[position] != rune('`') {
													goto l13
												}
												position++
											}
										}

										goto l7
									l13:
										position, tokenIndex = position13, tokenIndex13
									}
									if !matchDot() {
										goto l7
									}
								}
							l8:
								goto l6
							l7:
								position, tokenIndex = position7, tokenIndex7
							}
							add(rulePegText, position5)
						}
						if buffer[position] != rune('`') {
							goto l3
						}
						position++
						if !_rules[rulesp]() {
							goto l3
						}
						{
							add(ruleAction26, position)
						}
						add(rulefstring, position4)
					}
					goto l2
				l3:
					position, tokenIndex = position2, tokenIndex2
					if !_rules[rulee1]() {
						goto l0
					}
				}
			l2:
				{
					position16, tokenIndex16 := position, tokenIndex
					if !matchDot() {
						goto l16
					}
					goto l0
				l16:
					position, tokenIndex = position16, tokenIndex16
				}
				{
					add(ruleAction0, position)
				}
				add(rulee, position1)
			}
			return true
		l0:
			position, tokenIndex = position0, tokenIndex0
			return false
		},
		/* 1 e1 <- <(e2 ((add Action1 e2 Action2) / (minus Action3 e2 Action4))*)> */
		func() bool {
			position18, tokenIndex18 := position, tokenIndex
			{
				position19 := position
				if !_rules[rulee2]() {
					goto l18
				}
			l20:
				{
					position21, tokenIndex21 := position, tokenIndex
					{
						position22, tokenIndex22 := position, tokenIndex
						{
							position24 := position
							if buffer[position] != rune('+') {
								goto l23
							}
							position++
							if !_rules[rulesp]() {
								goto l23
							}
							add(ruleadd, position24)
						}
						{
							add(ruleAction1, position)
						}
						if !_rules[rulee2]() {
							goto l23
						}
						{
							add(ruleAction2, position)
						}
						goto l22
					l23:
						position, tokenIndex = position22, tokenIndex22
						if !_rules[ruleminus]() {
							goto l21
						}
						{
							add(ruleAction3, position)
						}
						if !_rules[rulee2]() {
							goto l21
						}
						{
							add(ruleAction4, position)
						}
					}
				l22:
					goto l20
				l21:
					position, tokenIndex = position21, tokenIndex21
				}
				add(rulee1, position19)
			}
			return true
		l18:
			position, tokenIndex = position18, tokenIndex18
			return false
		},
		/* 2 e2 <- <(e3 ((&('%') (modulus Action9 e3 Action10)) | (&('/') (divide Action7 e3 Action8)) | (&('*') (multiply Action5 e3 Action6)))*)> */
		func() bool {
			position29, tokenIndex29 := position, tokenIndex
			{
				position30 := position
				if !_rules[rulee3]() {
					goto l29
				}
			l31:
				{
					position32, tokenIndex32 := position, tokenIndex
					{
						switch buffer[position] {
						case '%':
							{
								position34 := position
								if buffer[position] != rune('%') {
									goto l32
								}
								position++
								if !_rules[rulesp]() {
									goto l32
								}
								add(rulemodulus, position34)
							}
							{
								add(ruleAction9, position)
							}
							if !_rules[rulee3]() {
								goto l32
							}
							{
								add(ruleAction10, position)
							}
						case '/':
							{
								position37 := position
								if buffer[position] != rune('/') {
									goto l32
								}
								position++
								if !_rules[rulesp]() {
									goto l32
								}
								add(ruledivide, position37)
							}
							{
								add(ruleAction7, position)
							}
							if !_rules[rulee3]() {
								goto l32
							}
							{
								add(ruleAction8, position)
							}
						default:
							{
								position40 := position
								if buffer[position] != rune('*') {
									goto l32
								}
								position++
								if !_rules[rulesp]() {
									goto l32
								}
								add(rulemultiply, position40)
							}
							{
								add(ruleAction5, position)
							}
							if !_rules[rulee3]() {
								goto l32
							}
							{
								add(ruleAction6, position)
							}
						}
					}

					goto l31
				l32:
					position, tokenIndex = position32, tokenIndex32
				}
				add(rulee2, position30)
			}
			return true
		l29:
			position, tokenIndex = position29, tokenIndex29
			return false
		},
		/* 3 e3 <- <(eDice (exponentiation Action11 eDice Action12)*)> */
		func() bool {
			position43, tokenIndex43 := position, tokenIndex
			{
				position44 := position
				if !_rules[ruleeDice]() {
					goto l43
				}
			l45:
				{
					position46, tokenIndex46 := position, tokenIndex
					{
						position47 := position
						{
							position48, tokenIndex48 := position, tokenIndex
							if buffer[position] != rune('^') {
								goto l49
							}
							position++
							if !_rules[rulesp]() {
								goto l49
							}
							goto l48
						l49:
							position, tokenIndex = position48, tokenIndex48
							if buffer[position] != rune('*') {
								goto l46
							}
							position++
							if buffer[position] != rune('*') {
								goto l46
							}
							position++
							if !_rules[rulesp]() {
								goto l46
							}
						}
					l48:
						add(ruleexponentiation, position47)
					}
					{
						add(ruleAction11, position)
					}
					if !_rules[ruleeDice]() {
						goto l46
					}
					{
						add(ruleAction12, position)
					}
					goto l45
				l46:
					position, tokenIndex = position46, tokenIndex46
				}
				add(rulee3, position44)
			}
			return true
		l43:
			position, tokenIndex = position43, tokenIndex43
			return false
		},
		/* 4 eDice <- <((eDice2 (('d' / 'D') Action13 eDice2 ('k' eDice2 Action14)? Action15)*) / (('d' / 'D') Action16 eDice2 ('k' eDice2 Action17)? Action18)+)> */
		func() bool {
			position52, tokenIndex52 := position, tokenIndex
			{
				position53 := position
				{
					position54, tokenIndex54 := position, tokenIndex
					if !_rules[ruleeDice2]() {
						goto l55
					}
				l56:
					{
						position57, tokenIndex57 := position, tokenIndex
						{
							position58, tokenIndex58 := position, tokenIndex
							if buffer[position] != rune('d') {
								goto l59
							}
							position++
							goto l58
						l59:
							position, tokenIndex = position58, tokenIndex58
							if buffer[position] != rune('D') {
								goto l57
							}
							position++
						}
					l58:
						{
							add(ruleAction13, position)
						}
						if !_rules[ruleeDice2]() {
							goto l57
						}
						{
							position61, tokenIndex61 := position, tokenIndex
							if buffer[position] != rune('k') {
								goto l61
							}
							position++
							if !_rules[ruleeDice2]() {
								goto l61
							}
							{
								add(ruleAction14, position)
							}
							goto l62
						l61:
							position, tokenIndex = position61, tokenIndex61
						}
					l62:
						{
							add(ruleAction15, position)
						}
						goto l56
					l57:
						position, tokenIndex = position57, tokenIndex57
					}
					goto l54
				l55:
					position, tokenIndex = position54, tokenIndex54
					{
						position67, tokenIndex67 := position, tokenIndex
						if buffer[position] != rune('d') {
							goto l68
						}
						position++
						goto l67
					l68:
						position, tokenIndex = position67, tokenIndex67
						if buffer[position] != rune('D') {
							goto l52
						}
						position++
					}
				l67:
					{
						add(ruleAction16, position)
					}
					if !_rules[ruleeDice2]() {
						goto l52
					}
					{
						position70, tokenIndex70 := position, tokenIndex
						if buffer[position] != rune('k') {
							goto l70
						}
						position++
						if !_rules[ruleeDice2]() {
							goto l70
						}
						{
							add(ruleAction17, position)
						}
						goto l71
					l70:
						position, tokenIndex = position70, tokenIndex70
					}
				l71:
					{
						add(ruleAction18, position)
					}
				l65:
					{
						position66, tokenIndex66 := position, tokenIndex
						{
							position74, tokenIndex74 := position, tokenIndex
							if buffer[position] != rune('d') {
								goto l75
							}
							position++
							goto l74
						l75:
							position, tokenIndex = position74, tokenIndex74
							if buffer[position] != rune('D') {
								goto l66
							}
							position++
						}
					l74:
						{
							add(ruleAction16, position)
						}
						if !_rules[ruleeDice2]() {
							goto l66
						}
						{
							position77, tokenIndex77 := position, tokenIndex
							if buffer[position] != rune('k') {
								goto l77
							}
							position++
							if !_rules[ruleeDice2]() {
								goto l77
							}
							{
								add(ruleAction17, position)
							}
							goto l78
						l77:
							position, tokenIndex = position77, tokenIndex77
						}
					l78:
						{
							add(ruleAction18, position)
						}
						goto l65
					l66:
						position, tokenIndex = position66, tokenIndex66
					}
				}
			l54:
				add(ruleeDice, position53)
			}
			return true
		l52:
			position, tokenIndex = position52, tokenIndex52
			return false
		},
		/* 5 eDice2 <- <((('p' / 'P') eDice3 Action19) / eDice3)> */
		func() bool {
			position81, tokenIndex81 := position, tokenIndex
			{
				position82 := position
				{
					position83, tokenIndex83 := position, tokenIndex
					{
						position85, tokenIndex85 := position, tokenIndex
						if buffer[position] != rune('p') {
							goto l86
						}
						position++
						goto l85
					l86:
						position, tokenIndex = position85, tokenIndex85
						if buffer[position] != rune('P') {
							goto l84
						}
						position++
					}
				l85:
					if !_rules[ruleeDice3]() {
						goto l84
					}
					{
						add(ruleAction19, position)
					}
					goto l83
				l84:
					position, tokenIndex = position83, tokenIndex83
					if !_rules[ruleeDice3]() {
						goto l81
					}
				}
			l83:
				add(ruleeDice2, position82)
			}
			return true
		l81:
			position, tokenIndex = position81, tokenIndex81
			return false
		},
		/* 6 eDice3 <- <((('b' / 'B') eDice3 Action20) / e4)> */
		func() bool {
			position88, tokenIndex88 := position, tokenIndex
			{
				position89 := position
				{
					position90, tokenIndex90 := position, tokenIndex
					{
						position92, tokenIndex92 := position, tokenIndex
						if buffer[position] != rune('b') {
							goto l93
						}
						position++
						goto l92
					l93:
						position, tokenIndex = position92, tokenIndex92
						if buffer[position] != rune('B') {
							goto l91
						}
						position++
					}
				l92:
					if !_rules[ruleeDice3]() {
						goto l91
					}
					{
						add(ruleAction20, position)
					}
					goto l90
				l91:
					position, tokenIndex = position90, tokenIndex90
					{
						position95 := position
						{
							position96, tokenIndex96 := position, tokenIndex
							if !_rules[ruleminus]() {
								goto l97
							}
							if !_rules[rulevalue]() {
								goto l97
							}
							{
								add(ruleAction21, position)
							}
							goto l96
						l97:
							position, tokenIndex = position96, tokenIndex96
							if !_rules[rulevalue]() {
								goto l88
							}
						}
					l96:
						add(rulee4, position95)
					}
				}
			l90:
				add(ruleeDice3, position89)
			}
			return true
		l88:
			position, tokenIndex = position88, tokenIndex88
			return false
		},
		/* 7 e4 <- <((minus value Action21) / value)> */
		nil,
		/* 8 value <- <((number Action22) / assign_expr / (identifier Action23) / sub)> */
		func() bool {
			position100, tokenIndex100 := position, tokenIndex
			{
				position101 := position
				{
					position102, tokenIndex102 := position, tokenIndex
					{
						position104 := position
						{
							position105 := position
							if c := buffer[position]; c < rune('0') || c > rune('9') {
								goto l103
							}
							position++
						l106:
							{
								position107, tokenIndex107 := position, tokenIndex
								if c := buffer[position]; c < rune('0') || c > rune('9') {
									goto l107
								}
								position++
								goto l106
							l107:
								position, tokenIndex = position107, tokenIndex107
							}
							add(rulePegText, position105)
						}
						if !_rules[rulesp]() {
							goto l103
						}
						add(rulenumber, position104)
					}
					{
						add(ruleAction22, position)
					}
					goto l102
				l103:
					position, tokenIndex = position102, tokenIndex102
					{
						position110 := position
						if !_rules[ruleidentifier]() {
							goto l109
						}
						{
							add(ruleAction24, position)
						}
						if buffer[position] != rune('=') {
							goto l109
						}
						position++
						if !_rules[rulee1]() {
							goto l109
						}
						{
							add(ruleAction25, position)
						}
						add(ruleassign_expr, position110)
					}
					goto l102
				l109:
					position, tokenIndex = position102, tokenIndex102
					if !_rules[ruleidentifier]() {
						goto l113
					}
					{
						add(ruleAction23, position)
					}
					goto l102
				l113:
					position, tokenIndex = position102, tokenIndex102
					{
						position115 := position
						{
							position116 := position
							if buffer[position] != rune('(') {
								goto l100
							}
							position++
							if !_rules[rulesp]() {
								goto l100
							}
							add(ruleopen, position116)
						}
						if !_rules[rulee1]() {
							goto l100
						}
						{
							position117 := position
							if buffer[position] != rune(')') {
								goto l100
							}
							position++
							if !_rules[rulesp]() {
								goto l100
							}
							add(ruleclose, position117)
						}
						add(rulesub, position115)
					}
				}
			l102:
				add(rulevalue, position101)
			}
			return true
		l100:
			position, tokenIndex = position100, tokenIndex100
			return false
		},
		/* 9 number <- <(<[0-9]+> sp)> */
		nil,
		/* 10 assign_expr <- <(identifier Action24 '=' e1 Action25)> */
		nil,
		/* 11 identifier <- <(!'d' <(!((&('\r') '\r') | (&('\n') '\n') | (&('\t') '\t') | (&(' ') ' ') | (&('~') '~') | (&('}') '}') | (&('|') '|') | (&('{') '{') | (&('`') '`') | (&('^') '^') | (&(']') ']') | (&('\\') '\\') | (&('[') '[') | (&('@') '@') | (&('?') '?') | (&('>') '>') | (&('=') '=') | (&('<') '<') | (&(';') ';') | (&(':') ':') | (&('/') '/') | (&('+') '+') | (&('*') '*') | (&(')') ')') | (&('(') '(') | (&('\'') '\'') | (&('&') '&') | (&('%') '%') | (&('#') '#') | (&('"') '"') | (&('!') '!') | (&(',' | '-' | '.') [,-.]) | (&('0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9') [0-9])) . (!((&('\r') '\r') | (&('\n') '\n') | (&('\t') '\t') | (&(' ') ' ') | (&('~') '~') | (&('}') '}') | (&('|') '|') | (&('{') '{') | (&('`') '`') | (&('^') '^') | (&(']') ']') | (&('\\') '\\') | (&('[') '[') | (&('@') '@') | (&('?') '?') | (&('>') '>') | (&('=') '=') | (&('<') '<') | (&(';') ';') | (&('/') '/') | (&('+') '+') | (&('*') '*') | (&(')') ')') | (&('(') '(') | (&('\'') '\'') | (&('&') '&') | (&('%') '%') | (&('$') '$') | (&('#') '#') | (&('"') '"') | (&('!') '!') | (&(',' | '-' | '.') [,-.])) .)*)> sp)> */
		func() bool {
			position120, tokenIndex120 := position, tokenIndex
			{
				position121 := position
				{
					position122, tokenIndex122 := position, tokenIndex
					if buffer[position] != rune('d') {
						goto l122
					}
					position++
					goto l120
				l122:
					position, tokenIndex = position122, tokenIndex122
				}
				{
					position123 := position
					{
						position124, tokenIndex124 := position, tokenIndex
						{
							switch buffer[position] {
							case '\r':
								if buffer[position] != rune('\r') {
									goto l124
								}
								position++
							case '\n':
								if buffer[position] != rune('\n') {
									goto l124
								}
								position++
							case '\t':
								if buffer[position] != rune('\t') {
									goto l124
								}
								position++
							case ' ':
								if buffer[position] != rune(' ') {
									goto l124
								}
								position++
							case '~':
								if buffer[position] != rune('~') {
									goto l124
								}
								position++
							case '}':
								if buffer[position] != rune('}') {
									goto l124
								}
								position++
							case '|':
								if buffer[position] != rune('|') {
									goto l124
								}
								position++
							case '{':
								if buffer[position] != rune('{') {
									goto l124
								}
								position++
							case '`':
								if buffer[position] != rune('`') {
									goto l124
								}
								position++
							case '^':
								if buffer[position] != rune('^') {
									goto l124
								}
								position++
							case ']':
								if buffer[position] != rune(']') {
									goto l124
								}
								position++
							case '\\':
								if buffer[position] != rune('\\') {
									goto l124
								}
								position++
							case '[':
								if buffer[position] != rune('[') {
									goto l124
								}
								position++
							case '@':
								if buffer[position] != rune('@') {
									goto l124
								}
								position++
							case '?':
								if buffer[position] != rune('?') {
									goto l124
								}
								position++
							case '>':
								if buffer[position] != rune('>') {
									goto l124
								}
								position++
							case '=':
								if buffer[position] != rune('=') {
									goto l124
								}
								position++
							case '<':
								if buffer[position] != rune('<') {
									goto l124
								}
								position++
							case ';':
								if buffer[position] != rune(';') {
									goto l124
								}
								position++
							case ':':
								if buffer[position] != rune(':') {
									goto l124
								}
								position++
							case '/':
								if buffer[position] != rune('/') {
									goto l124
								}
								position++
							case '+':
								if buffer[position] != rune('+') {
									goto l124
								}
								position++
							case '*':
								if buffer[position] != rune('*') {
									goto l124
								}
								position++
							case ')':
								if buffer[position] != rune(')') {
									goto l124
								}
								position++
							case '(':
								if buffer[position] != rune('(') {
									goto l124
								}
								position++
							case '\'':
								if buffer[position] != rune('\'') {
									goto l124
								}
								position++
							case '&':
								if buffer[position] != rune('&') {
									goto l124
								}
								position++
							case '%':
								if buffer[position] != rune('%') {
									goto l124
								}
								position++
							case '#':
								if buffer[position] != rune('#') {
									goto l124
								}
								position++
							case '"':
								if buffer[position] != rune('"') {
									goto l124
								}
								position++
							case '!':
								if buffer[position] != rune('!') {
									goto l124
								}
								position++
							case ',', '-', '.':
								if c := buffer[position]; c < rune(',') || c > rune('.') {
									goto l124
								}
								position++
							default:
								if c := buffer[position]; c < rune('0') || c > rune('9') {
									goto l124
								}
								position++
							}
						}

						goto l120
					l124:
						position, tokenIndex = position124, tokenIndex124
					}
					if !matchDot() {
						goto l120
					}
				l126:
					{
						position127, tokenIndex127 := position, tokenIndex
						{
							position128, tokenIndex128 := position, tokenIndex
							{
								switch buffer[position] {
								case '\r':
									if buffer[position] != rune('\r') {
										goto l128
									}
									position++
								case '\n':
									if buffer[position] != rune('\n') {
										goto l128
									}
									position++
								case '\t':
									if buffer[position] != rune('\t') {
										goto l128
									}
									position++
								case ' ':
									if buffer[position] != rune(' ') {
										goto l128
									}
									position++
								case '~':
									if buffer[position] != rune('~') {
										goto l128
									}
									position++
								case '}':
									if buffer[position] != rune('}') {
										goto l128
									}
									position++
								case '|':
									if buffer[position] != rune('|') {
										goto l128
									}
									position++
								case '{':
									if buffer[position] != rune('{') {
										goto l128
									}
									position++
								case '`':
									if buffer[position] != rune('`') {
										goto l128
									}
									position++
								case '^':
									if buffer[position] != rune('^') {
										goto l128
									}
									position++
								case ']':
									if buffer[position] != rune(']') {
										goto l128
									}
									position++
								case '\\':
									if buffer[position] != rune('\\') {
										goto l128
									}
									position++
								case '[':
									if buffer[position] != rune('[') {
										goto l128
									}
									position++
								case '@':
									if buffer[position] != rune('@') {
										goto l128
									}
									position++
								case '?':
									if buffer[position] != rune('?') {
										goto l128
									}
									position++
								case '>':
									if buffer[position] != rune('>') {
										goto l128
									}
									position++
								case '=':
									if buffer[position] != rune('=') {
										goto l128
									}
									position++
								case '<':
									if buffer[position] != rune('<') {
										goto l128
									}
									position++
								case ';':
									if buffer[position] != rune(';') {
										goto l128
									}
									position++
								case '/':
									if buffer[position] != rune('/') {
										goto l128
									}
									position++
								case '+':
									if buffer[position] != rune('+') {
										goto l128
									}
									position++
								case '*':
									if buffer[position] != rune('*') {
										goto l128
									}
									position++
								case ')':
									if buffer[position] != rune(')') {
										goto l128
									}
									position++
								case '(':
									if buffer[position] != rune('(') {
										goto l128
									}
									position++
								case '\'':
									if buffer[position] != rune('\'') {
										goto l128
									}
									position++
								case '&':
									if buffer[position] != rune('&') {
										goto l128
									}
									position++
								case '%':
									if buffer[position] != rune('%') {
										goto l128
									}
									position++
								case '$':
									if buffer[position] != rune('$') {
										goto l128
									}
									position++
								case '#':
									if buffer[position] != rune('#') {
										goto l128
									}
									position++
								case '"':
									if buffer[position] != rune('"') {
										goto l128
									}
									position++
								case '!':
									if buffer[position] != rune('!') {
										goto l128
									}
									position++
								default:
									if c := buffer[position]; c < rune(',') || c > rune('.') {
										goto l128
									}
									position++
								}
							}

							goto l127
						l128:
							position, tokenIndex = position128, tokenIndex128
						}
						if !matchDot() {
							goto l127
						}
						goto l126
					l127:
						position, tokenIndex = position127, tokenIndex127
					}
					add(rulePegText, position123)
				}
				if !_rules[rulesp]() {
					goto l120
				}
				add(ruleidentifier, position121)
			}
			return true
		l120:
			position, tokenIndex = position120, tokenIndex120
			return false
		},
		/* 12 sub <- <(open e1 close)> */
		nil,
		/* 13 add <- <('+' sp)> */
		nil,
		/* 14 minus <- <('-' sp)> */
		func() bool {
			position132, tokenIndex132 := position, tokenIndex
			{
				position133 := position
				if buffer[position] != rune('-') {
					goto l132
				}
				position++
				if !_rules[rulesp]() {
					goto l132
				}
				add(ruleminus, position133)
			}
			return true
		l132:
			position, tokenIndex = position132, tokenIndex132
			return false
		},
		/* 15 multiply <- <('*' sp)> */
		nil,
		/* 16 divide <- <('/' sp)> */
		nil,
		/* 17 modulus <- <('%' sp)> */
		nil,
		/* 18 exponentiation <- <(('^' sp) / ('*' '*' sp))> */
		nil,
		/* 19 open <- <('(' sp)> */
		nil,
		/* 20 close <- <(')' sp)> */
		nil,
		/* 21 sp <- <(' ' / '\t')*> */
		func() bool {
			{
				position141 := position
			l142:
				{
					position143, tokenIndex143 := position, tokenIndex
					{
						position144, tokenIndex144 := position, tokenIndex
						if buffer[position] != rune(' ') {
							goto l145
						}
						position++
						goto l144
					l145:
						position, tokenIndex = position144, tokenIndex144
						if buffer[position] != rune('\t') {
							goto l143
						}
						position++
					}
				l144:
					goto l142
				l143:
					position, tokenIndex = position143, tokenIndex143
				}
				add(rulesp, position141)
			}
			return true
		},
		/* 22 fstring <- <('`' <(('{' sp e1 sp '}') / escape / (!((&('\r') '\r') | (&('\n') '\n') | (&('\\') '\\') | (&('`') '`')) .))*> '`' sp Action26)> */
		nil,
		/* 23 escape <- <('\\' ((&('\\') '\\') | (&('\'') '\'') | (&('"') '"') | (&('r') 'r') | (&('f') 'f') | (&('n') 'n') | (&('t') 't') | (&('b') 'b')))> */
		nil,
		/* 25 Action0 <- <{ p.AddOperator(TypeHalt) }> */
		nil,
		/* 26 Action1 <- <{ p.AddLeftValueMark() }> */
		nil,
		/* 27 Action2 <- <{ p.AddOperator(TypeAdd) }> */
		nil,
		/* 28 Action3 <- <{ p.AddLeftValueMark() }> */
		nil,
		/* 29 Action4 <- <{ p.AddOperator(TypeSubtract) }> */
		nil,
		/* 30 Action5 <- <{ p.AddLeftValueMark() }> */
		nil,
		/* 31 Action6 <- <{ p.AddOperator(TypeMultiply) }> */
		nil,
		/* 32 Action7 <- <{ p.AddLeftValueMark() }> */
		nil,
		/* 33 Action8 <- <{ p.AddOperator(TypeDivide) }> */
		nil,
		/* 34 Action9 <- <{ p.AddLeftValueMark() }> */
		nil,
		/* 35 Action10 <- <{ p.AddOperator(TypeModulus) }> */
		nil,
		/* 36 Action11 <- <{ p.AddLeftValueMark() }> */
		nil,
		/* 37 Action12 <- <{ p.AddOperator(TypeExponentiation) }> */
		nil,
		/* 38 Action13 <- <{ p.AddLeftValueMark() }> */
		nil,
		/* 39 Action14 <- <{ p.AddOperator(TypeDiceSetK) }> */
		nil,
		/* 40 Action15 <- <{ p.AddOperator(TypeDice) }> */
		nil,
		/* 41 Action16 <- <{ p.AddValue("1"); p.AddLeftValueMark() }> */
		nil,
		/* 42 Action17 <- <{ p.AddOperator(TypeDiceSetK) }> */
		nil,
		/* 43 Action18 <- <{ p.AddOperator(TypeDice) }> */
		nil,
		/* 44 Action19 <- <{ p.AddOperator(TypeDicePenalty) }> */
		nil,
		/* 45 Action20 <- <{ p.AddOperator(TypeDiceBonus) }> */
		nil,
		/* 46 Action21 <- <{ p.AddOperator(TypeNegation) }> */
		nil,
		/* 47 Action22 <- <{ p.AddValue(string(text)) }> */
		nil,
		/* 48 Action23 <- <{ p.AddLoadVarname(string(text)) }> */
		nil,
		nil,
		/* 50 Action24 <- <{ p.AddValueStr(string(text)) }> */
		nil,
		/* 51 Action25 <- <{ p.AddStore() }> */
		nil,
		/* 52 Action26 <- <{ p.AddFormatString(string(text)) }> */
		nil,
	}
	p.rules = _rules
	return nil
}
