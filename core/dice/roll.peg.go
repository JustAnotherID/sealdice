package dice

// Code generated by peg -switch -inline dice/roll.peg DO NOT EDIT.

import (
	"fmt"
	"io"
	"os"
	"sort"
	"strconv"
	"strings"
)

const endSymbol rune = 1114112

/* The rule types inferred from the grammar are below. */
type pegRule uint8

const (
	ruleUnknown pegRule = iota
	rulee
	rulee1
	rulee2
	rulee3
	rulee4
	rulee5
	ruleeDice
	ruleeDice2
	ruleeDice3
	rulevalue
	rulenumber
	ruleassign_expr
	ruleidentifier
	rulesub
	ruleadd
	ruleminus
	rulemultiply
	ruledivide
	rulemodulus
	ruleexponentiation
	ruleopen
	ruleclose
	rulesp
	rulefstring
	ruleescape
	ruleAction0
	ruleAction1
	ruleAction2
	ruleAction3
	ruleAction4
	ruleAction5
	ruleAction6
	ruleAction7
	ruleAction8
	ruleAction9
	ruleAction10
	ruleAction11
	ruleAction12
	ruleAction13
	ruleAction14
	ruleAction15
	ruleAction16
	ruleAction17
	ruleAction18
	ruleAction19
	ruleAction20
	ruleAction21
	ruleAction22
	ruleAction23
	ruleAction24
	ruleAction25
	ruleAction26
	rulePegText
	ruleAction27
	ruleAction28
	ruleAction29
	ruleAction30
)

var rul3s = [...]string{
	"Unknown",
	"e",
	"e1",
	"e2",
	"e3",
	"e4",
	"e5",
	"eDice",
	"eDice2",
	"eDice3",
	"value",
	"number",
	"assign_expr",
	"identifier",
	"sub",
	"add",
	"minus",
	"multiply",
	"divide",
	"modulus",
	"exponentiation",
	"open",
	"close",
	"sp",
	"fstring",
	"escape",
	"Action0",
	"Action1",
	"Action2",
	"Action3",
	"Action4",
	"Action5",
	"Action6",
	"Action7",
	"Action8",
	"Action9",
	"Action10",
	"Action11",
	"Action12",
	"Action13",
	"Action14",
	"Action15",
	"Action16",
	"Action17",
	"Action18",
	"Action19",
	"Action20",
	"Action21",
	"Action22",
	"Action23",
	"Action24",
	"Action25",
	"Action26",
	"PegText",
	"Action27",
	"Action28",
	"Action29",
	"Action30",
}

type token32 struct {
	pegRule
	begin, end uint32
}

func (t *token32) String() string {
	return fmt.Sprintf("\x1B[34m%v\x1B[m %v %v", rul3s[t.pegRule], t.begin, t.end)
}

type node32 struct {
	token32
	up, next *node32
}

func (node *node32) print(w io.Writer, pretty bool, buffer string) {
	var print func(node *node32, depth int)
	print = func(node *node32, depth int) {
		for node != nil {
			for c := 0; c < depth; c++ {
				fmt.Fprintf(w, " ")
			}
			rule := rul3s[node.pegRule]
			quote := strconv.Quote(string(([]rune(buffer)[node.begin:node.end])))
			if !pretty {
				fmt.Fprintf(w, "%v %v\n", rule, quote)
			} else {
				fmt.Fprintf(w, "\x1B[36m%v\x1B[m %v\n", rule, quote)
			}
			if node.up != nil {
				print(node.up, depth+1)
			}
			node = node.next
		}
	}
	print(node, 0)
}

func (node *node32) Print(w io.Writer, buffer string) {
	node.print(w, false, buffer)
}

func (node *node32) PrettyPrint(w io.Writer, buffer string) {
	node.print(w, true, buffer)
}

type tokens32 struct {
	tree []token32
}

func (t *tokens32) Trim(length uint32) {
	t.tree = t.tree[:length]
}

func (t *tokens32) Print() {
	for _, token := range t.tree {
		fmt.Println(token.String())
	}
}

func (t *tokens32) AST() *node32 {
	type element struct {
		node *node32
		down *element
	}
	tokens := t.Tokens()
	var stack *element
	for _, token := range tokens {
		if token.begin == token.end {
			continue
		}
		node := &node32{token32: token}
		for stack != nil && stack.node.begin >= token.begin && stack.node.end <= token.end {
			stack.node.next = node.up
			node.up = stack.node
			stack = stack.down
		}
		stack = &element{node: node, down: stack}
	}
	if stack != nil {
		return stack.node
	}
	return nil
}

func (t *tokens32) PrintSyntaxTree(buffer string) {
	t.AST().Print(os.Stdout, buffer)
}

func (t *tokens32) WriteSyntaxTree(w io.Writer, buffer string) {
	t.AST().Print(w, buffer)
}

func (t *tokens32) PrettyPrintSyntaxTree(buffer string) {
	t.AST().PrettyPrint(os.Stdout, buffer)
}

func (t *tokens32) Add(rule pegRule, begin, end, index uint32) {
	tree, i := t.tree, int(index)
	if i >= len(tree) {
		t.tree = append(tree, token32{pegRule: rule, begin: begin, end: end})
		return
	}
	tree[i] = token32{pegRule: rule, begin: begin, end: end}
}

func (t *tokens32) Tokens() []token32 {
	return t.tree
}

type DiceRollParser struct {
	RollExpression

	Buffer string
	buffer []rune
	rules  [58]func() bool
	parse  func(rule ...int) error
	reset  func()
	Pretty bool
	tokens32
}

func (p *DiceRollParser) Parse(rule ...int) error {
	return p.parse(rule...)
}

func (p *DiceRollParser) Reset() {
	p.reset()
}

type textPosition struct {
	line, symbol int
}

type textPositionMap map[int]textPosition

func translatePositions(buffer []rune, positions []int) textPositionMap {
	length, translations, j, line, symbol := len(positions), make(textPositionMap, len(positions)), 0, 1, 0
	sort.Ints(positions)

search:
	for i, c := range buffer {
		if c == '\n' {
			line, symbol = line+1, 0
		} else {
			symbol++
		}
		if i == positions[j] {
			translations[positions[j]] = textPosition{line, symbol}
			for j++; j < length; j++ {
				if i != positions[j] {
					continue search
				}
			}
			break search
		}
	}

	return translations
}

type parseError struct {
	p   *DiceRollParser
	max token32
}

func (e *parseError) Error() string {
	tokens, err := []token32{e.max}, "\n"
	positions, p := make([]int, 2*len(tokens)), 0
	for _, token := range tokens {
		positions[p], p = int(token.begin), p+1
		positions[p], p = int(token.end), p+1
	}
	translations := translatePositions(e.p.buffer, positions)
	format := "parse error near %v (line %v symbol %v - line %v symbol %v):\n%v\n"
	if e.p.Pretty {
		format = "parse error near \x1B[34m%v\x1B[m (line %v symbol %v - line %v symbol %v):\n%v\n"
	}
	for _, token := range tokens {
		begin, end := int(token.begin), int(token.end)
		err += fmt.Sprintf(format,
			rul3s[token.pegRule],
			translations[begin].line, translations[begin].symbol,
			translations[end].line, translations[end].symbol,
			strconv.Quote(string(e.p.buffer[begin:end])))
	}

	return err
}

func (p *DiceRollParser) PrintSyntaxTree() {
	if p.Pretty {
		p.tokens32.PrettyPrintSyntaxTree(p.Buffer)
	} else {
		p.tokens32.PrintSyntaxTree(p.Buffer)
	}
}

func (p *DiceRollParser) WriteSyntaxTree(w io.Writer) {
	p.tokens32.WriteSyntaxTree(w, p.Buffer)
}

func (p *DiceRollParser) SprintSyntaxTree() string {
	var bldr strings.Builder
	p.WriteSyntaxTree(&bldr)
	return bldr.String()
}

func (p *DiceRollParser) Execute() {
	buffer, _buffer, text, begin, end := p.Buffer, p.buffer, "", 0, 0
	for _, token := range p.Tokens() {
		switch token.pegRule {

		case rulePegText:
			begin, end = int(token.begin), int(token.end)
			text = string(_buffer[begin:end])

		case ruleAction0:
			p.AddOperator(TypeHalt)
		case ruleAction1:
			p.AddLeftValueMark()
		case ruleAction2:
			p.AddOperator(TypeAdd)
		case ruleAction3:
			p.AddLeftValueMark()
		case ruleAction4:
			p.AddOperator(TypeSubtract)
		case ruleAction5:
			p.AddLeftValueMark()
		case ruleAction6:
			p.AddOperator(TypeMultiply)
		case ruleAction7:
			p.AddLeftValueMark()
		case ruleAction8:
			p.AddOperator(TypeDivide)
		case ruleAction9:
			p.AddLeftValueMark()
		case ruleAction10:
			p.AddOperator(TypeModulus)
		case ruleAction11:
			p.AddLeftValueMark()
		case ruleAction12:
			p.AddOperator(TypeExponentiation)
		case ruleAction13:
			p.AddOperator(TypeNegation)
		case ruleAction14:
			p.AddLeftValueMark()
		case ruleAction15:
			p.AddOperator(TypeDiceSetK)
		case ruleAction16:
			p.AddOperator(TypeDiceSetQ)
		case ruleAction17:
			p.AddOperator(TypeDice)
		case ruleAction18:
			p.AddValue("1")
			p.AddLeftValueMark()
		case ruleAction19:
			p.AddOperator(TypeDiceSetK)
		case ruleAction20:
			p.AddOperator(TypeDiceSetQ)
		case ruleAction21:
			p.AddOperator(TypeDice)
		case ruleAction22:
			p.AddOperator(TypeDicePenalty)
		case ruleAction23:
			p.AddValue("1")
			p.AddOperator(TypeDicePenalty)
		case ruleAction24:
			p.AddOperator(TypeDiceBonus)
		case ruleAction25:
			p.AddValue("1")
			p.AddOperator(TypeDiceBonus)
		case ruleAction26:
			p.AddLoadVarname(string(text))
		case ruleAction27:
			p.AddValue(string(text))
		case ruleAction28:
			p.AddValueStr(string(text))
		case ruleAction29:
			p.AddStore()
		case ruleAction30:
			p.AddFormatString(string(text))

		}
	}
	_, _, _, _, _ = buffer, _buffer, text, begin, end
}

func Pretty(pretty bool) func(*DiceRollParser) error {
	return func(p *DiceRollParser) error {
		p.Pretty = pretty
		return nil
	}
}

func Size(size int) func(*DiceRollParser) error {
	return func(p *DiceRollParser) error {
		p.tokens32 = tokens32{tree: make([]token32, 0, size)}
		return nil
	}
}
func (p *DiceRollParser) Init(options ...func(*DiceRollParser) error) error {
	var (
		max                  token32
		position, tokenIndex uint32
		buffer               []rune
	)
	for _, option := range options {
		err := option(p)
		if err != nil {
			return err
		}
	}
	p.reset = func() {
		max = token32{}
		position, tokenIndex = 0, 0

		p.buffer = []rune(p.Buffer)
		if len(p.buffer) == 0 || p.buffer[len(p.buffer)-1] != endSymbol {
			p.buffer = append(p.buffer, endSymbol)
		}
		buffer = p.buffer
	}
	p.reset()

	_rules := p.rules
	tree := p.tokens32
	p.parse = func(rule ...int) error {
		r := 1
		if len(rule) > 0 {
			r = rule[0]
		}
		matches := p.rules[r]()
		p.tokens32 = tree
		if matches {
			p.Trim(tokenIndex)
			return nil
		}
		return &parseError{p, max}
	}

	add := func(rule pegRule, begin uint32) {
		tree.Add(rule, begin, position, tokenIndex)
		tokenIndex++
		if begin != position && position > max.end {
			max = token32{rule, begin, position}
		}
	}

	matchDot := func() bool {
		if buffer[position] != endSymbol {
			position++
			return true
		}
		return false
	}

	/*matchChar := func(c byte) bool {
		if buffer[position] == c {
			position++
			return true
		}
		return false
	}*/

	/*matchRange := func(lower byte, upper byte) bool {
		if c := buffer[position]; c >= lower && c <= upper {
			position++
			return true
		}
		return false
	}*/

	_rules = [...]func() bool{
		nil,
		/* 0 e <- <(sp (fstring / e1) Action0)> */
		func() bool {
			position0, tokenIndex0 := position, tokenIndex
			{
				position1 := position
				if !_rules[rulesp]() {
					goto l0
				}
				{
					position2, tokenIndex2 := position, tokenIndex
					{
						position4 := position
						if buffer[position] != rune('`') {
							goto l3
						}
						position++
						{
							position5 := position
						l6:
							{
								position7, tokenIndex7 := position, tokenIndex
								{
									position8, tokenIndex8 := position, tokenIndex
									if buffer[position] != rune('{') {
										goto l9
									}
									position++
									if !_rules[rulesp]() {
										goto l9
									}
									if !_rules[rulee1]() {
										goto l9
									}
									if !_rules[rulesp]() {
										goto l9
									}
									if buffer[position] != rune('}') {
										goto l9
									}
									position++
									goto l8
								l9:
									position, tokenIndex = position8, tokenIndex8
									{
										position11 := position
										if buffer[position] != rune('\\') {
											goto l10
										}
										position++
										{
											switch buffer[position] {
											case '\\':
												if buffer[position] != rune('\\') {
													goto l10
												}
												position++
											case '\'':
												if buffer[position] != rune('\'') {
													goto l10
												}
												position++
											case '"':
												if buffer[position] != rune('"') {
													goto l10
												}
												position++
											case 'r':
												if buffer[position] != rune('r') {
													goto l10
												}
												position++
											case 'f':
												if buffer[position] != rune('f') {
													goto l10
												}
												position++
											case 'n':
												if buffer[position] != rune('n') {
													goto l10
												}
												position++
											case 't':
												if buffer[position] != rune('t') {
													goto l10
												}
												position++
											default:
												if buffer[position] != rune('b') {
													goto l10
												}
												position++
											}
										}

										add(ruleescape, position11)
									}
									goto l8
								l10:
									position, tokenIndex = position8, tokenIndex8
									{
										position13, tokenIndex13 := position, tokenIndex
										{
											switch buffer[position] {
											case '\r':
												if buffer[position] != rune('\r') {
													goto l13
												}
												position++
											case '\n':
												if buffer[position] != rune('\n') {
													goto l13
												}
												position++
											case '\\':
												if buffer[position] != rune('\\') {
													goto l13
												}
												position++
											default:
												if buffer[position] != rune('`') {
													goto l13
												}
												position++
											}
										}

										goto l7
									l13:
										position, tokenIndex = position13, tokenIndex13
									}
									if !matchDot() {
										goto l7
									}
								}
							l8:
								goto l6
							l7:
								position, tokenIndex = position7, tokenIndex7
							}
							add(rulePegText, position5)
						}
						if buffer[position] != rune('`') {
							goto l3
						}
						position++
						if !_rules[rulesp]() {
							goto l3
						}
						{
							add(ruleAction30, position)
						}
						add(rulefstring, position4)
					}
					goto l2
				l3:
					position, tokenIndex = position2, tokenIndex2
					if !_rules[rulee1]() {
						goto l0
					}
				}
			l2:
				{
					add(ruleAction0, position)
				}
				add(rulee, position1)
			}
			return true
		l0:
			position, tokenIndex = position0, tokenIndex0
			return false
		},
		/* 1 e1 <- <(e2 ((add Action1 e2 Action2) / (minus Action3 e2 Action4))*)> */
		func() bool {
			position17, tokenIndex17 := position, tokenIndex
			{
				position18 := position
				if !_rules[rulee2]() {
					goto l17
				}
			l19:
				{
					position20, tokenIndex20 := position, tokenIndex
					{
						position21, tokenIndex21 := position, tokenIndex
						if !_rules[ruleadd]() {
							goto l22
						}
						{
							add(ruleAction1, position)
						}
						if !_rules[rulee2]() {
							goto l22
						}
						{
							add(ruleAction2, position)
						}
						goto l21
					l22:
						position, tokenIndex = position21, tokenIndex21
						if !_rules[ruleminus]() {
							goto l20
						}
						{
							add(ruleAction3, position)
						}
						if !_rules[rulee2]() {
							goto l20
						}
						{
							add(ruleAction4, position)
						}
					}
				l21:
					goto l19
				l20:
					position, tokenIndex = position20, tokenIndex20
				}
				add(rulee1, position18)
			}
			return true
		l17:
			position, tokenIndex = position17, tokenIndex17
			return false
		},
		/* 2 e2 <- <(e3 ((&('%') (modulus Action9 e3 Action10)) | (&('/') (divide Action7 e3 Action8)) | (&('*') (multiply Action5 e3 Action6)))*)> */
		func() bool {
			position27, tokenIndex27 := position, tokenIndex
			{
				position28 := position
				if !_rules[rulee3]() {
					goto l27
				}
			l29:
				{
					position30, tokenIndex30 := position, tokenIndex
					{
						switch buffer[position] {
						case '%':
							{
								position32 := position
								if buffer[position] != rune('%') {
									goto l30
								}
								position++
								if !_rules[rulesp]() {
									goto l30
								}
								add(rulemodulus, position32)
							}
							{
								add(ruleAction9, position)
							}
							if !_rules[rulee3]() {
								goto l30
							}
							{
								add(ruleAction10, position)
							}
						case '/':
							{
								position35 := position
								if buffer[position] != rune('/') {
									goto l30
								}
								position++
								if !_rules[rulesp]() {
									goto l30
								}
								add(ruledivide, position35)
							}
							{
								add(ruleAction7, position)
							}
							if !_rules[rulee3]() {
								goto l30
							}
							{
								add(ruleAction8, position)
							}
						default:
							{
								position38 := position
								if buffer[position] != rune('*') {
									goto l30
								}
								position++
								if !_rules[rulesp]() {
									goto l30
								}
								add(rulemultiply, position38)
							}
							{
								add(ruleAction5, position)
							}
							if !_rules[rulee3]() {
								goto l30
							}
							{
								add(ruleAction6, position)
							}
						}
					}

					goto l29
				l30:
					position, tokenIndex = position30, tokenIndex30
				}
				add(rulee2, position28)
			}
			return true
		l27:
			position, tokenIndex = position27, tokenIndex27
			return false
		},
		/* 3 e3 <- <(e4 (exponentiation Action11 e4 Action12)*)> */
		func() bool {
			position41, tokenIndex41 := position, tokenIndex
			{
				position42 := position
				if !_rules[rulee4]() {
					goto l41
				}
			l43:
				{
					position44, tokenIndex44 := position, tokenIndex
					{
						position45 := position
						{
							position46, tokenIndex46 := position, tokenIndex
							if buffer[position] != rune('^') {
								goto l47
							}
							position++
							if !_rules[rulesp]() {
								goto l47
							}
							goto l46
						l47:
							position, tokenIndex = position46, tokenIndex46
							if buffer[position] != rune('*') {
								goto l44
							}
							position++
							if buffer[position] != rune('*') {
								goto l44
							}
							position++
							if !_rules[rulesp]() {
								goto l44
							}
						}
					l46:
						add(ruleexponentiation, position45)
					}
					{
						add(ruleAction11, position)
					}
					if !_rules[rulee4]() {
						goto l44
					}
					{
						add(ruleAction12, position)
					}
					goto l43
				l44:
					position, tokenIndex = position44, tokenIndex44
				}
				add(rulee3, position42)
			}
			return true
		l41:
			position, tokenIndex = position41, tokenIndex41
			return false
		},
		/* 4 e4 <- <((minus e5 Action13) / e5)> */
		func() bool {
			position50, tokenIndex50 := position, tokenIndex
			{
				position51 := position
				{
					position52, tokenIndex52 := position, tokenIndex
					if !_rules[ruleminus]() {
						goto l53
					}
					if !_rules[rulee5]() {
						goto l53
					}
					{
						add(ruleAction13, position)
					}
					goto l52
				l53:
					position, tokenIndex = position52, tokenIndex52
					if !_rules[rulee5]() {
						goto l50
					}
				}
			l52:
				add(rulee4, position51)
			}
			return true
		l50:
			position, tokenIndex = position50, tokenIndex50
			return false
		},
		/* 5 e5 <- <((add eDice) / eDice)> */
		func() bool {
			position55, tokenIndex55 := position, tokenIndex
			{
				position56 := position
				{
					position57, tokenIndex57 := position, tokenIndex
					if !_rules[ruleadd]() {
						goto l58
					}
					if !_rules[ruleeDice]() {
						goto l58
					}
					goto l57
				l58:
					position, tokenIndex = position57, tokenIndex57
					if !_rules[ruleeDice]() {
						goto l55
					}
				}
			l57:
				add(rulee5, position56)
			}
			return true
		l55:
			position, tokenIndex = position55, tokenIndex55
			return false
		},
		/* 6 eDice <- <((eDice2 (('d' / 'D') Action14 eDice2 ('k' eDice2 Action15)? ('q' eDice2 Action16)? Action17)*) / (('d' / 'D') Action18 eDice2 ('k' eDice2 Action19)? ('q' eDice2 Action20)? Action21)+)> */
		func() bool {
			position59, tokenIndex59 := position, tokenIndex
			{
				position60 := position
				{
					position61, tokenIndex61 := position, tokenIndex
					if !_rules[ruleeDice2]() {
						goto l62
					}
				l63:
					{
						position64, tokenIndex64 := position, tokenIndex
						{
							position65, tokenIndex65 := position, tokenIndex
							if buffer[position] != rune('d') {
								goto l66
							}
							position++
							goto l65
						l66:
							position, tokenIndex = position65, tokenIndex65
							if buffer[position] != rune('D') {
								goto l64
							}
							position++
						}
					l65:
						{
							add(ruleAction14, position)
						}
						if !_rules[ruleeDice2]() {
							goto l64
						}
						{
							position68, tokenIndex68 := position, tokenIndex
							if buffer[position] != rune('k') {
								goto l68
							}
							position++
							if !_rules[ruleeDice2]() {
								goto l68
							}
							{
								add(ruleAction15, position)
							}
							goto l69
						l68:
							position, tokenIndex = position68, tokenIndex68
						}
					l69:
						{
							position71, tokenIndex71 := position, tokenIndex
							if buffer[position] != rune('q') {
								goto l71
							}
							position++
							if !_rules[ruleeDice2]() {
								goto l71
							}
							{
								add(ruleAction16, position)
							}
							goto l72
						l71:
							position, tokenIndex = position71, tokenIndex71
						}
					l72:
						{
							add(ruleAction17, position)
						}
						goto l63
					l64:
						position, tokenIndex = position64, tokenIndex64
					}
					goto l61
				l62:
					position, tokenIndex = position61, tokenIndex61
					{
						position77, tokenIndex77 := position, tokenIndex
						if buffer[position] != rune('d') {
							goto l78
						}
						position++
						goto l77
					l78:
						position, tokenIndex = position77, tokenIndex77
						if buffer[position] != rune('D') {
							goto l59
						}
						position++
					}
				l77:
					{
						add(ruleAction18, position)
					}
					if !_rules[ruleeDice2]() {
						goto l59
					}
					{
						position80, tokenIndex80 := position, tokenIndex
						if buffer[position] != rune('k') {
							goto l80
						}
						position++
						if !_rules[ruleeDice2]() {
							goto l80
						}
						{
							add(ruleAction19, position)
						}
						goto l81
					l80:
						position, tokenIndex = position80, tokenIndex80
					}
				l81:
					{
						position83, tokenIndex83 := position, tokenIndex
						if buffer[position] != rune('q') {
							goto l83
						}
						position++
						if !_rules[ruleeDice2]() {
							goto l83
						}
						{
							add(ruleAction20, position)
						}
						goto l84
					l83:
						position, tokenIndex = position83, tokenIndex83
					}
				l84:
					{
						add(ruleAction21, position)
					}
				l75:
					{
						position76, tokenIndex76 := position, tokenIndex
						{
							position87, tokenIndex87 := position, tokenIndex
							if buffer[position] != rune('d') {
								goto l88
							}
							position++
							goto l87
						l88:
							position, tokenIndex = position87, tokenIndex87
							if buffer[position] != rune('D') {
								goto l76
							}
							position++
						}
					l87:
						{
							add(ruleAction18, position)
						}
						if !_rules[ruleeDice2]() {
							goto l76
						}
						{
							position90, tokenIndex90 := position, tokenIndex
							if buffer[position] != rune('k') {
								goto l90
							}
							position++
							if !_rules[ruleeDice2]() {
								goto l90
							}
							{
								add(ruleAction19, position)
							}
							goto l91
						l90:
							position, tokenIndex = position90, tokenIndex90
						}
					l91:
						{
							position93, tokenIndex93 := position, tokenIndex
							if buffer[position] != rune('q') {
								goto l93
							}
							position++
							if !_rules[ruleeDice2]() {
								goto l93
							}
							{
								add(ruleAction20, position)
							}
							goto l94
						l93:
							position, tokenIndex = position93, tokenIndex93
						}
					l94:
						{
							add(ruleAction21, position)
						}
						goto l75
					l76:
						position, tokenIndex = position76, tokenIndex76
					}
				}
			l61:
				add(ruleeDice, position60)
			}
			return true
		l59:
			position, tokenIndex = position59, tokenIndex59
			return false
		},
		/* 7 eDice2 <- <((('p' / 'P') number Action22) / (('p' / 'P') Action23) / eDice3)> */
		func() bool {
			position97, tokenIndex97 := position, tokenIndex
			{
				position98 := position
				{
					position99, tokenIndex99 := position, tokenIndex
					{
						position101, tokenIndex101 := position, tokenIndex
						if buffer[position] != rune('p') {
							goto l102
						}
						position++
						goto l101
					l102:
						position, tokenIndex = position101, tokenIndex101
						if buffer[position] != rune('P') {
							goto l100
						}
						position++
					}
				l101:
					if !_rules[rulenumber]() {
						goto l100
					}
					{
						add(ruleAction22, position)
					}
					goto l99
				l100:
					position, tokenIndex = position99, tokenIndex99
					{
						position105, tokenIndex105 := position, tokenIndex
						if buffer[position] != rune('p') {
							goto l106
						}
						position++
						goto l105
					l106:
						position, tokenIndex = position105, tokenIndex105
						if buffer[position] != rune('P') {
							goto l104
						}
						position++
					}
				l105:
					{
						add(ruleAction23, position)
					}
					goto l99
				l104:
					position, tokenIndex = position99, tokenIndex99
					{
						position108 := position
						{
							position109, tokenIndex109 := position, tokenIndex
							{
								position111, tokenIndex111 := position, tokenIndex
								if buffer[position] != rune('b') {
									goto l112
								}
								position++
								goto l111
							l112:
								position, tokenIndex = position111, tokenIndex111
								if buffer[position] != rune('B') {
									goto l110
								}
								position++
							}
						l111:
							if !_rules[rulenumber]() {
								goto l110
							}
							{
								add(ruleAction24, position)
							}
							goto l109
						l110:
							position, tokenIndex = position109, tokenIndex109
							{
								position115, tokenIndex115 := position, tokenIndex
								if buffer[position] != rune('b') {
									goto l116
								}
								position++
								goto l115
							l116:
								position, tokenIndex = position115, tokenIndex115
								if buffer[position] != rune('B') {
									goto l114
								}
								position++
							}
						l115:
							{
								add(ruleAction25, position)
							}
							goto l109
						l114:
							position, tokenIndex = position109, tokenIndex109
							{
								position118 := position
								{
									position119, tokenIndex119 := position, tokenIndex
									if !_rules[rulenumber]() {
										goto l120
									}
									goto l119
								l120:
									position, tokenIndex = position119, tokenIndex119
									{
										position122 := position
										if !_rules[ruleidentifier]() {
											goto l121
										}
										{
											add(ruleAction28, position)
										}
										if buffer[position] != rune('=') {
											goto l121
										}
										position++
										if !_rules[rulee1]() {
											goto l121
										}
										{
											add(ruleAction29, position)
										}
										add(ruleassign_expr, position122)
									}
									goto l119
								l121:
									position, tokenIndex = position119, tokenIndex119
									if !_rules[ruleidentifier]() {
										goto l125
									}
									{
										add(ruleAction26, position)
									}
									goto l119
								l125:
									position, tokenIndex = position119, tokenIndex119
									{
										position127 := position
										{
											position128 := position
											if buffer[position] != rune('(') {
												goto l97
											}
											position++
											if !_rules[rulesp]() {
												goto l97
											}
											add(ruleopen, position128)
										}
										if !_rules[rulee1]() {
											goto l97
										}
										{
											position129 := position
											if buffer[position] != rune(')') {
												goto l97
											}
											position++
											if !_rules[rulesp]() {
												goto l97
											}
											add(ruleclose, position129)
										}
										add(rulesub, position127)
									}
								}
							l119:
								add(rulevalue, position118)
							}
						}
					l109:
						add(ruleeDice3, position108)
					}
				}
			l99:
				add(ruleeDice2, position98)
			}
			return true
		l97:
			position, tokenIndex = position97, tokenIndex97
			return false
		},
		/* 8 eDice3 <- <((('b' / 'B') number Action24) / (('b' / 'B') Action25) / value)> */
		nil,
		/* 9 value <- <(number / assign_expr / (identifier Action26) / sub)> */
		nil,
		/* 10 number <- <(<[0-9]+> sp Action27)> */
		func() bool {
			position132, tokenIndex132 := position, tokenIndex
			{
				position133 := position
				{
					position134 := position
					if c := buffer[position]; c < rune('0') || c > rune('9') {
						goto l132
					}
					position++
				l135:
					{
						position136, tokenIndex136 := position, tokenIndex
						if c := buffer[position]; c < rune('0') || c > rune('9') {
							goto l136
						}
						position++
						goto l135
					l136:
						position, tokenIndex = position136, tokenIndex136
					}
					add(rulePegText, position134)
				}
				if !_rules[rulesp]() {
					goto l132
				}
				{
					add(ruleAction27, position)
				}
				add(rulenumber, position133)
			}
			return true
		l132:
			position, tokenIndex = position132, tokenIndex132
			return false
		},
		/* 11 assign_expr <- <(identifier Action28 '=' e1 Action29)> */
		nil,
		/* 12 identifier <- <(!'d' <(!((&('\r') '\r') | (&('\n') '\n') | (&('\t') '\t') | (&(' ') ' ') | (&('~') '~') | (&('}') '}') | (&('|') '|') | (&('{') '{') | (&('`') '`') | (&('^') '^') | (&(']') ']') | (&('\\') '\\') | (&('[') '[') | (&('@') '@') | (&('?') '?') | (&('>') '>') | (&('=') '=') | (&('<') '<') | (&(';') ';') | (&(':') ':') | (&('/') '/') | (&('+') '+') | (&('*') '*') | (&(')') ')') | (&('(') '(') | (&('\'') '\'') | (&('&') '&') | (&('%') '%') | (&('#') '#') | (&('"') '"') | (&('!') '!') | (&(',' | '-' | '.') [,-.]) | (&('0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9') [0-9])) . (!((&('\r') '\r') | (&('\n') '\n') | (&('\t') '\t') | (&(' ') ' ') | (&('~') '~') | (&('}') '}') | (&('|') '|') | (&('{') '{') | (&('`') '`') | (&('^') '^') | (&(']') ']') | (&('\\') '\\') | (&('[') '[') | (&('@') '@') | (&('?') '?') | (&('>') '>') | (&('=') '=') | (&('<') '<') | (&(';') ';') | (&('/') '/') | (&('+') '+') | (&('*') '*') | (&(')') ')') | (&('(') '(') | (&('\'') '\'') | (&('&') '&') | (&('%') '%') | (&('$') '$') | (&('#') '#') | (&('"') '"') | (&('!') '!') | (&(',' | '-' | '.') [,-.])) .)*)> sp)> */
		func() bool {
			position139, tokenIndex139 := position, tokenIndex
			{
				position140 := position
				{
					position141, tokenIndex141 := position, tokenIndex
					if buffer[position] != rune('d') {
						goto l141
					}
					position++
					goto l139
				l141:
					position, tokenIndex = position141, tokenIndex141
				}
				{
					position142 := position
					{
						position143, tokenIndex143 := position, tokenIndex
						{
							switch buffer[position] {
							case '\r':
								if buffer[position] != rune('\r') {
									goto l143
								}
								position++
							case '\n':
								if buffer[position] != rune('\n') {
									goto l143
								}
								position++
							case '\t':
								if buffer[position] != rune('\t') {
									goto l143
								}
								position++
							case ' ':
								if buffer[position] != rune(' ') {
									goto l143
								}
								position++
							case '~':
								if buffer[position] != rune('~') {
									goto l143
								}
								position++
							case '}':
								if buffer[position] != rune('}') {
									goto l143
								}
								position++
							case '|':
								if buffer[position] != rune('|') {
									goto l143
								}
								position++
							case '{':
								if buffer[position] != rune('{') {
									goto l143
								}
								position++
							case '`':
								if buffer[position] != rune('`') {
									goto l143
								}
								position++
							case '^':
								if buffer[position] != rune('^') {
									goto l143
								}
								position++
							case ']':
								if buffer[position] != rune(']') {
									goto l143
								}
								position++
							case '\\':
								if buffer[position] != rune('\\') {
									goto l143
								}
								position++
							case '[':
								if buffer[position] != rune('[') {
									goto l143
								}
								position++
							case '@':
								if buffer[position] != rune('@') {
									goto l143
								}
								position++
							case '?':
								if buffer[position] != rune('?') {
									goto l143
								}
								position++
							case '>':
								if buffer[position] != rune('>') {
									goto l143
								}
								position++
							case '=':
								if buffer[position] != rune('=') {
									goto l143
								}
								position++
							case '<':
								if buffer[position] != rune('<') {
									goto l143
								}
								position++
							case ';':
								if buffer[position] != rune(';') {
									goto l143
								}
								position++
							case ':':
								if buffer[position] != rune(':') {
									goto l143
								}
								position++
							case '/':
								if buffer[position] != rune('/') {
									goto l143
								}
								position++
							case '+':
								if buffer[position] != rune('+') {
									goto l143
								}
								position++
							case '*':
								if buffer[position] != rune('*') {
									goto l143
								}
								position++
							case ')':
								if buffer[position] != rune(')') {
									goto l143
								}
								position++
							case '(':
								if buffer[position] != rune('(') {
									goto l143
								}
								position++
							case '\'':
								if buffer[position] != rune('\'') {
									goto l143
								}
								position++
							case '&':
								if buffer[position] != rune('&') {
									goto l143
								}
								position++
							case '%':
								if buffer[position] != rune('%') {
									goto l143
								}
								position++
							case '#':
								if buffer[position] != rune('#') {
									goto l143
								}
								position++
							case '"':
								if buffer[position] != rune('"') {
									goto l143
								}
								position++
							case '!':
								if buffer[position] != rune('!') {
									goto l143
								}
								position++
							case ',', '-', '.':
								if c := buffer[position]; c < rune(',') || c > rune('.') {
									goto l143
								}
								position++
							default:
								if c := buffer[position]; c < rune('0') || c > rune('9') {
									goto l143
								}
								position++
							}
						}

						goto l139
					l143:
						position, tokenIndex = position143, tokenIndex143
					}
					if !matchDot() {
						goto l139
					}
				l145:
					{
						position146, tokenIndex146 := position, tokenIndex
						{
							position147, tokenIndex147 := position, tokenIndex
							{
								switch buffer[position] {
								case '\r':
									if buffer[position] != rune('\r') {
										goto l147
									}
									position++
								case '\n':
									if buffer[position] != rune('\n') {
										goto l147
									}
									position++
								case '\t':
									if buffer[position] != rune('\t') {
										goto l147
									}
									position++
								case ' ':
									if buffer[position] != rune(' ') {
										goto l147
									}
									position++
								case '~':
									if buffer[position] != rune('~') {
										goto l147
									}
									position++
								case '}':
									if buffer[position] != rune('}') {
										goto l147
									}
									position++
								case '|':
									if buffer[position] != rune('|') {
										goto l147
									}
									position++
								case '{':
									if buffer[position] != rune('{') {
										goto l147
									}
									position++
								case '`':
									if buffer[position] != rune('`') {
										goto l147
									}
									position++
								case '^':
									if buffer[position] != rune('^') {
										goto l147
									}
									position++
								case ']':
									if buffer[position] != rune(']') {
										goto l147
									}
									position++
								case '\\':
									if buffer[position] != rune('\\') {
										goto l147
									}
									position++
								case '[':
									if buffer[position] != rune('[') {
										goto l147
									}
									position++
								case '@':
									if buffer[position] != rune('@') {
										goto l147
									}
									position++
								case '?':
									if buffer[position] != rune('?') {
										goto l147
									}
									position++
								case '>':
									if buffer[position] != rune('>') {
										goto l147
									}
									position++
								case '=':
									if buffer[position] != rune('=') {
										goto l147
									}
									position++
								case '<':
									if buffer[position] != rune('<') {
										goto l147
									}
									position++
								case ';':
									if buffer[position] != rune(';') {
										goto l147
									}
									position++
								case '/':
									if buffer[position] != rune('/') {
										goto l147
									}
									position++
								case '+':
									if buffer[position] != rune('+') {
										goto l147
									}
									position++
								case '*':
									if buffer[position] != rune('*') {
										goto l147
									}
									position++
								case ')':
									if buffer[position] != rune(')') {
										goto l147
									}
									position++
								case '(':
									if buffer[position] != rune('(') {
										goto l147
									}
									position++
								case '\'':
									if buffer[position] != rune('\'') {
										goto l147
									}
									position++
								case '&':
									if buffer[position] != rune('&') {
										goto l147
									}
									position++
								case '%':
									if buffer[position] != rune('%') {
										goto l147
									}
									position++
								case '$':
									if buffer[position] != rune('$') {
										goto l147
									}
									position++
								case '#':
									if buffer[position] != rune('#') {
										goto l147
									}
									position++
								case '"':
									if buffer[position] != rune('"') {
										goto l147
									}
									position++
								case '!':
									if buffer[position] != rune('!') {
										goto l147
									}
									position++
								default:
									if c := buffer[position]; c < rune(',') || c > rune('.') {
										goto l147
									}
									position++
								}
							}

							goto l146
						l147:
							position, tokenIndex = position147, tokenIndex147
						}
						if !matchDot() {
							goto l146
						}
						goto l145
					l146:
						position, tokenIndex = position146, tokenIndex146
					}
					add(rulePegText, position142)
				}
				if !_rules[rulesp]() {
					goto l139
				}
				add(ruleidentifier, position140)
			}
			return true
		l139:
			position, tokenIndex = position139, tokenIndex139
			return false
		},
		/* 13 sub <- <(open e1 close)> */
		nil,
		/* 14 add <- <('+' sp)> */
		func() bool {
			position150, tokenIndex150 := position, tokenIndex
			{
				position151 := position
				if buffer[position] != rune('+') {
					goto l150
				}
				position++
				if !_rules[rulesp]() {
					goto l150
				}
				add(ruleadd, position151)
			}
			return true
		l150:
			position, tokenIndex = position150, tokenIndex150
			return false
		},
		/* 15 minus <- <('-' sp)> */
		func() bool {
			position152, tokenIndex152 := position, tokenIndex
			{
				position153 := position
				if buffer[position] != rune('-') {
					goto l152
				}
				position++
				if !_rules[rulesp]() {
					goto l152
				}
				add(ruleminus, position153)
			}
			return true
		l152:
			position, tokenIndex = position152, tokenIndex152
			return false
		},
		/* 16 multiply <- <('*' sp)> */
		nil,
		/* 17 divide <- <('/' sp)> */
		nil,
		/* 18 modulus <- <('%' sp)> */
		nil,
		/* 19 exponentiation <- <(('^' sp) / ('*' '*' sp))> */
		nil,
		/* 20 open <- <('(' sp)> */
		nil,
		/* 21 close <- <(')' sp)> */
		nil,
		/* 22 sp <- <(' ' / '\t')*> */
		func() bool {
			{
				position161 := position
			l162:
				{
					position163, tokenIndex163 := position, tokenIndex
					{
						position164, tokenIndex164 := position, tokenIndex
						if buffer[position] != rune(' ') {
							goto l165
						}
						position++
						goto l164
					l165:
						position, tokenIndex = position164, tokenIndex164
						if buffer[position] != rune('\t') {
							goto l163
						}
						position++
					}
				l164:
					goto l162
				l163:
					position, tokenIndex = position163, tokenIndex163
				}
				add(rulesp, position161)
			}
			return true
		},
		/* 23 fstring <- <('`' <(('{' sp e1 sp '}') / escape / (!((&('\r') '\r') | (&('\n') '\n') | (&('\\') '\\') | (&('`') '`')) .))*> '`' sp Action30)> */
		nil,
		/* 24 escape <- <('\\' ((&('\\') '\\') | (&('\'') '\'') | (&('"') '"') | (&('r') 'r') | (&('f') 'f') | (&('n') 'n') | (&('t') 't') | (&('b') 'b')))> */
		nil,
		/* 26 Action0 <- <{ p.AddOperator(TypeHalt) }> */
		nil,
		/* 27 Action1 <- <{ p.AddLeftValueMark() }> */
		nil,
		/* 28 Action2 <- <{ p.AddOperator(TypeAdd) }> */
		nil,
		/* 29 Action3 <- <{ p.AddLeftValueMark() }> */
		nil,
		/* 30 Action4 <- <{ p.AddOperator(TypeSubtract) }> */
		nil,
		/* 31 Action5 <- <{ p.AddLeftValueMark() }> */
		nil,
		/* 32 Action6 <- <{ p.AddOperator(TypeMultiply) }> */
		nil,
		/* 33 Action7 <- <{ p.AddLeftValueMark() }> */
		nil,
		/* 34 Action8 <- <{ p.AddOperator(TypeDivide) }> */
		nil,
		/* 35 Action9 <- <{ p.AddLeftValueMark() }> */
		nil,
		/* 36 Action10 <- <{ p.AddOperator(TypeModulus) }> */
		nil,
		/* 37 Action11 <- <{ p.AddLeftValueMark() }> */
		nil,
		/* 38 Action12 <- <{ p.AddOperator(TypeExponentiation) }> */
		nil,
		/* 39 Action13 <- <{ p.AddOperator(TypeNegation) }> */
		nil,
		/* 40 Action14 <- <{ p.AddLeftValueMark() }> */
		nil,
		/* 41 Action15 <- <{ p.AddOperator(TypeDiceSetK) }> */
		nil,
		/* 42 Action16 <- <{ p.AddOperator(TypeDiceSetQ) }> */
		nil,
		/* 43 Action17 <- <{ p.AddOperator(TypeDice) }> */
		nil,
		/* 44 Action18 <- <{ p.AddValue("1"); p.AddLeftValueMark() }> */
		nil,
		/* 45 Action19 <- <{ p.AddOperator(TypeDiceSetK) }> */
		nil,
		/* 46 Action20 <- <{ p.AddOperator(TypeDiceSetQ) }> */
		nil,
		/* 47 Action21 <- <{ p.AddOperator(TypeDice) }> */
		nil,
		/* 48 Action22 <- <{ p.AddOperator(TypeDicePenalty) }> */
		nil,
		/* 49 Action23 <- <{ p.AddValue("1"); p.AddOperator(TypeDicePenalty) }> */
		nil,
		/* 50 Action24 <- <{ p.AddOperator(TypeDiceBonus) }> */
		nil,
		/* 51 Action25 <- <{ p.AddValue("1"); p.AddOperator(TypeDiceBonus) }> */
		nil,
		/* 52 Action26 <- <{ p.AddLoadVarname(string(text)) }> */
		nil,
		nil,
		/* 54 Action27 <- <{ p.AddValue(string(text)) }> */
		nil,
		/* 55 Action28 <- <{ p.AddValueStr(string(text)) }> */
		nil,
		/* 56 Action29 <- <{ p.AddStore() }> */
		nil,
		/* 57 Action30 <- <{ p.AddFormatString(string(text)) }> */
		nil,
	}
	p.rules = _rules
	return nil
}
